package Libraries.Language.Compile

use Libraries.System.File
use Libraries.Language.Compile.Symbol.all
use Libraries.Language.Compile.Library
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.Containers.List
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.System.DateTime
use Libraries.Language.Compile.Documentation.DocumentationGenerator

class Compiler
    public constant number VERSION = 7.0
    File main = undefined
    File outputFolder = undefined
    File pluginFolder = undefined
    File dependencyFolder = undefined
    constant text DEFAULT_BUILD_FOLDER = "Build"
    constant text DEFAULT_RUN_FOLDER = "Run"
    constant text DEFAULT_STANDARD_LIBRARY_FOLDER = "Library/Standard"
    constant text WEB_DIRECTORY = "WEB-INF/classes"
    constant text DOCUMENTATION_FOLDER = "Documents/"
    constant text OBJECT = "Libraries.Language.Object"
    constant text JAR_DEPENDENCY_FOLDER = "libraries"
    File buildFolder = undefined
    File runFolder = undefined
    File standardLibraryFolder = undefined
    HashTable<text, Dependency> dependencies
    boolean isWebApplication = false
    text name = "Default"
    text convertedJavaScript = ""
    public constant integer JAVA_BYTECODE = 0
    public constant integer JAVASCRIPT = 1
    public constant integer DOCUMENT = 2
    boolean hasScannedStandardLibrary = false

    integer currentOutputType = 0
    boolean outputSpeechCommands = true
    boolean containsSpeechCommandInCompile = false
    CompilerProfiler profiler
    Array<File> additionalPluginFolders
    Array<File> additionalJarFiles
    boolean hasBeenCompiled = false
    boolean writeJavaScriptToDisk = false
    CodeCompletionHandler codeCompletionhandler
    DocumentationGenerator documentationGenerator

    Library standardLibrary

    action GetStandardLibrary returns Library
        return standardLibrary
    end

    action SetStandardLibrary(Library library) 
        standardLibrary = library
    end

    action IsWritingJavaScriptToDisk returns boolean
        return writeJavaScriptToDisk
    end

    action SetWritingJavaScriptToDisk(boolean write)
        writeJavaScriptToDisk = write
    end

    action HasSpeechCallInCompile returns boolean
        return containsSpeechCommandInCompile
    end

    action SetOutputSpeech(boolean doSay)
        outputSpeechCommands = doSay
    end

    action GetOutputSpeech returns boolean
        return outputSpeechCommands
    end

    action LoadDependency(text from, text to)
        Dependency dep
        dep:from = from
        dep:to = to
        dependencies:Add(from, dep)
    end

    /* This action sets what kind of output the compiler is going to have. By default
       this returns Java bytecode.
    */
    action GetOutputType returns integer
        return currentOutputType
    end

    /*
        This action tells the compiler what kind of output to emit.
    */
    action SetOutputType(integer type)
        if type >= JAVA_BYTECODE and type <= DOCUMENT
            currentOutputType = type
        else
            currentOutputType = 0
        end
    end

    action GetDependencies returns Iterator<Dependency>
        return dependencies:GetValueIterator()
    end

    /*
        This action scans the system classes available and parses them appropriately.
    */
    action ScanStandardLibrary
        Library library
        File standardLibraryFolder = GetStandardLibraryFolder()
        output standardLibraryFolder:GetAbsolutePath()


        library:SetLocation(standardLibraryFolder)
        library:Scan()
        standardLibrary = library
    end

    action ParseSandbox(text source, QuorumSourceListener listener, SymbolTable table, CompilerErrorManager errors,
        TypeChecker types, File loc)
        listener:SetSymbolTable(table)
        listener:SetCompilerErrorManager(errors)
        listener:SetTypeChecker(types)
        listener:SetFile(loc)

        if not (source = undefined)
            listener:SetSource(source)
            ParseNative(source, listener)
        else 
            ParseNative(loc, listener)
        end
        
    end
    
    action Request(CodeCompletionRequest request) returns CodeCompletionResult
        return codeCompletionhandler:Request(request)
    end

    action Compile(CompilerRequest request) returns CompilerResult
        Array<File> files = request:files
        HashTable<text, File> originalFileHash
        //this is only used if the standard library is not pre-scanned
        HashTable<text, File> standardLibraryFileHash
        i = 0
        repeat while i < files:GetSize()
            File next = files:Get(i)
            originalFileHash:Add(next:GetAbsolutePath(), next)
            i = i + 1
        end

        if request:recompile not= undefined
            text value = request:recompile:GetAbsolutePath()
            SymbolTable table = request:symbolTable
            if table not= undefined
                Class clazz = table:GetClassInFile(value)
                table:RemoveFile(value)

                if clazz not= undefined
                    clazz:RemoveCallLocationsFromDependencies(request:recompile)
                end

            end
        end

        Library library = request:library
        CompilerResult result
        HashTable<text, ClassOpcode> theOpcodes = undefined
        if request:opcodes not= undefined
            theOpcodes = request:opcodes
        else 
            HashTable<text, ClassOpcode> theOpcodes2
            theOpcodes = theOpcodes2
        end

        result:opcodes = theOpcodes
        File myMain = request:main

        
        text convertedJavaScript = ""
        DateTime time
        boolean containsSpeechCommandInCompile = false
        boolean outputSpeechCommands = false

        //setup sandboxed values for compilation. 
        CompilerProfiler profiler
        TypeChecker checker
        SymbolTable table

        SymbolTable previousCompile = request:symbolTable
        if previousCompile not= undefined
            table:SetTo(previousCompile)
        end

        CompilerErrorManager errors
        SymbolTable standardLibraryTable = undefined
        profiler:Empty()
        profiler:Add(time:GetEpochTime())

        //setup the compiler result to store everything that was done
        result:compilerErrorManager = errors
        result:symbolTable = table
        result:typeChecker = checker
        result:standardLibrary = library
        result:profiler = profiler

        //check if the standard library is here and that the files are valid
        boolean isInvalidCompile = false
        //if the standard library is defined, set it up. Otherwise bail
        if library = undefined
            output "I attempted to compile code without a standard library. Please report this to the development team as a bug."
            return result
        end

        if files = undefined
            isInvalidCompile = true
        elseif files:IsEmpty()
            isInvalidCompile = true
        end

        if isInvalidCompile
            CompilerError error
            text message = ""
            if files = undefined
                message = "I cannot compile an array of files that is passed to me undefined"
            elseif files:IsEmpty()
                message = "I cannot compile an arry of files that is empty. Please specify which files you would like compiled."
            end
            error:SetErrorMessage(message)
            CompilerErrorType t
            t:SetCurrentType(t:MISSING_FILE)
            error:SetCompilerErrorType(t)
            error:SetLineNumber(1)
            error:SetLineNumberEnd(1)
            error:SetColumnNumber(1)
            error:SetColumnNumberEnd(1)
            errors:Add(error)
            return result
        end

        //if these values are both defined, then the user is requesting
        //that one source file, from text, be compiled
        if request:recompile not= undefined and request:recompileValue not= undefined
            table:RemoveFile(request:recompile:GetAbsolutePath())
        end

        HashTable<text, boolean> needsCompilationSet
        //parse all of the files for the first time
        i = 0
        repeat while i < files:GetSize()
            File file = files:Get(i)
            Parser listener
            if request:recompile not= undefined and request:recompileValue not= undefined and file:GetAbsolutePath() = request:recompile:GetAbsolutePath()
                ParseSandbox(request:recompileValue, listener, table, errors, checker, file)
                needsCompilationSet:Add(file:GetAbsolutePath(), true)
            elseif not table:HasFile(file:GetAbsolutePath())
                ParseSandbox(file:Read(), listener, table, errors, checker, file)
                needsCompilationSet:Add(file:GetAbsolutePath(), true)
            end //otherwise ignore it
            i = i + 1
        end
        profiler:Add(time:GetEpochTime())
        //if the needs compilation set is null, just return because nothing 
        //needs to be done
        if needsCompilationSet:IsEmpty()
            result:symbolTable = request:symbolTable
            result:opcodes = request:opcodes
        end

        SymbolTable originalTable = table:Copy()

        //if the standard library has already been scanned, just link stuff in
        //if not, then we need to crawl the transitive dependencies
        if library:IsScanned()
            LinkToStandardLibrary(table, checker, errors, library)
        else 
            //If we haven't scanned the standard library, we need to separately compile
            //all of those files
            HashTable<text, File> allFiles = GetAllRequiredFiles(table, checker, errors, library)
            Array<File> f = allFiles:CopyToValueArray()
            //because of the standard library, do a separate mini-pass of the files
            //to compile the standard library ones and to separate the tables.
            
            SymbolTable standardLibrarySymbolTable
            i = 0
            repeat while i < f:GetSize()
                File next = f:Get(i)
                //if it's not in the original hash, it's in the standard library
                if not originalFileHash:HasKey(next:GetAbsolutePath())
                    standardLibraryFileHash:Add(next:GetAbsolutePath(), next)
                    Class clazz = table:GetClassInFile(next:GetAbsolutePath())
                    if clazz not= undefined
                        standardLibrarySymbolTable:Add(clazz)
                    end
                end
                i = i + 1
            end

            if errors:IsCompilationErrorFree()
                TypeResolution(standardLibrarySymbolTable, checker, errors)
            else 
                return result
            end

            Array<File> standardLibraryFiles = standardLibraryFileHash:CopyToValueArray()
            Array<ClassOpcode> classOpcodes
            if errors:IsCompilationErrorFree()
                i = 0
                repeat while i < standardLibraryFiles:GetSize()
                    File file = standardLibraryFiles:Get(i)
                    QuorumBytecodeListener listener
                    ParseSandbox(undefined, listener, standardLibrarySymbolTable, errors, checker, file)
                    i = i + 1
                end
            end
        end

        if errors:IsCompilationErrorFree()
            SymbolTable needsTable
            //check that any of the files in the original set actually need parsing
            Iterator<text> iterator = needsCompilationSet:GetKeyIterator()
            repeat while iterator:HasNext()
                text value = iterator:Next()
                if originalTable:HasFile(value)
                    needsTable:Add(originalTable:GetClassInFile(value))
                end
            end

            TypeResolution(needsTable, checker, errors, table)
        else 
            return result
        end
        profiler:Add(time:GetEpochTime())

        //tell the type checker to use the merged symbol table on this pass
        checker:SetSymbolTable(table)
        
        if errors:IsCompilationErrorFree()
            i = 0
            repeat while i < files:GetSize()
                File file = files:Get(i)
                QuorumBytecodeListener listener

                if request:recompile not= undefined and request:recompileValue not= undefined and file:GetAbsolutePath() = request:recompile:GetAbsolutePath()
                    ParseSandbox(request:recompileValue, listener, table, errors, checker, file)
                    if listener:HasSayStatementInClass()
                        containsSpeechCommandInCompile = true
                    end
                    ClassOpcode op = listener:GetClassOpcode()
                    op:SetBuild(buildFolder)
                    theOpcodes:Add(op:GetStaticKey(), op)
                elseif needsCompilationSet:HasKey(file:GetAbsolutePath())
                    ParseSandbox(undefined, listener, table, errors, checker, file)
                    if listener:HasSayStatementInClass()
                        containsSpeechCommandInCompile = true
                    end
                    ClassOpcode op = listener:GetClassOpcode()
                    op:SetBuild(buildFolder)
                    theOpcodes:Add(op:GetStaticKey(), op)
                end
                i = i + 1
            end
        else 
            return result
        end
        profiler:Add(time:GetEpochTime())

        Class m = GetMainClass(myMain, table)
        if m = undefined //no class that had a main method was selected, throw an error
            AddMainError(myMain, table, errors)
        elseif m not= undefined and m:HasMainAction() = false
            AddMainError(myMain, table, errors)
        else
            m:SetIsProgramStartingClass(true)
        end
        
        boolean isMissingBuildFile = false
        //at this point, if the build is compilation free, it 
        //is guaranteed to not have compile errors, as no errors
        //can be issues in the bytecode writing stage.
        //if an error is issued, it is a bug in the compiler and not
        //an intentional design decision.
        if errors:IsCompilationErrorFree()
            if request:GetOutputType() = JAVA_BYTECODE
                //open up and begin filling the Jar
                JarGenerator generator
                text manifest = GetManifest(request, generator, table)
                //text compiledName = request:GetName(name)
                File jar = GetExecutable(request)
                if not request:isFastCompileRequest
                    generator:SetManifest(manifest)
                    generator:Open(jar)
                end

                //iterate over all the class opcodes and write them to disk
                Iterator<ClassOpcode> codes = theOpcodes:GetValueIterator()//classOpcodes:GetIterator()
                repeat while codes:HasNext()
                    ClassOpcode code = codes:Next()

                    //we may not need to actually write this file, as it may
                    //already be written. If so, then toss it in 
                    //the jar
                    Class clazz = code:GetClass()
                    File filePath = clazz:GetFile()
                    text needsPath = filePath:GetAbsolutePath()
                    if needsCompilationSet:HasKey(needsPath) and not library:GetSymbolTable():HasClass(clazz:GetStaticKey())
                        code:Write()
                    else 
                        code:SetBuildPaths()
                    end
                    
                    File build = code:GetBuildFile()
                    File buildInterface = code:GetBuildInterfaceFile()

                    text key = code:GetStaticKey()

                    //in this case, the build is missing files, which means
                    //the user may have manually deleted them. We need to tell them
                    //to issue a clean and build. This error should only be issued once
                    if  (build not= undefined and not build:Exists()) or
                        (buildInterface not= undefined and not buildInterface:Exists())
                        and not isMissingBuildFile

                        CompilerError error
                        CompilerErrorType t
                        t:SetCurrentType(t:MISSING_FILE)
                        error:SetCompilerErrorType(t)
                        error:SetErrorMessage("The file " + build:GetAbsolutePath() + " was missing, which means it may have been deleted manually. Please do a clean and build.")
                        error:SetLocation(clazz)
                        errors:Add(error)
                    end

                    //if the file is not part of the standard library, 
                    //generate it
                    if not request:isFastCompileRequest
                        if not library:GetSymbolTable():HasClass(clazz:GetStaticKey())
                            and build not= undefined and build:Exists() and buildInterface not= undefined and buildInterface:Exists()
                            if build not= undefined
                                if request:IsWebRequest()
                                    text path = WEB_DIRECTORY + "/" + build:GetPath()
                                    generator:Add(build, path)
                                else 
                                    generator:Add(build)
                                end
                            end

                            if buildInterface not= undefined
                                if request:IsWebRequest()
                                    text path = WEB_DIRECTORY + "/" + buildInterface:GetPath()
                                    generator:Add(buildInterface, path)
                                else 
                                    generator:Add(buildInterface)
                                end
                            end
                        end
                    end
                end
                profiler:Add(time:GetEpochTime())

                //ok all of the classes are written in the jar. Now fill it up
                //with any dependencies that are necessary.
                //only go through this if not a fast compile
                if not request:isFastCompileRequest
                    WriteDependencies(generator, library, request)
                    generator:Close()
                end
                profiler:Add(time:GetEpochTime())
                
            elseif request:GetOutputType() = JAVASCRIPT
                //first copy all of the standard library opcodes into the array
                Array<ClassOpcode> classOpcodes = theOpcodes:CopyToValueArray()
                Iterator<Class> iterator = table:GetClasses()
                repeat while iterator:HasNext()
                    Class value = iterator:Next()
                    ClassOpcode op = library:GetOpcode(value:GetStaticKey())
                    if op not= undefined
                        classOpcodes:Add(op)
                    end
                end
                convertedJavaScript = CompileToJavaScript(classOpcodes, request, m)
                result:convertedJavaScript = convertedJavaScript
                if IsWritingJavaScriptToDisk()
                    WriteJavaScript(convertedJavaScript)
                end
                
            elseif request:GetOutputType() = request:DOCUMENT
                CreateDocumentation(library, theOpcodes)
            end
        end
        
        return result
    end

    private action CreateDocumentation(Library library, HashTable<text, ClassOpcode> opcodes)
        documentationGenerator:SetRunFolder(runFolder)
        documentationGenerator:Write(library, opcodes, false)
    end

    action TypeResolution(SymbolTable table, TypeChecker types, CompilerErrorManager errors, SymbolTable fullCompilation)
        Iterator<Class> classes = table:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ResolveUseStatements(fullCompilation, errors)
        end
        
        classes = table:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()

            //because of the way the parent flattening algorithm works,
            //classes may already be resolved
            if not next:IsResolved()
                next:ResolveAllTypes(fullCompilation, errors)
            end
        end

        classes = table:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ComputeVirtualActionTable(errors)
            next:ComputeGenericsTables(errors)
            types:Add(next)
        end
    end

    private action WriteJavaScript(text value)
        //check if the run folder is there.
        File run = GetRunFolder()
        if run not=undefined
            if not run:Exists()
                run:CreateDirectories()
            end

            File jsFile
            jsFile:SetWorkingDirectory(run:GetAbsolutePath())
            jsFile:SetPath(GetName() + ".js")
            jsFile:Write(value)
        end
    end

    /*
        This action returns a profiler that has tracked information about 
        each phase of a compile as it goes. 
    */
    action GetCompilerProfiler returns CompilerProfiler
        return profiler
    end

    /*
        This action adds a directory of plugins to be written to the output jar
    */ 
    action AddPluginFolder(File file)
        if file:IsDirectory()
            additionalPluginFolders:Add(file)
        end
    end

    action EmptyAdditionalPluginFolders
        additionalPluginFolders:Empty()
    end

    action EmptyAdditionalJars
        additionalJarFiles:Empty()
    end

    /*
        This action checks if this is a jar file and then adds it as a dependency.
    */
    action AddJar(File file)
        text extension = file:GetFileExtension()
        if extension = "jar"
            additionalJarFiles:Add(file)
        end
    end

    // A convenience action used to write jars to disk.
    private action WriteJarToDisk(File file)
        File copyLocation
        File run = GetRunFolder()
        copyLocation:SetWorkingDirectory(run:GetWorkingDirectory())
        copyLocation:SetPath(run:GetPath() + "/" + JAR_DEPENDENCY_FOLDER + "/")


        if not copyLocation:Exists()
            copyLocation:CreateDirectories()
        end

        copyLocation:SetPath(run:GetPath() + "/" + JAR_DEPENDENCY_FOLDER + "/" + file:GetFileName())
        // Check if the jar already exists. If it does, we leave it as is.
        if not copyLocation:Exists()
            file:Copy(copyLocation)
        end
    end

    private action WriteDependencies(JarGenerator generator, Library library, CompilerRequest request)
        File libraryLocation = library:GetLocation()
        if not additionalPluginFolders:IsEmpty()
            Iterator<File> it = additionalPluginFolders:GetIterator()
            repeat while it:HasNext()
                File folder = it:Next()
                WritePlugins(generator, folder, folder, request)
            end
        end

        //copy any jar files that are dependencies to disk
        if not additionalJarFiles:IsEmpty()
            Iterator<File> jars = additionalJarFiles:GetIterator()
            repeat while jars:HasNext()
                File file = jars:Next()
                WriteJarToDisk(file)
            end
        end

        File compiledStandardLibraryFolder
        compiledStandardLibraryFolder:SetWorkingDirectory(libraryLocation:GetParentDirectory():GetAbsolutePath() + "/Compiled/")
        compiledStandardLibraryFolder:SetPath("Run")
        
        if request:IsWebRequest()
            File servlet
            servlet:SetWorkingDirectory(libraryLocation:GetAbsolutePath() + "/Plugins/web/")
            servlet:SetPath("WEB-INF/classes/web/servlet/Processor.class")
            generator:Add(servlet)

            File glassfish
            glassfish:SetWorkingDirectory(libraryLocation:GetAbsolutePath() + "/Plugins/web/")
            glassfish:SetPath("WEB-INF/glassfish-web.xml")
            generator:Add(glassfish)

            File web
            web:SetWorkingDirectory(libraryLocation:GetAbsolutePath() + "/Plugins/web/")
            web:SetPath("WEB-INF/web.xml")
            generator:Add(web)

            File context
            context:SetWorkingDirectory(libraryLocation:GetAbsolutePath() + "/Plugins/web/")
            context:SetPath("META-INF/context.xml")
            generator:Add(context)

            File stdlib
            stdlib:SetWorkingDirectory(libraryLocation:GetParentDirectory():GetAbsolutePath() + "/Compiled/Run/")
            stdlib:SetPath("QuorumStandardLibrary.jar")
            generator:Add(stdlib, "WEB-INF/lib/QuorumStandardLibrary.jar")

            File stdplug
            stdplug:SetWorkingDirectory(libraryLocation:GetParentDirectory():GetAbsolutePath() + "/Compiled/Run/")
            stdplug:SetPath("QuorumStandardPlugins.jar")
            generator:Add(stdplug, "WEB-INF/lib/QuorumStandardPlugins.jar")
        end

        CopyMissingFiles(compiledStandardLibraryFolder, runFolder)
    end


    /*
    Copy all files from the first directory into the second directory. If the
    second directory already contains any files from the first directory, they
    are skipped rather than overwritten.
    */
    private action CopyMissingFiles(File copyFrom, File copyTo)
        if not copyTo:Exists()
            copyTo:CreateDirectories()
        end
        
        //get all the files in this folder and copy them over
        Array<File> files = copyFrom:GetDirectoryListing()
        Iterator<File> it = files:GetIterator()
        repeat while it:HasNext()
            File file = it:Next()
            if not file:IsHidden()

                File next
                next:SetWorkingDirectory(copyTo:GetAbsolutePath() + "/")
                next:SetPath(file:GetPath())
                if file:IsFile()
                    // If it doesn't already exist, copy the file.
                    if not next:Exists()
                        file:Copy(next)
                    end
                elseif file:IsDirectory()
                    recursiveCopyDirectory(file, next)
                end
            end
        end
    end

    private action recursiveCopyDirectory(File from, File to) 
        if not to:Exists()
            to:CreateDirectories()
        end
        Array<File> files = from:GetDirectoryListing()
        Iterator<File> it = files:GetIterator()
        repeat while it:HasNext()
            File next = it:Next()
            if not next:IsHidden()
                if next:IsFile()
                    File copyTo
                    copyTo:SetWorkingDirectory(to:GetAbsolutePath() + "/")
                    copyTo:SetPath(next:GetPath())

                    DateTime fileTime = next:GetLastModifiedDate()
                    DateTime nextTime = copyTo:GetLastModifiedDate()

                    //if it doesn't exist, copy the file
                    if not copyTo:Exists()
                        next:Copy(copyTo)
                    else
                        //if it does exist
                        if fileTime:GetEpochTime() > nextTime:GetEpochTime()
                            next:Copy(copyTo)
                        end
                    end
                elseif next:IsDirectory()
                    File copyTo
                    copyTo:SetWorkingDirectory(to:GetAbsolutePath() + "/")
                    copyTo:SetPath(next:GetPath())
                    if not copyTo:Exists()
                        copyTo:CreateDirectories()
                    end
                    recursiveCopyDirectory(next, copyTo)
                end
            end
        end
    end

    private action WritePlugins(JarGenerator generator, File file, File originalLocation, CompilerRequest request)
        if file:IsDirectory()
            Array<File> files = file:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()

            repeat while it:HasNext()
                File f = it:Next()
                if not f:IsHidden() and not (f:GetFileExtension() = "DS_Store")
                    WritePlugins(generator, f, originalLocation, request)
                end
            end
        else
            text pluginPath = originalLocation:GetWorkingDirectory()
            text path = file:GetAbsolutePath()
            path = path:GetSubtext(pluginPath:GetSize())
            text wd = file:GetAbsolutePath()
            boolean finished = true

            //if there's a slash at the end of the path, ignore it.
            if pluginPath:GetCharacter(pluginPath:GetSize() - 1) = "/"
                wd = wd:GetSubtext(0, pluginPath:GetSize() - 1)
                finished = false
            end

            if finished
                wd = wd:GetSubtext(0, pluginPath:GetSize())
            end

            File f
            f:SetWorkingDirectory(wd)
            f:SetPath(path)
            if request:IsWebRequest()
                text newPath = WEB_DIRECTORY + "/" + f:GetPath()
                generator:Add(f, newPath)
            else 
                generator:Add(f)
            end
        end
    end

    private action GetManifest(CompilerRequest request, JarGenerator jar, SymbolTable table) returns text
        text version = jar:GetManifestVersion() + ": 1.0"
        line = version:GetCarriageReturn() + version:GetLineFeed()
        version = version + line
        
        
        text created = "Created-By: " + me:GetVersion()
        created = created + line

        text main = jar:GetManifestMainClass()

        File mainFile = request:main
        Class mainClass = me:GetMainClass(mainFile, table)
        text classKey = "quorum." + mainClass:GetStaticKey()
        main = main + ": " + classKey
        main = main + line

        SymbolTable symbolTable = table
        boolean usesLWJGL = symbolTable:HasClass("Libraries.Sound.Audio") or symbolTable:HasClass("Libraries.Game.Game")

        Iterator<Class> tempIterator = symbolTable:GetClassesInPackage("Libraries.Robots.Lego")
        boolean hasRobots = false
        if tempIterator not= undefined
            hasRobots = tempIterator:HasNext()
        end

        //now write any jar dependencies into the manifest
        //if not additionalJarFiles:IsEmpty() or usesLWJGL or hasRobots
        Iterator<File> jars = additionalJarFiles:GetIterator()
        text classpath = "Class-Path: "
        text libraries = JAR_DEPENDENCY_FOLDER

        classpath = classpath + "QuorumStandardLibrary.jar"
        classpath = classpath + " QuorumStandardPlugins.jar"

        boolean isFirst = true
        if not additionalJarFiles:IsEmpty()
            repeat while jars:HasNext()
                File file = jars:Next()
                classpath = classpath + " " + libraries + "/" + file:GetFileName()
                isFirst = false
            end
        end
        main = main + classpath + line

        total = version + created + main + line
        return total
    end

    private action AddMainError(File starter, SymbolTable table, CompilerErrorManager errors)
        CompilerError error
        text message = "I noticed that the class " + starter:GetPath() 
            +   " was specified as the starting point for this program, " 
            + "but it does not have an action named Main. " 

        Class clazz = table:GetClassInFile(starter:GetAbsolutePath())
        if clazz not= undefined
            if clazz:GetAction("main") not= undefined
                message = message + "This class does have an action named "
                    + "main, with a lower case m, did you mean for it to be "
                    + "capitalized?"
            end
        end
        error:SetErrorMessage(message)
        CompilerErrorType t
        t:SetCurrentType(t:MISSING_MAIN)
        error:SetCompilerErrorType(t)
        error:SetFile(starter)
        error:SetLineNumber(1)
        error:SetLineNumberEnd(1)
        error:SetColumnNumber(1)
        error:SetColumnNumberEnd(1)
        errors:Add(error)
    end

    private action CompileToJavaScript(Array<ClassOpcode> classOpcodes, CompilerRequest request, Class mainClass) returns text
        text result = ""
        text plugins = ""
        text main = ""
        Iterator<ClassOpcode> codes = classOpcodes:GetIterator()
        repeat while codes:HasNext()
            ClassOpcode code = codes:Next()
            Class clazz = code:GetClass()

            //Class mainClazz = mainClass
            text mainClazzName = mainClass:GetStaticKey()
            text clazzName = clazz:GetStaticKey()
            if mainClass:GetStaticKey() = clazzName
                main = code:WriteJavaScript()
            else
                result = result + code:WriteJavaScript()
            end

            //check if this class has a plugin. If it does, include it.
            if clazz:HasSystemAction()
                File folder = GetStandardLibraryFolder() 
                path = folder:GetPath() + "/Plugins/javascript/"

                key = clazz:GetStaticKey()
                Array<text> keys = key:Split("\.")
                i = 0
                repeat keys:GetSize() times
                    newKey = keys:Get(i)
                    if i = keys:GetSize() - 1
                        path = path + newKey + ".js"
                    else
                        path = path + newKey + "/"
                    end
                    i = i + 1
                end
                File location
                location:SetWorkingDirectory(folder:GetWorkingDirectory())
                location:SetPath(path)
                if location:Exists() 
                    value = location:Read()
                    plugins = plugins + value + value:GetCarriageReturn() + value:GetLineFeed()
                end
            end
        end
        return plugins + result + main
    end

    action TypeResolution(SymbolTable table, TypeChecker types, CompilerErrorManager errors)
        Iterator<Class> classes = table:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ResolveUseStatements(table, errors)
        end

        classes = table:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()

            //because of the way the parent flattening algorithm works,
            //classes may already be resolved
            if not next:IsResolved()
                next:ResolveAllTypes(table, errors)
            end
        end

        classes = table:GetClasses()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ComputeVirtualActionTable(errors)
            next:ComputeGenericsTables(errors)
            types:Add(next)
        end
    end

    private action TypeResolution(SymbolTable table, TypeChecker types, CompilerErrorManager errors, Array<Class> justTheseClasses)
        Iterator<Class> classes = justTheseClasses:GetIterator()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ResolveUseStatements(table, errors)
        end

        classes = justTheseClasses:GetIterator()
        repeat while classes:HasNext()
            Class next = classes:Next()

            //because of the way the parent flattening algorithm works,
            //classes may already be resolved
            if not next:IsResolved()
                next:ResolveAllTypes(table, errors)
            end
        end

        classes = justTheseClasses:GetIterator()
        repeat while classes:HasNext()
            Class next = classes:Next()
            next:ComputeVirtualActionTable(errors)
            next:ComputeGenericsTables(errors)
            types:Add(next)
        end
    end

    private action LinkToStandardLibrary(SymbolTable table, TypeChecker types, CompilerErrorManager errors, Library library)
        Iterator<Class> classes = table:GetClasses()
        Array<Class> copy
        repeat while classes:HasNext()
            Class clazz = classes:Next()
            copy:Add(clazz)
        end

        classes = copy:GetIterator()
        
        //gather up all the classes on the system and check their
        //use statements for classes we don't know about
        //if there are some, mark them as unparsed
        HashTable<text, text> resolvedPackages

        repeat while classes:HasNext()
            Class clazz = classes:Next()
            File classFile = clazz:GetFile()
            text path = classFile:GetAbsolutePath()
            Iterator<QualifiedName> names = clazz:GetUnresolvedUseStatements()
            repeat while names:HasNext()
                QualifiedName qn = names:Next()
                if qn:IsAll()
                    ResolveAllClassesInContainer(table, qn, library, resolvedPackages, errors)
                else
                    text key = qn:GetStaticKey()
                    ResolveClass(table, key, clazz, library, errors)
                end
            end

            //now check the package we are in to see if there's anything
            //in this package we need to include
            QualifiedName pack = clazz:GetPackage()
            ResolveAllClassesInContainer(table, pack, library, resolvedPackages, errors)

            ResolveQualifiedNames(table, names, clazz, library, resolvedPackages, errors)

            Iterator<QualifiedName> parents = clazz:GetUnresolvedParents()
            ResolveParents(table, parents, clazz, library, errors)

            ResolveBlocks(table, clazz, library, errors)
        end

        //now get any transitive dependencies in the standard library. There is no need
        //to resolve them here, we just need to know what they are.
        Array<Class> dependencies
        Iterator<Class> iterator = table:GetClasses()
        repeat while iterator:HasNext()
            Class clazz = iterator:Next()
            dependencies:Add(clazz)
        end

        i = 0
        repeat while i < dependencies:GetSize()
            Class clazz = dependencies:Get(i)
            text key = clazz:GetStaticKey()
            if not table:HasClass(key)
                table:Add(clazz)
            end

            //now get all the valid uses and add them
            Iterator<Class> uses = clazz:GetValidUses()
            repeat while uses:HasNext()
                Class next = uses:Next()
                text nextKey = next:GetStaticKey()
                if not table:HasClass(nextKey)
                    table:Add(next)
                    //this wasn't in the list, so check its dependencies as well
                    dependencies:Add(next)
                end
            end
            i = i + 1
        end

        //now that we have the table, we need to add everything to the type checker
        iterator = table:GetClasses()
        repeat while iterator:HasNext()
            Class clazz = iterator:Next()
            types:Add(clazz)
        end
    end

    private action ResolveBlocks(SymbolTable table, Class clazz, Library library, CompilerErrorManager errors)
        
        Iterator<Action> actions = clazz:GetActions()
        repeat while actions:HasNext()
            Action act = actions:Next()
            //resolve parameters first
            Iterator<Variable> parameters = act:GetParameterIterator()
            repeat while parameters:HasNext()
                Variable parameter = parameters:Next()
                Type type = parameter:GetType()
                ResolveClass(table, type:GetStaticKey(), clazz, library, errors)
            end
        end
    end

    private action ResolveParents(SymbolTable table, Iterator<QualifiedName> names, 
            Class clazz, Library library, CompilerErrorManager errors)
        repeat while names:HasNext()
            QualifiedName qn = names:Next()
            text key = qn:GetStaticKey()
            ResolveClass(table, key, clazz, library, errors)
        end
    end

    private action ResolveQualifiedNames(SymbolTable table, Iterator<QualifiedName> names, 
        Class clazz, Library library, HashTable<text, text> resolvedPackages, CompilerErrorManager errors)
        repeat while names:HasNext()
            QualifiedName qn = names:Next()
            if qn:IsAll()
                ResolveAllClassesInContainer(table, qn, library, resolvedPackages, errors)
            else
                text key = qn:GetStaticKey()
                ResolveClass(table, key, clazz, library, errors)
            end
        end
    end

    private action ResolveAllClassesInContainer(SymbolTable table,
            QualifiedName name, Library library, HashTable<text, text> resolvedPackages, CompilerErrorManager errors)
        //Get the container name without the "all" at the end
        text value = ""

        if not name:IsEmpty()
            value = name:GetStaticKeyNoAll()
        end

        if resolvedPackages:HasKey(value) //already resolved, so skip it
            return now
        else
            resolvedPackages:Add(value, value)
        end


        SymbolTable standardLibrary = library:GetSymbolTable()
        Iterator<Class> iterator = table:GetClassesInPackage(value)

        if iterator = undefined
            //check the standard library
            iterator = standardLibrary:GetClassesInPackage(value)
        end
        if iterator = undefined
            CompilerError error
            error:SetErrorMessage("I noticed a package named " + value + 
                " was referenced, but I cannot find any record of it.")
            error:SetLocation(name)
            CompilerErrorType t
            t:SetCurrentType(t:MISSING_CLASS)
            error:SetCompilerErrorType(t)
            errors:Add(error)
            return now
        end
        repeat while iterator:HasNext()
            Class clazz = iterator:Next()
            if not table:HasClass(clazz:GetStaticKey())
                table:Add(clazz)
            end
        end
    end

    private action ResolveClass(SymbolTable table, text key, Class clazz, Library library, CompilerErrorManager errors)
        if table:HasClass(key)
            return now
        end

        boolean done = false
        Class c = undefined

        Type typeCheck
        typeCheck:SetToObject(key)
        //is this really just a primitive, pretending to be a class?
        if typeCheck:IsPrimitive()
            return now
        end


        //first check if it's already valid by looking at the symbol
        //table
        c = table:GetClass(key)

        //if it isn't there, check our use table
        if c = undefined
            c = clazz:GetValidUseName(key)
        end

//        //if it isn't there, check the standard library
        SymbolTable standardLibrary = library:GetSymbolTable()
        c = standardLibrary:GetClass(key)

        if c not= undefined
            table:Add(c) //this was already checked to ensure it wasn't in the table.
        end
    end

    /*
        This action is called after the parsing phase, returning an array
        of all files were required for building the project.
    */
    action GetAllRequiredFiles(SymbolTable table, TypeChecker types, 
        CompilerErrorManager errors, Library library) returns HashTable<text, File>
        Array<File> files

        HashTable<text, File> parsed
        HashTable<text, File> unparsed

        Iterator<Class> classes = table:GetClasses()
        repeat while classes:HasNext()
            //gather up all the classes on the system and check their
            //use statements for classes we don't know about
            //if there are some, mark them as unparsed
            repeat while classes:HasNext()
                Class clazz = classes:Next()
                File classFile = clazz:GetFile()
                text path = classFile:GetAbsolutePath()
                if not parsed:HasKey(path)
                    parsed:Add(path, clazz:GetFile())
                end
                Iterator<QualifiedName> names = clazz:GetUnresolvedUseStatements()
                ResolveQualifiedNames(table, names, parsed, unparsed, clazz)

                Iterator<QualifiedName> parents = clazz:GetUnresolvedParents()
                ResolveParents(table, parents, parsed, unparsed, clazz)

                ResolveBlocks(table, parsed, unparsed, clazz)
                ResolveFields(table, parsed, unparsed, clazz)
            end

            //make list of any new classes that need to be analyzed
            //that have not previously been parsed. If there are some
            //send them back through the loop
            List<Class> newClasses
            Iterator<File> mustParse = unparsed:GetValueIterator()
            repeat while mustParse:HasNext()
                File next = mustParse:Next()
                Parser listener
                text null = undefined
                ParseSandbox(null, listener, table, errors, types, next)
                parsed:Add(next:GetAbsolutePath(), next)

                Iterator<Class> parsedClasses = listener:GetClassesIterator()
                repeat while parsedClasses:HasNext()
                    Class clazz = parsedClasses:Next()
                    newClasses:Add(clazz)
                    if not table:HasClass(clazz:GetStaticKey())
                        table:Add(clazz)
                    end
                end
            end
            classes = newClasses:GetIterator()
            unparsed:Empty()
        end
        return parsed
    end

    private action ResolveFields(SymbolTable table, HashTable<text, File> parsed,
        HashTable<text, File> unparsed, Class clazz)
        
        Iterator<Variable> variables = clazz:GetVariables()
        repeat while variables:HasNext()
            Variable var = variables:Next()
            Type type = var:GetType()
            ResolveClass(table, type:GetStaticKey(), clazz, parsed, unparsed)
        end
    end

    private action ResolveBlocks(SymbolTable table, HashTable<text, File> parsed,
        HashTable<text, File> unparsed, Class clazz)
        
        Iterator<Action> actions = clazz:GetActions()
        repeat while actions:HasNext()
            Action act = actions:Next()
            //resolve parameters first
            Iterator<Variable> parameters = act:GetParameterIterator()
            repeat while parameters:HasNext()
                Variable parameter = parameters:Next()
                Type type = parameter:GetType()
                ResolveClass(table, type:GetStaticKey(), clazz, parsed, unparsed)
            end

            Block value = act:GetBlock()
            if value not= undefined
                ResolveBlock(value, table, parsed, unparsed, clazz)
            end
        end
    end

    private action ResolveBlock(Block block, SymbolTable table, HashTable<text, File> parsed,
        HashTable<text, File> unparsed, Class clazz)
        
        Iterator<Variable> variables = block:GetVariables()
        repeat while variables:HasNext()
            Variable var = variables:Next()
            Type type = var:GetType()
            if type not= undefined
                ResolveClass(table, type:GetStaticKey(), clazz, parsed, unparsed)
            end
        end

        Iterator<Block> blocks = block:GetBlocks()
        repeat while blocks:HasNext()
            Block nestedBlock = blocks:Next()
            ResolveBlock(nestedBlock, table, parsed, unparsed, clazz)
        end
    end
    /*
        This action handles resolving a class or otherwise scheduling a parse
        from the standard library. If a class is returned, then it has
        already been parsed and is in the symbol table. If the class
        returns is undefined, then either the class does not exist or 
        it is in the standard library and has not yet been parsed. As such,
        returning undefined is not necessarily a compiler error.
    */
    private action ResolveClass(SymbolTable table, text key, Class clazz, HashTable<text, File> parsed,
        HashTable<text, File> unparsed)
        boolean done = false
        Class c = undefined

        Type typeCheck
        typeCheck:SetToObject(key)
        //is this really just a primitive, pretending to be a class?
        if typeCheck:IsPrimitive()
            return now
        end


        //first check if it's already valid by looking at the symbol
        //table
        c = table:GetClass(key)

        //if it isn't there, check our use table
        if c = undefined
            c = clazz:GetValidUseName(key)
        end

        //if it isn't there, check the standard library, to 
        //see if there's a file in the right place
        //if there is, mark it for parsing
        if c = undefined
            File file = GetStandardLibraryFile(key, clazz:GetPackageKey())
            if file not= undefined
                text newPath = file:GetAbsolutePath()
                if parsed:HasKey(newPath) //this class has already been parsed
                elseif unparsed:HasKey(newPath) //this class is already scheduled for parsing
                else
                    unparsed:Add(newPath, file)
                end
            else //ok last chance. Check an unresolved use statement to
                 //see if one of these reference the standard library
                 QualifiedName qn = clazz:GetUnresolvedUseStatement(key)
                 if qn not= undefined
                    file = GetStandardLibraryFile(qn:GetStaticKey(), clazz:GetPackageKey())
                    if file not= undefined
                        text newPath = file:GetAbsolutePath()
                        if parsed:HasKey(newPath) //this class has already been parsed
                        elseif unparsed:HasKey(newPath) //this class is already scheduled for parsing
                        else
                            unparsed:Add(newPath, file)
                        end
                    end
                 end
            end
        end
    end

    private action ResolveParents(SymbolTable table, Iterator<QualifiedName> names, 
            HashTable<text, File> parsed,
            HashTable<text, File> unparsed, Class clazz)
        repeat while names:HasNext()
            QualifiedName qn = names:Next()
            text key = qn:GetStaticKey()
            ResolveClass(table, key, clazz, parsed, unparsed)
        end
    end

    private action ResolveQualifiedNames(
            SymbolTable table, 
            Iterator<QualifiedName> names, 
            HashTable<text, File> parsed,
            HashTable<text, File> unparsed, Class clazz)
        repeat while names:HasNext()
            QualifiedName qn = names:Next()
            if qn:IsAll()
                ResolveAllClassesInContainer(table, qn, parsed, unparsed, clazz)
            else
                text key = qn:GetStaticKey()
                ResolveClass(table, key, clazz, parsed, unparsed)
            end
        end
    end

    private action ResolveAllClassesInContainer(SymbolTable table,
            QualifiedName name, 
            HashTable<text, File> parsed,
            HashTable<text, File> unparsed, Class clazz)
        //Get the container name without the "all" at the end
        File folder = GetStandardLibraryFolderForPackage(name:GetStaticKeyNoAll())

        //check if this is the standard library. If so, load them all into unparsed
        //if they aren't already in there or in parsed
        if folder not= undefined
            Array<File> files = folder:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()
            repeat while it:HasNext()
                File file = it:Next()
                text path = file:GetAbsolutePath()
                if not file:IsDirectory() and not parsed:HasKey(path) and not unparsed:HasKey(path)
                    and file:GetFileExtension() = "quorum" and not table:HasFile(file:GetAbsolutePath())
                    unparsed:Add(path, file)
                end
            end
        end
    end

    private action GetStandardLibraryFolderForPackage(text key) returns File
        if standardLibraryFolder = undefined
            File build
            build:SetPath(DEFAULT_STANDARD_LIBRARY_FOLDER)
            standardLibraryFolder = build
        end
        text loc = standardLibraryFolder:GetWorkingDirectory()
        text loc2 = standardLibraryFolder:GetAbsolutePath()

        File file
        file:SetWorkingDirectory(loc2)

        Array<text> values = key:Split("\.")

        text location = "/"
        Iterator<text> it = values:GetIterator()
        repeat while it:HasNext()
            text next = it:Next()
            location = location + next

            if it:HasNext()
                location = location + "/"
            end
        end

        file:SetPath(location)
        if file:Exists()
            return file
        end
        return undefined
    end

    action GetStandardLibraryFile(text key, text fromPackage) returns File
        Array<text> values = key:Split("\.")
        if standardLibraryFolder = undefined
            File build
            build:SetPath(DEFAULT_STANDARD_LIBRARY_FOLDER)
            standardLibraryFolder = build
        end
        text loc = standardLibraryFolder:GetWorkingDirectory()
        text loc2 = standardLibraryFolder:GetAbsolutePath()

        File file
        file:SetWorkingDirectory(loc2)

        if values:GetSize() = 1
            text mySplit = "/" + fromPackage:Replace(".", "/") + "/" + key + ".quorum"
            file:SetPath(mySplit)
            if file:Exists()
                return file
            end
        else
            text location = "/"
            Iterator<text> it = values:GetIterator()
            repeat while it:HasNext()
                text next = it:Next()
                location = location + next

                if it:HasNext()
                    location = location + "/"
                else
                    location = location + ".quorum"
                end
            end

            file:SetPath(location)
            if file:Exists()
                return file
            end
        end
        
        return undefined
    end

    private system action ParseNative(File file, QuorumSourceListener listener)

    private system action ParseNative(text source, QuorumSourceListener listener)

    action GetName returns text
        return name
    end

    action SetName(text name)
        me:name = name
    end

    action GetMainClass(File theMain, SymbolTable table) returns Class
        if theMain not= undefined and table not= undefined
            text path = theMain:GetAbsolutePath()
            Class c = table:GetClassInFile(path)
            return c
        end
        
        return undefined
    end

    action GetVersion returns text
        return "Quorum " + VERSION
    end

    action GetOutputFolder returns File
        return outputFolder
    end

    action SetOutputFolder(File file)
        if file not= undefined
            outputFolder = file
            text path = file:GetAbsolutePath()

            if not file:Exists()
                file:CreateDirectories()
            end

            File build
            build:SetWorkingDirectory(path)
            build:SetPath(DEFAULT_BUILD_FOLDER)
            buildFolder = build

            File run 
            run:SetWorkingDirectory(path)
            run:SetPath(DEFAULT_RUN_FOLDER)
            me:runFolder = run
        else
            File root
            outputFolder = root
        end
    end

    action GetBuildFolder returns File
        return buildFolder
    end

    action GetStandardLibraryFolder returns File
        if standardLibraryFolder = undefined
            File build
            build:SetPath(DEFAULT_STANDARD_LIBRARY_FOLDER)
            return build
        end
        return standardLibraryFolder
    end

    action SetStandardLibraryFolder(File file)
        standardLibraryFolder = file
        File f
        f:SetWorkingDirectory(standardLibraryFolder:GetAbsolutePath() + "/Plugins/")
        f:SetPath("plugins")
        pluginFolder = f

        File f2
        f2:SetWorkingDirectory(standardLibraryFolder:GetAbsolutePath() + "/Plugins/")
        f2:SetPath("org")
        dependencyFolder = f2
    end

    action GetExecutable(CompilerRequest request) returns File
        File run = GetRunFolder()
        text path = run:GetPath() + "/"
        File newRun
        newRun:SetWorkingDirectory(run:GetWorkingDirectory())
        text value = request:GetName(name)
        newRun:SetPath(path + value)
        return newRun
    end

    action GetRunFolder returns File
        return runFolder
    end
end