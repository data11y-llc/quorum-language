package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class ByteArrayTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/ByteArray/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        Get()
        Set()
        GetSubArray()
        GetSize()
        IsBigEndian()
        SetBigEndian()
        UnsignedIntegerFromByte()
        CharacterFromByte()
        CharacterFromTwoBytes()
        IntegerFromByte()
        IntegerFromTwoBytes()
        UnsignedIntegerFromTwoBytes()
        IntegerFromFourBytes()
        SignedIntegerFromFourUnsignedBytes()
        NumberFromFourBytes()
        NumberFromEightBytes()
        TextFromEightBytes()
        TextFromFourBytes()
    end

    action GetName returns text
        return "Byte Array Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action Get
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Get.quorum")
        files:Add(main)
        results:Add(0, "65")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Set
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Set.quorum")
        files:Add(main)
        results:Add(0, "65")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetSubArray
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetSubArray.quorum")
        files:Add(main)
        results:Add(0, "2")
        results:Add(1, "65")
        results:Add(2, "66")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetSize
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetSize.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SetSize
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetSize.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IsBigEndian
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IsBigEndian.quorum")
        files:Add(main)
        results:Add(0, "true")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SetBigEndian
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetBigEndian.quorum")
        files:Add(main)
        results:Add(0, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action UnsignedIntegerFromByte
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "UnsignedIntegerFromByte.quorum")
        files:Add(main)
        results:Add(0, "65")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CharacterFromByte
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CharacterFromByte.quorum")
        files:Add(main)
        results:Add(0, "A")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action CharacterFromTwoBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CharacterFromTwoBytes.quorum")
        files:Add(main)
        results:Add(0, "ƒÅ")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IntegerFromByte
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IntegerFromByte.quorum")
        files:Add(main)
        results:Add(0, "65")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IntegerFromTwoBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IntegerFromTwoBytes.quorum")
        files:Add(main)
        results:Add(0, "16706")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action UnsignedIntegerFromTwoBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "UnsignedIntegerFromTwoBytes.quorum")
        files:Add(main)
        results:Add(0, "16706")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action IntegerFromFourBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "IntegerFromFourBytes.quorum")
        files:Add(main)
        results:Add(0, "1094861636")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action SignedIntegerFromFourUnsignedBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SignedIntegerFromFourUnsignedBytes.quorum")
        files:Add(main)
        results:Add(0, "1094861636")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NumberFromFourBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NumberFromFourBytes.quorum")
        files:Add(main)
        results:Add(0, "12.141422271728516")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action NumberFromEightBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "NumberFromEightBytes.quorum")
        files:Add(main)
        results:Add(0, "2393736.0078738946")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TextFromEightBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TextFromEightBytes.quorum")
        files:Add(main)
        results:Add(0, "4702394920281965316")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action TextFromFourBytes
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "TextFromFourBytes.quorum")
        files:Add(main)
        results:Add(0, "1094861636")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end


end