package Libraries.Language.Compile.Test

use Libraries.Language.Compile.all
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Language.Compile.Parser
use Libraries.System.File
use Libraries.Containers.Iterator
use Libraries.Language.Compile.Translate.JarGenerator
use Libraries.System.StackTraceItem

class BigIntegerTester 
    CompilerTestSuite suite = undefined
    text path = "Library/Tests/BigInteger/"
    text passPath = path + "Pass/"
    text failPath = path + "Fail/"

    action Test
        path = passPath
        SetValue()
        GetText()
        Divide()
        Add()
        And()
        AndNot()
        CompareResult()
        Equals()
        ToNumber()
        GreatestCommonDivisor()
        ToInteger()
        GetMaximumValue()
        GetMinimumValue()
        Mod()
        Multiply()
        Negate()
        BitwiseNot()
        Or()
        RaiseToPower()
        Remainder()
        ShiftLeft()
        ShiftRight()
        GetSignValue()
        Subtract()
        ExclusiveOr()
    end

    action GetName returns text
        return "Big Integer Tests"
    end

    action GetCompilerTestSuite returns CompilerTestSuite
        return suite
    end

    action SetCompilerTestSuite(CompilerTestSuite suite)
        me:suite = suite
    end

    action SetValue 
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "SetValue.quorum")
        files:Add(main)
        results:Add(0, "3000000000")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetText
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetText.quorum")
        files:Add(main)
        results:Add(0, "10110010110100000101111000000000")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)        
    end

    action Add
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Add.quorum")
        files:Add(main)
        results:Add(0, "6000000000")
        suite:Test(files, results)
        suite:TestJavaScript(files, results) 
    end

    action And
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "And.quorum")
        files:Add(main)
        results:Add(0, "3000000000")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)    
    end

    action AndNot
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "AndNot.quorum")
        files:Add(main)
        results:Add(0, "0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results) 
    end

    action CompareResult
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "CompareResult.quorum")
        files:Add(main)
        results:Add(0, "-1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results) 
    end

    action Divide
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Divide.quorum")
        files:Add(main)
        results:Add(0, "1500000000")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Equals
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Equals.quorum")
        files:Add(main)
        results:Add(0, "true")
        results:Add(1, "false")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ToNumber
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ToNumber.quorum")
        files:Add(main)
        results:Add(0, "24.0")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GreatestCommonDivisor
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GreatestCommonDivisor.quorum")
        files:Add(main)
        results:Add(0, "12")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ToInteger
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ToInteger.quorum")
        files:Add(main)
        results:Add(0, "30")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetMaximumValue
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetMaximumValue.quorum")
        files:Add(main)
        results:Add(0, "300")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetMinimumValue
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetMinimumValue.quorum")
        files:Add(main)
        results:Add(0, "1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Mod
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Mod.quorum")
        files:Add(main)
        results:Add(0, "4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Multiply
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Multiply.quorum")
        files:Add(main)
        results:Add(0, "3980")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Negate
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Negate.quorum")
        files:Add(main)
        results:Add(0, "10")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end
    
    action BitwiseNot
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "BitwiseNot.quorum")
        files:Add(main)
        results:Add(0, "-11")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Or
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Or.quorum")
        files:Add(main)
        results:Add(0, "3")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action RaiseToPower()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "RaiseToPower.quorum")
        files:Add(main)
        results:Add(0, "81")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Remainder()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Remainder.quorum")
        files:Add(main)
        results:Add(0, "-4")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ShiftLeft()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ShiftLeft.quorum")
        files:Add(main)
        results:Add(0, "40")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ShiftRight()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ShiftRight.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action GetSignValue()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "GetSignValue.quorum")
        files:Add(main)
        results:Add(0, "-1")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action Subtract()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "Subtract.quorum")
        files:Add(main)
        results:Add(0, "5")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

    action ExclusiveOr()
        Array<File> files
        Array<text> results
        File main
        main:SetPath(path + "ExclusiveOr.quorum")
        files:Add(main)
        results:Add(0, "2")
        suite:Test(files, results)
        suite:TestJavaScript(files, results)
    end

end