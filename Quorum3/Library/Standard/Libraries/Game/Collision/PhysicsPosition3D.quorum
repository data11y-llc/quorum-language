package Libraries.Game.Collision

use Libraries.Compute.Matrix3
use Libraries.Compute.Matrix4
use Libraries.Compute.Vector3
use Libraries.Compute.Quaternion
use Libraries.Containers.Array
use Libraries.Compute.Math

/*
This class stores coordinate systems in 3D space, where the coordinate system
represent the position of the 3D item and the tilt of the 3D item with 
respect to your screen.
NOTE: this class can be seen as the class that stores a 4x4 transformation matrix.
*/
class PhysicsPosition3D 
    Matrix3 basis   //the "tilt" of the 3D object, or the basis that is used to describe the local coordinate system of the 3D object 
    Vector3 origin  //the position of the 3D object's origin with respect to the origin of the global coordinates



    action Output
        basis:Output()
        origin:Output()
    end
    /*
    This action sets the location and the tilt of the 3D object using another
    PhysicsPosition3D.
    Attribute: Parameter the other PhysicsPosition3D.
    */
    action Set(PhysicsPosition3D transform)
        basis:Set(transform:basis)
        origin:Set(transform:origin)
    end 

    /*
    This action sets the tilt of the 3D object and reset the position of the 3D
    object (the 3D object's local origin) to the global coordinate's origin.
    If you don't want the origin of the 3D object to be reset, please use the 
    action "Set(Matrix3 basis, Vector3 origin)."
    Attribute: Parameter matrix The tilt of the 3D object.
    */
    action Set(Matrix3 matrix)
        basis:Set(matrix)
        origin:Set(0, 0, 0)
    end

    /*
    This action sets the position of a 3D object using a matrix that contains
    both the tilt of the object and the position of the 3D object's center
    with respect to the world center.  
    Attribute: Parameter matrix The tilt of the object and the position of the 3D object.
    */
    action Set(Matrix4 matrix)
        basis:Set(matrix)
        origin:Set(matrix:row0column3, matrix:row1column3, matrix:row2column3)
    end

    /*
    This action sets the tilt of the 3D object using "Matrix3 basis" and sets
    the location of the 3D object using "Vector3 origin."
    Attribute: Parameter basis The tilt of the 3D object.
    Attribute: Parameter origin The center of the 3D object.
    */
    action Set(Matrix3 basis, Vector3 origin)
        me:basis:Set(basis)
        me:origin:Set(origin)
    end

    /*
    This action gets the tilt of the 3D object (the rotational part of the 
    transformation matrix).
    Attribute: Returns the tilt of the 3D object.
    */
    action GetBasis returns Matrix3
        return basis
    end

    /*
    This action gets the position of the 3D object (the 3D object's local origin
    with respect to the global coordinates).
    Attribute: Returns the center of the 3D object.
    */
    action GetOrigin returns Vector3
        return origin
    end

    /*
    This action turns a point/vector (Vector3 vector) that is described relative
    to the 3D object and change it so that the point/vector is described in
    the global coordinates.
    Attribute: Parameter vector The vector to be transformed.
    */
    action Transform(Vector3 vector)
        vector:Multiply(basis)
        vector:Add(origin)
    end

    /*
    This action sets the tilt of the 3D object to be 0 and make the position of
    the 3D object described by this PhysicsPosition3D to align with the global
    origin.
    */
    action SetToIdentity
        basis:IdentityMatrix()
        origin:SetZero()
    end

    /*
    This action calculates the inverse of the transformation matrix stored inside
    this PhysicsPosition3D.
    */
    action Inverse
        basis:Transpose()
        origin:Scale(-1)
        origin:Multiply(basis)
    end

    /*
    This action stores the inverse of the transformation matrix passed in.
    Attribute: Parameter transform The transformation matrix that you want to find the inverse for.
    */
    action Inverse(PhysicsPosition3D transform)
        Set(transform)
        Inverse()
    end

    /*
    This action changes the current PhysicsPosition3D with respect to the
    current PhysicsPosition3D using the "PhysicsPosition3D transform" passed in.
    A mathematical representation is: [currT] = [currT][passedInT].
    Attribute: Parameter transform The transformation matrix that you want to multiply by.
    */
    action Multiply(PhysicsPosition3D transform)
        Vector3 vector
        /*
        vector:Set(origin)   //translation of [currT]
        Transform(vector)    //transform the "translation of [currT] using [currT], doesn't make sense
        */

        //edit the code above to the code below
        vector:Set(transform:origin)        
        Transform(vector)

        basis:Multiply(transform:basis)
        origin:Set(vector)
    end

    /*
    This action multiplies two transformation matrices together and store the 
    result in the current PhysicsPosition3D.
    Mathematically: [currT] = [T_1][T_2].
    Attribute: Parameter transform1 The first transformation matrix.
    Attribute: Parameter transform2 The second transformation matrix.
    */
    action Multiply(PhysicsPosition3D transform1, PhysicsPosition3D transform2)
        Vector3 vector
        vector:Set(transform2:origin)
        transform1:Transform(vector)    //vector becomes displacement of transform2 relative to the global coordinates
                                        //if transform2 is described from the perspective of transform1

        basis:Multiply(transform1:basis, transform2:basis)
        origin:Set(vector)
    end

    /*
    This action multiplies "Vector3 in" with the inverse of the current PhysicsPosition3D
    and store the result in "Vector3 out."
    Mathematically: out = [currT]^(-1) * in
    Attribute: Parameter in A point described in global coordinates.
    Attribute: Parameter out The same point described relative to the 3D object.
    */
    action InverseTransform(Vector3 in, Vector3 out)
        out:Set(in)
        out:Subtract(origin)
        
        Matrix3 matrix
        matrix:Set(basis)
        matrix:Transpose()
        out:Multiply(matrix)
    end

    /*
    This action returns a quaternion (another holder of the position and tilt 
    information) that represents the current PhysicsPosition3D.
    Attribute: Returns The current position and tilt of the 3D object represented in the form of a quaternion.
    */
    action GetRotation returns Quaternion
        Quaternion quaternion
        number trace = basis:row0column0 + basis:row1column1 + basis:row2column2
        
        Math math

        Array<number> temp
        temp:SetSize(4)

        if trace > 0
            number s = math:SquareRoot(trace + 1)
            temp:Set(3, s * 0.5)
            s = 0.5 / s

            temp:Set(0, ((basis:row2column1 - basis:row1column2) * s))
            temp:Set(1, ((basis:row0column2 - basis:row2column0) * s))
            temp:Set(2, ((basis:row1column0 - basis:row0column1) * s))
        else
            integer i = 0
            if basis:row0column0 < basis:row1column1
                if basis:row1column1 < basis:row2column2
                    i = 2
                else
                    i = 1
                end
            else
                if basis:row0column0 < basis:row2column2
                    i = 2
                else
                    i = 0
                end
            end

            integer j = (i + 1) mod 3
            integer k = (i + 2) mod 3

            number s = math:SquareRoot(basis:GetElement(i, i) - basis:GetElement(j, j) - basis:GetElement(k, k) + 1)
            temp:Set(i, s * 0.5)
            s = 0.5 / s

            temp:Set(3, (basis:GetElement(k, j) - basis:GetElement(j, k)) * s)
            temp:Set(j, (basis:GetElement(j, i) + basis:GetElement(i, j)) * s)
            temp:Set(k, (basis:GetElement(k, i) + basis:GetElement(i, k)) * s)
        end
        quaternion:Set(temp:Get(0), temp:Get(1), temp:Get(2), temp:Get(3))     

        return quaternion
    end

    /*
    This action sets the current PhysicsPosition3D using a quaternion that is
    passed in.
    Attribute: Parameter quaternion The current position and tilt of the 3D object.
    */
    action SetRotation(Quaternion quaternion)
        number d = quaternion:GetX() * quaternion:GetX() + quaternion:GetY() * quaternion:GetY() + quaternion:GetZ() * quaternion:GetZ() + quaternion:GetW() * quaternion:GetW()
        number s = 2.0 / d
        number xs = quaternion:GetX() * s
        number ys = quaternion:GetY() * s
        number zs = quaternion:GetZ() * s
        number wx = quaternion:GetW() * xs
        number wy = quaternion:GetW() * ys
        number wz = quaternion:GetW() * zs
        number xx = quaternion:GetX() * xs
        number xy = quaternion:GetX() * ys
        number xz = quaternion:GetX() * zs
        number yy = quaternion:GetY() * ys
        number yz = quaternion:GetY() * zs
        number zz = quaternion:GetZ() * zs
        
        basis:row0column0 = 1 - (yy + zz)
        basis:row0column1 = xy - wz
        basis:row0column2 = xz + wy
        basis:row1column0 = xy + wz
        basis:row1column1 = 1 - (xx + zz)
        basis:row1column2 = yz - wx
        basis:row2column0 = xz - wy
        basis:row2column1 = yz + wx
        basis:row2column2 = 1 - (xx + yy)        
    end

    /*
    This action returns a 4x4 transformation matrix representation of this
    PhysicsPosition3D.
    Attribute: Parameter matrix A 4x4 transformation matrix representation of this
    PhysicsPosition3D.
    Attribute: Returns a 4x4 transformation matrix representation of this
    PhysicsPosition3D.
    */
    action GetMatrix(Matrix4 matrix) returns Matrix4
        matrix:Set(basis)
        matrix:row0column3 = origin:GetX()
        matrix:row1column3 = origin:GetY()
        matrix:row2column3 = origin:GetZ()

        return matrix
    end
end