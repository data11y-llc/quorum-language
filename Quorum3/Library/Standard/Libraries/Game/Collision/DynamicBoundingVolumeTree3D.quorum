package Libraries.Game.Collision

use Libraries.Interface.Item3D
use Libraries.Containers.Array
use Libraries.Compute.Vector3
use Libraries.Containers.Stack
use Libraries.Compute.Math
use Libraries.Game.BoundingBox
use Libraries.Game.Collision.DynamicBoundingVolumeTreeNode3D
use Libraries.Game.Collision.Item3DNode

/*
DynamicBoundingVolumeTree2D is the tree structure for storing the bounding
boxes for 2D objects that are able to collide. The tree is a complete binary
tree and stores the bounding boxes in a hierarchal structure with the parent
node containing a bounding box that bounds the bounding boxes of both of its
children.
*/
class DynamicBoundingVolumeTree3D
    // This number is used to make the bounding box of the item in the tree
    // slightly bigger than the bounding box passed when creating the node.
    // This allows the item to move around in its bounding box a little without
    // needing to be reinserted into the tree.
    constant number boundingBoxExtension = 0.1
    constant number boundingBoxMultiplier = 2.0

    public constant integer NULL_NODE = -1

    DynamicBoundingVolumeTreeNode3D root = undefined

    Array<DynamicBoundingVolumeTreeNode3D> nodes
    integer nodeCount = 0
    integer freeList = 0
    integer nodesCapacity = 16

    Math math

    on create
        nodes:SetSize(nodesCapacity)
        integer i = nodesCapacity - 1
        repeat while i >= 0
            DynamicBoundingVolumeTreeNode3D node
            node:SetID(i)
            nodes:Set(i, node)
            if i = nodesCapacity - 1
                node:SetParent(undefined)
            else
                node:SetParent(nodes:Get(i + 1))
            end
            node:SetHeight(-1)
            i = i - 1
        end
    end

    /*
    This action creates a new node for the Dynamic Bounding Volume Tree with the
    given BoundingBox and given Item and inserts the new node as a leaf for the 
    tree.
    */
    action CreateNode(BoundingBox boundingBox, Item3DNode node) returns integer
        DynamicBoundingVolumeTreeNode3D newNode = AllocateNode()
        integer id = newNode:GetID()
        // calculate the bounding box for the node
        BoundingBox nodeBoundingBox = newNode:GetBoundingBox()
        Vector3 minimum
        Vector3 maximum
        minimum:SetX(boundingBox:GetMinimum():GetX() - boundingBoxExtension)
        minimum:SetY(boundingBox:GetMinimum():GetY() - boundingBoxExtension)
        minimum:SetZ(boundingBox:GetMinimum():GetZ() - boundingBoxExtension)
        maximum:SetX(boundingBox:GetMaximum():GetX() + boundingBoxExtension)
        maximum:SetY(boundingBox:GetMaximum():GetY() + boundingBoxExtension)
        maximum:SetZ(boundingBox:GetMaximum():GetZ() + boundingBoxExtension)
        nodeBoundingBox:Set(minimum, maximum)
        newNode:SetItemNode(node)

        // insert into the tree
        InsertLeaf(newNode)

        return id
    end

    /*
    This action removes the node from the Dynamic Bounding Volume Tree with the
    given node ID.
    */
    action DestroyNode(integer nodeID)
        if 0 <= nodeID and nodeID < nodesCapacity
            DestroyNode(nodes:Get(nodeID))
        end
    end

    /*
    This action removes the given node from the tree.
    */
    action DestroyNode(DynamicBoundingVolumeTreeNode3D node)        
        // ensure node is a leaf - we only can remove leaf nodes because
        // it doesn't make sense to remove internal nodes
        if node:GetLeftChild() not= undefined
            return now
        end

        RemoveLeaf(node)
        FreeNode(node)
    end

    /*
    This action moves the object contained in the node with the given node ID by
    the given displacement vector. If the node moves outside of its existing
    bounding box, then the object is removed from the tree, a new bounding box
    is calculated, and it is reinserted into the tree. Otherwise, the node
    is left where it is in the tree.
    
    Attribute: Returns Returns whether the item is reinserted into the tree
    */
    action MoveNode(integer nodeID, BoundingBox boundingBox, Vector3 displacement) returns boolean
        if 0 <= nodeID and nodeID < nodesCapacity
            return MoveNode(nodes:Get(nodeID), boundingBox, displacement)
        end

        return false
    end

    /*
    This action moves the object. If the object moves outside of its existing
    big bounding box, then the object is removed from the tree, a new bounding
    box is calculated, and it is reinserted into the tree. Otherwise, the 
    action returns immediately.

    Attribute: Returns Whether the item is reinserted into the tree
    */
    action MoveNode(DynamicBoundingVolumeTreeNode3D node, BoundingBox boundingBox, Vector3 displacement) returns boolean
        BoundingBox nodeBoundingBox = node:GetBoundingBox()

        // check if the node's big bounding box already contains the passed
        // bounding box - if so, we don't need to move it and can simply return
        // false
        if nodeBoundingBox:GetMinimum():GetX() <= boundingBox:GetMinimum():GetX() and
           nodeBoundingBox:GetMinimum():GetY() <= boundingBox:GetMinimum():GetY() and
           nodeBoundingBox:GetMinimum():GetZ() <= boundingBox:GetMinimum():GetZ() and
           boundingBox:GetMaximum():GetX() <= nodeBoundingBox:GetMaximum():GetX() and
           boundingBox:GetMaximum():GetY() <= nodeBoundingBox:GetMaximum():GetY() and
           boundingBox:GetMaximum():GetZ() <= nodeBoundingBox:GetMaximum():GetZ()
                return false
        end

        // otherwise, we need to remove the node, recalculate the bounding box
        // and reinsert the node
        RemoveLeaf(node)

        // extend the bounding box
        Vector3 minimum = nodeBoundingBox:GetMinimum()
        Vector3 maximum = nodeBoundingBox:GetMaximum()
        minimum:Set(boundingBox:GetMinimum():GetX() - boundingBoxExtension, boundingBox:GetMinimum():GetY() - boundingBoxExtension, boundingBox:GetMinimum():GetZ() - boundingBoxExtension)
        maximum:Set(boundingBox:GetMaximum():GetX() + boundingBoxExtension, boundingBox:GetMaximum():GetY() + boundingBoxExtension, boundingBox:GetMaximum():GetZ() + boundingBoxExtension)

        // use the displacement to update the bounding box
        number dx = displacement:GetX() * boundingBoxMultiplier
        number dy = displacement:GetY() * boundingBoxMultiplier
        number dz = displacement:GetZ() * boundingBoxMultiplier

        if dx < 0
            minimum:SetX(minimum:GetX() + dx)
        else
            maximum:SetX(maximum:GetX() + dx)
        end

        if dy < 0
            minimum:SetY(minimum:GetY() + dy)
        else
            maximum:SetY(maximum:GetY() + dy)
        end

        if dz < 0
            minimum:SetZ(minimum:GetZ() + dz)
        else
            maximum:SetZ(maximum:GetZ() + dz)
        end

        // reinsert into tree with new bounding box
        InsertLeaf(node)
        return true
    end

    /*
    This action returns the Item2Dcontained in the tree node with the given ID
    */
    action GetItemNode(integer nodeID) returns Item3DNode
        if 0 <= nodeID and nodeID < nodesCapacity
            return GetItemNode(nodes:Get(nodeID))
        end
        return undefined
    end

    /*
    This action returns the Item2Dcontained in the given tree node
    */
    action GetItemNode(DynamicBoundingVolumeTreeNode3D node) returns Item3DNode
        return node:GetItemNode()
    end

    /*
    This action returns the bounding box contained in the tree node with the
    given ID. Note that this bounding box is slightly larger than the bounding
    box of the item contained in this node
    */
    action GetBoundingBox(integer nodeID) returns BoundingBox
        if 0 <= nodeID and nodeID < nodesCapacity
            return GetBoundingBox(nodes:Get(nodeID))
        end
        return undefined
    end
    
    /*
    This action returns the bounding box contained in the given tree node.
    Note that this bounding box is slightly larger than the bounding box
    of the item contained in this node.
    */
    action GetBoundingBox(DynamicBoundingVolumeTreeNode3D node) returns BoundingBox
        return node:GetBoundingBox()
    end

    action GetNodeCount returns integer
        return nodeCount
    end

    /*
    This action returns the number of nodes in the DynamicBoundingVolumeTree3D
    tree.
    */
    action CountNodes returns integer
        return CountNodes(root)
    end

    /*
    This action counts the number of nodes in the DynamicBoundingVolumeTree3D
    recursively.
    */
    action CountNodes(DynamicBoundingVolumeTreeNode3D node) returns integer
        if node:IsLeaf()
            return 1
        end

        return CountNodes(node:GetLeftChild()) + CountNodes(node:GetRightChild())
    end

    /*
    This action queries the tree for bounding boxes that overlap with the given
    bounding box and returns all leafs whose bounding boxes intersect the
    given bounding box in a list.

    Attribute: Parameter collisionList The array that stores the colliding pairs
    Attribute: Parameter queryID The ID of the node we are checking for overlap with
    Attribute: Parameter boundingBox The BoundingBox2D we are checking for overlap with
    */
    action Query(BroadphaseCollision3D broadphase, BoundingBox boundingBox)
        Stack<DynamicBoundingVolumeTreeNode3D> nodeStack
        nodeStack:Push(root)

        repeat while not nodeStack:IsEmpty()
            DynamicBoundingVolumeTreeNode3D node = nodeStack:Pop()
            if node not= undefined
                // does the node's bounding box intersect with the passed bounding
                // box?
                if node:GetBoundingBox():TestOverlap(boundingBox)
                    if node:IsLeaf()
                        boolean proceed = broadphase:ShouldProceed(node:GetID())
                        if not proceed
                            return now
                        end
                    else
                        // Otherwise, add the node's children to the stack so that we
                        // can check for overlap with them next
                       nodeStack:Add(node:GetLeftChild())
                       nodeStack:Add(node:GetRightChild())
                    end                    
                end
            end
        end
    end

    /*
    This action computes the height of the tree
    */
    action ComputeHeight returns integer
        return ComputeHeight(root)
    end

    /*
    This action recursively computes the height of the tree from the given
    node
    */
    private action ComputeHeight(DynamicBoundingVolumeTreeNode3D node) returns integer
        if node:IsLeaf()
            return 0
        end

        integer height1 = ComputeHeight(node:GetLeftChild())
        integer height2 = ComputeHeight(node:GetRightChild())

        integer maxHeight = height1
        if maxHeight < height2
            maxHeight = height2
        end

        return 1 + maxHeight  
    end

    action GetHeight returns integer
        if root = undefined
            return 0
        end

        return root:GetHeight()
    end

    /*
    This action computes the maximum balance of the tree. The maximum balance
    is the maximum difference of the heights of the two children of any node.
    */
    action GetMaximumBalance returns integer
        integer maxBalance = 0

        integer i = 0
        repeat while i < nodesCapacity
            DynamicBoundingVolumeTreeNode3D node = nodes:Get(i)
            if node:GetHeight() > 1
                DynamicBoundingVolumeTreeNode3D leftChild = node:GetLeftChild()
                DynamicBoundingVolumeTreeNode3D rightChild = node:GetRightChild()
                
                integer balance = math:AbsoluteValue(rightChild:GetHeight() - leftChild:GetHeight())
                if maxBalance < balance
                    maxBalance = balance
                end
            end
            i = i + 1
        end

        return maxBalance
    end

    /*
    This actoin computes the ratio of the sum of the node perimeters to the
    root perimeter.
    */
    action GetPerimeterRatio returns number
        if root = undefined
            return 0
        end

        DynamicBoundingVolumeTreeNode3D tempRoot = root
        number rootPerimeter = tempRoot:GetBoundingBox():GetPerimeter()
        
        number totalPerimeter = 0
        integer i = 0
        repeat while i < nodesCapacity
            DynamicBoundingVolumeTreeNode3D node = nodes:Get(i)
            if node:GetHeight() >= 0
                totalPerimeter = totalPerimeter + node:GetBoundingBox():GetPerimeter()
            end
            i = i + 1
        end

        return totalPerimeter / rootPerimeter
    end

    /*
    This action allocates a node for the tree.
    */
    private action AllocateNode returns DynamicBoundingVolumeTreeNode3D
        // check if we need to set up more nodes
        if freeList = NULL_NODE
            nodesCapacity = nodesCapacity * 2
            nodes:SetSize(nodesCapacity)
            integer i = nodesCapacity - 1
            repeat while i >= nodeCount
                DynamicBoundingVolumeTreeNode3D node
                node:SetID(i)
                nodes:Set(i, node)
                if i = nodesCapacity - 1
                    node:SetParent(undefined)
                else
                    node:SetParent(nodes:Get(i + 1))
                end
                node:SetHeight(-1)
                i = i - 1
            end
            freeList = nodeCount
        end
        integer nodeID = freeList
        DynamicBoundingVolumeTreeNode3D node = nodes:Get(nodeID)
        if node:GetParent() not= undefined
            freeList = node:GetParent():GetID()
        else
            freeList = NULL_NODE
        end

        node:SetParent(undefined)
        node:SetLeftChild(undefined)
        node:SetRightChild(undefined)
        node:SetHeight(0)
        node:SetItemNode(undefined)
        nodeCount = nodeCount + 1

        return node
    end

    /*
    This action frees a node from the tree for later re-use.
    */
    private action FreeNode(DynamicBoundingVolumeTreeNode3D node)
        if node not= undefined
            if 0 < nodeCount
                if freeList not= NULL_NODE
                    node:SetParent(nodes:Get(freeList))
                else
                    node:SetParent(undefined)
                end
                node:SetHeight(-1)
                freeList = node:GetID()
                nodeCount = nodeCount - 1
            end
        end
    end

    /*
    This action inserts the given node into the tree.

    The broad overview of the algorithm for insertion is as follows:
        Given a node N to insert into the tree
        Find a sibling S for N
        Insert N as a sibling of S by:
            Create a new parent node P
            Replace S in the tree with P
            Make S and N the children of P
            Follow a path from P to the root adjusing the bounding boxes
    */
    private action InsertLeaf(DynamicBoundingVolumeTreeNode3D leaf)
        if root = undefined
            // easy case: insert node at root
            root = leaf
            root:SetParent(undefined)
        else
            // if not easy case, then we need to find the "best" possible
            // sibling for the new node
            BoundingBox leafBoundingBox = leaf:GetBoundingBox()
            DynamicBoundingVolumeTreeNode3D temporary = root

            BoundingBox combinedBoundingBox

            boolean exitLoop = false
            // search down the tree starting at the root to find the best
            // sibling for the new node N
            repeat while temporary:GetLeftChild() not= undefined and not exitLoop
                DynamicBoundingVolumeTreeNode3D node = temporary
                DynamicBoundingVolumeTreeNode3D leftChild = node:GetLeftChild()
                DynamicBoundingVolumeTreeNode3D rightChild = node:GetRightChild()

                number perimeter = node:GetBoundingBox():GetPerimeter()

                // see how large the bounding box becoems if we extend the
                // current bounding box with the new node's bounding box
                combinedBoundingBox:Combine(node:GetBoundingBox(), leafBoundingBox)
                number combinedPerimeter = combinedBoundingBox:GetPerimeter()

                // the cost of inserting the node N here
                // defined as the sum over all of its children C of the
                // probability of having to do a bounding box intersection test
                // between N and C
                number cost = 2.0 * combinedPerimeter

                // Inheritence Cost: When we replace a node C with a new parent
                // node P and make N and C the children of P, we increase
                // the perimeter of S from its old perimeter to the combined
                // perimeter
                number inheritenceCost = 2.0 * (combinedPerimeter - perimeter)

                // calculate the cost of adding the node to the left child L
                // of C
                number cost1 = 0
                if leftChild:IsLeaf()
                    // if L is a leaf, then the total cost is the combined
                    // bounding box perimeter plus the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, leftChild:GetBoundingBox())
                    cost1 = combinedBoundingBox:GetPerimeter() + inheritenceCost
                else
                    // if L is not a leaf, then the cost is at least the
                    // difference between the new and old perimeters plus
                    // the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, leftChild:GetBoundingBox())
                    number oldPerimeter = leftChild:GetBoundingBox():GetPerimeter()
                    number newPerimeter = combinedBoundingBox:GetPerimeter()
                    cost1 = (newPerimeter - oldPerimeter) + inheritenceCost
                end

                // calculate the cost of adding the node to the right child R
                // of C 
                number cost2 = 0
                if rightChild:IsLeaf()
                    // if R is a leaf, then the total cost is the combined
                    // bounding box perimeter plus the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, rightChild:GetBoundingBox())
                    cost2 = combinedBoundingBox:GetPerimeter() + inheritenceCost
                else
                    // if R is not a leaf, then the cost is at least the
                    // difference between the new and old perimeters plus
                    // the inheritence cost
                    combinedBoundingBox:Combine(leafBoundingBox, rightChild:GetBoundingBox())
                    number oldPerimeter = rightChild:GetBoundingBox():GetPerimeter()
                    number newPerimeter = combinedBoundingBox:GetPerimeter()
                    cost2 = (newPerimeter - oldPerimeter) + inheritenceCost
                end

                if cost < cost1 and cost < cost2
                    // if the cost is less than the cost of inserting the node
                    // into either of the children of C, then C is the best
                    // sibling for N, so we can exit the loop
                    exitLoop = true
                elseif cost1 < cost2
                    // if the cost of inserting it into the left is less than
                    // the cost to insert into the right, continue down the
                    // left child
                    temporary = leftChild
                else
                    // otherwise continue down the right child
                    temporary = rightChild
                end
            end
            
            // create a new parent node P and make N and S the children of P
            DynamicBoundingVolumeTreeNode3D sibling = temporary
            DynamicBoundingVolumeTreeNode3D oldParent = nodes:Get(sibling:GetID()):GetParent()
            DynamicBoundingVolumeTreeNode3D newParent = AllocateNode()
            newParent:SetParent(oldParent)
            newParent:SetItemNode(undefined)
            newParent:GetBoundingBox():Combine(leafBoundingBox, sibling:GetBoundingBox())
            newParent:SetHeight(sibling:GetHeight() + 1)

            if oldParent not= undefined
                // the old parent of S was not the root
                if oldParent:GetLeftChild() = sibling
                    // the new parent should be the left child of the old parent
                    oldParent:SetLeftChild(newParent)
                else
                    // the new parent should be the right child of the old parent
                    oldParent:SetRightChild(newParent)
                end

                newParent:SetLeftChild(sibling)
                newParent:SetRightChild(leaf)
                sibling:SetParent(newParent)
                leaf:SetParent(newParent)
            else
                // the old parent was the root - new parent becomes the root
                newParent:SetLeftChild(sibling)
                newParent:SetRightChild(leaf)
                sibling:SetParent(newParent)
                leaf:SetParent(newParent)
                root = newParent
            end

            // walk back up the tree to the root, adjusting the bounding
            // boxes as we go up the tree
            temporary = leaf:GetParent()
            repeat while temporary not= undefined
                temporary = Balance(temporary)

                DynamicBoundingVolumeTreeNode3D leftChild = temporary:GetLeftChild()
                DynamicBoundingVolumeTreeNode3D rightChild = temporary:GetRightChild()

                integer maxHeight = leftChild:GetHeight()
                if maxHeight < rightChild:GetHeight()
                    maxHeight = rightChild:GetHeight()
                end

                temporary:SetHeight(1 + maxHeight)
                temporary:GetBoundingBox():Combine(leftChild:GetBoundingBox(), rightChild:GetBoundingBox())

                temporary = temporary:GetParent()
            end
        end
    end

    /*
    This action removes the given leaf from the tree
    */
    private action RemoveLeaf(DynamicBoundingVolumeTreeNode3D node)
        if node = root
            root = undefined
            return now
        end

        DynamicBoundingVolumeTreeNode3D nodeParent = node:GetParent()
        DynamicBoundingVolumeTreeNode3D grandParent = nodeParent:GetParent()
        DynamicBoundingVolumeTreeNode3D sibling = undefined
        
        if nodeParent:GetLeftChild() = node
            sibling = nodeParent:GetRightChild()
        else
            sibling = nodeParent:GetLeftChild()
        end

        if grandParent not= undefined
            if grandParent:GetLeftChild() = nodeParent
                grandParent:SetLeftChild(sibling)
            else
                grandParent:SetRightChild(sibling)
            end

            sibling:SetParent(grandParent)
            FreeNode(nodeParent)

            DynamicBoundingVolumeTreeNode3D temporary = grandParent
            repeat while temporary not= undefined
                temporary = Balance(temporary)

                DynamicBoundingVolumeTreeNode3D leftChild = temporary:GetLeftChild()
                DynamicBoundingVolumeTreeNode3D rightChild = temporary:GetRightChild()

                temporary:GetBoundingBox():Combine(leftChild:GetBoundingBox(), rightChild:GetBoundingBox())

                integer maxHeight = leftChild:GetHeight()

                if maxHeight < rightChild:GetHeight()
                    maxHeight = rightChild:GetHeight()
                end
                
                temporary:SetHeight(1 + maxHeight)

                temporary = temporary:GetParent()
            end
        else
            root = sibling
            sibling:SetParent(undefined)
            FreeNode(nodeParent)
        end
    end

    /*
    This action balances the tree and returns the new root of the tree
    */
    private action Balance(DynamicBoundingVolumeTreeNode3D node) returns DynamicBoundingVolumeTreeNode3D
        DynamicBoundingVolumeTreeNode3D A = node
        if A:GetLeftChild() = undefined or A:GetHeight() < 2
            return node
        end

        DynamicBoundingVolumeTreeNode3D iB = A:GetLeftChild()
        DynamicBoundingVolumeTreeNode3D iC = A:GetRightChild()
        DynamicBoundingVolumeTreeNode3D B = iB
        DynamicBoundingVolumeTreeNode3D C = iC

        integer balance = C:GetHeight() - B:GetHeight()
        
        if balance > 1
            DynamicBoundingVolumeTreeNode3D iF = C:GetLeftChild()
            DynamicBoundingVolumeTreeNode3D iG = C:GetRightChild()
            DynamicBoundingVolumeTreeNode3D F = iF
            DynamicBoundingVolumeTreeNode3D G = iG

            C:SetLeftChild(node)
            C:SetParent(A:GetParent())
            A:SetParent(iC)

            if C:GetParent() not= undefined
                if C:GetParent():GetLeftChild() = node
                    C:GetParent():SetLeftChild(iC)
                else
                    C:GetParent():SetRightChild(iC)
                end
            else
                root = iC
            end
            
            if F:GetHeight() > G:GetHeight()
                C:SetRightChild(iF)
                A:SetRightChild(iG)
                G:SetParent(node)

                A:GetBoundingBox():Combine(B:GetBoundingBox(), G:GetBoundingBox())
                C:GetBoundingBox():Combine(A:GetBoundingBox(), F:GetBoundingBox())

                integer maxHeight = B:GetHeight()
                if maxHeight < G:GetHeight()
                    maxHeight = G:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < F:GetHeight()
                    maxHeight = F:GetHeight()
                end
                C:SetHeight(1 + maxHeight)
            else
                C:SetRightChild(iG)
                A:SetRightChild(iF)
                F:SetParent(node)

                A:GetBoundingBox():Combine(B:GetBoundingBox(), F:GetBoundingBox())
                C:GetBoundingBox():Combine(A:GetBoundingBox(), G:GetBoundingBox())

                integer maxHeight = B:GetHeight()
                if maxHeight < F:GetHeight()
                    maxHeight = F:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < G:GetHeight()
                    maxHeight = G:GetHeight()
                end
                C:SetHeight(1 + maxHeight)
            end

            return iC
        end

        if balance < -1
            DynamicBoundingVolumeTreeNode3D iD = B:GetLeftChild()
            DynamicBoundingVolumeTreeNode3D iE = B:GetRightChild()
            DynamicBoundingVolumeTreeNode3D D = iD
            DynamicBoundingVolumeTreeNode3D E = iE

            B:SetLeftChild(node)
            B:SetParent(A:GetParent())
            A:SetParent(iB)

            if B:GetParent() not= undefined
                if B:GetParent():GetLeftChild() = node
                    B:GetParent():SetLeftChild(iB)
                else
                    B:GetParent():SetRightChild(iB)
                end
            else
                root = iB
            end

            if D:GetHeight() > E:GetHeight()
                B:SetRightChild(iD)
                A:SetLeftChild(iE)
                E:SetParent(node)

                A:GetBoundingBox():Combine(C:GetBoundingBox(), E:GetBoundingBox())
                B:GetBoundingBox():Combine(A:GetBoundingBox(), D:GetBoundingBox())

                integer maxHeight = C:GetHeight()
                if maxHeight < E:GetHeight()
                    maxHeight = E:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < D:GetHeight()
                    maxHeight = D:GetHeight()
                end
                B:SetHeight(1 + maxHeight)
            else
                B:SetRightChild(iE)
                A:SetLeftChild(iD)
                D:SetParent(node)

                A:GetBoundingBox():Combine(C:GetBoundingBox(), D:GetBoundingBox())
                B:GetBoundingBox():Combine(A:GetBoundingBox(), E:GetBoundingBox())

                integer maxHeight = C:GetHeight()
                if maxHeight < D:GetHeight()
                    maxHeight = D:GetHeight()
                end
                A:SetHeight(1 + maxHeight)

                maxHeight = A:GetHeight()
                if maxHeight < E:GetHeight()
                    maxHeight = E:GetHeight()
                end
                B:SetHeight(1 + maxHeight)
            end

            return iB
        end

        return node
    end
end