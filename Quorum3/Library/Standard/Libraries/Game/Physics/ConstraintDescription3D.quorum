package Libraries.Game.Physics

use Libraries.Compute.Vector3
use Libraries.Compute.Matrix3

/*
This class stores different constraint values that allows us to describe a joint constraint.
*/
class ConstraintDescription3D 
    Vector3 linearJointAxis //this class can be seen as Jacobian matrix breaking into vectors
    Vector3 aJ
    Vector3 bJ
    Vector3 minvJt0
    Vector3 minvJt1
    number diag = 0
    boolean isLinearConstraint = false
    /*
    relativePosition1: relative position of constraint coordinate system center in world coordinates
    relativePosition2: relative position of constraint coordinate system center in world coordinates
    This action intializeds the description such that this ConstraintDescription3D is used for
    the constraint between two different rigid bodies.
    */
    action Initialize(Matrix3 world2A, Matrix3 world2B, Vector3 relativePosition1, 
                      Vector3 relativePosition2, Vector3 jointAxis, Vector3 inertiaInverseA,
                      number massInverseA, Vector3 inertiaInverseB, number massInverseB)
        

        linearJointAxis:Set(jointAxis)
//        output "linear joint axis initialized to: mat"
//        linearJointAxis:Output()
//        isLinearConstraint = true

        aJ:Set(relativePosition1)
        aJ:CrossProduct(linearJointAxis)
        world2A:Transform(aJ)
         
        bJ:Set(linearJointAxis)
        bJ:Scale(-1)
        Vector3 temp
        temp:Set(relativePosition2):CrossProduct(bJ)
        bJ:Set(temp)
        world2B:Transform(bJ)

        minvJt0:SetX(inertiaInverseA:GetX() * aJ:GetX())
        minvJt0:SetY(inertiaInverseA:GetY() * aJ:GetY())
        minvJt0:SetZ(inertiaInverseA:GetZ() * aJ:GetZ())
        minvJt1:SetX(inertiaInverseB:GetX() * bJ:GetX())
        minvJt1:SetY(inertiaInverseB:GetY() * bJ:GetY())
        minvJt1:SetZ(inertiaInverseB:GetZ() * bJ:GetZ())
        diag = massInverseA + minvJt0:DotProduct(aJ) + massInverseB + minvJt1:DotProduct(bJ)
    end

    /*
    This action initializes this ConstraintDescription3D such that this class is
    used to store the angular constraint between two rigid bodies.
    */
    action Initialize(Vector3 jointAxis, Matrix3 world2A, Matrix3 world2B, Vector3 inertiaInverseA, Vector3 inertiaInverseB)
        

        linearJointAxis:Set(0, 0, 0)
        

//        output "linear joint axis initialized to: for angular constraints"
//        linearJointAxis:Output()


        aJ:Set(jointAxis)
        world2A:Transform(aJ)

        bJ:Set(jointAxis)
        bJ:Scale(-1)
        world2B:Transform(bJ)

        minvJt0:SetX(inertiaInverseA:GetX() * aJ:GetX())
        minvJt0:SetY(inertiaInverseA:GetY() * aJ:GetY())
        minvJt0:SetZ(inertiaInverseA:GetZ() * aJ:GetZ())
        minvJt1:SetX(inertiaInverseB:GetX() * bJ:GetX())
        minvJt1:SetY(inertiaInverseB:GetY() * bJ:GetY())
        minvJt1:SetZ(inertiaInverseB:GetZ() * bJ:GetZ())
        diag = minvJt0:DotProduct(aJ) + minvJt1:DotProduct(bJ)
    end

    /*
    This action initializes this ConstraintDescription3D such that this class is
    used to store the angular constraint between two rigid bodies.
    */
    action Initialize(Vector3 axisInA, Vector3 axisInB, Vector3 inertiaInverseA, Vector3 inertiaInverseB)
        linearJointAxis:Set(0, 0, 0)

//        output "linear joint axis initialized to: for angular constraints"
//        linearJointAxis:Output()
        aJ:Set(axisInA)

        bJ:Set(axisInB)
        bJ:Scale(-1)

        minvJt0:SetX(inertiaInverseA:GetX() * aJ:GetX())
        minvJt0:SetY(inertiaInverseA:GetY() * aJ:GetY())
        minvJt0:SetZ(inertiaInverseA:GetZ() * aJ:GetZ())
        minvJt1:SetX(inertiaInverseB:GetX() * bJ:GetX())
        minvJt1:SetY(inertiaInverseB:GetY() * bJ:GetY())
        minvJt1:SetZ(inertiaInverseB:GetZ() * bJ:GetZ())
        diag = minvJt0:DotProduct(aJ) + minvJt1:DotProduct(bJ)
    end


/*
    
    This action initializes this ConstraintDescription3D such that this class is
    used to store one constraitn on one rigid body.
    
    action Initialize(Matrix3 world2A, Vector3 relativePosition1, Vector3 relativePosition2,
                      Vector3 jointAxis, Vector3 inertiaInverseA, number massInverseA)
        linearJointAxis:Set(jointAxis)

        aJ:Set(relativePosition1):CrossProduct(jointAxis)
        world2A:Transform(aJ)

        bJ:Set(jointAxis)
        bJ:Scale(-1)
        Vector3 temp
        temp:Set(relativePosition2):CrossProduct(bJ)
        bJ:Set(temp)
        world2A:Transform(bJ)

        minvJt0:SetX(inertiaInverseA:GetX() * aJ:GetX())
        minvJt0:SetY(inertiaInverseA:GetY() * aJ:GetY())
        minvJt0:SetZ(inertiaInverseA:GetZ() * aJ:GetZ())     
        minvJt1:Set(0, 0, 0)
        diag = massInverseA + minvJt0:DotProduct(aJ)
    end
*/


    action GetLinearJointAxis returns Vector3
//        output "getting linear joint axis GetLinearJointAxis"
//        linearJointAxis:Output()
//        output isLinearConstraint


        return linearJointAxis
    end

    /*
    This action returns a number whose reciprocal will be used to scale the 
    impulse change applied to linear velocity.
    */
    action GetDiagonal returns number
//        output "linear joint axis GetDiagonal"
//        linearJointAxis:Output()
//        output isLinearConstraint
        return diag
    end

    /*
    This action returns a number whose reciprocal will be used to scale the 
    impulse change applied to angular velocity if this ConstraintDescription3D
    describes 2 constraints on the same rigid body.
    */
    action GetNonDiagonal(ConstraintDescription3D descriptionB, number massInverseA) returns number
//        output "linear joint axis GetNonDiagonal"
//        linearJointAxis:Output()
//        output isLinearConstraint
        ConstraintDescription3D jacA = me
        number lin = massInverseA * jacA:linearJointAxis:DotProduct(descriptionB:linearJointAxis)
        number ang = jacA:minvJt0:DotProduct(descriptionB:aJ)
        return lin + ang
    end

    /*
    This action returns a number whose reciprocal will be used to scale the 
    impulse change applied to angular velocity if this ConstraintDescription3D
    describes 2 constraints shared by two different rigid bodies.
    */
    action GetNonDiagonal(ConstraintDescription3D descriptionB, number massInverseA, number massInverseB) returns number
        
//                output "linear joint axis GetNonDiagonal"
//        linearJointAxis:Output()
//        output isLinearConstraint


        ConstraintDescription3D jacA = me

        Vector3 lin
        lin:SetX(jacA:linearJointAxis:GetX() * descriptionB:linearJointAxis:GetX())
        lin:SetY(jacA:linearJointAxis:GetY() * descriptionB:linearJointAxis:GetY())
        lin:SetZ(jacA:linearJointAxis:GetZ() * descriptionB:linearJointAxis:GetZ())

        Vector3 ang0
        ang0:SetX(jacA:minvJt0:GetX() * descriptionB:aJ:GetX())
        ang0:SetY(jacA:minvJt0:GetY() * descriptionB:aJ:GetY())
        ang0:SetZ(jacA:minvJt0:GetZ() * descriptionB:aJ:GetZ())

        Vector3 ang1
        ang1:SetX(jacA:minvJt1:GetX() * descriptionB:bJ:GetX())
        ang1:SetY(jacA:minvJt1:GetY() * descriptionB:bJ:GetY())
        ang1:SetZ(jacA:minvJt1:GetZ() * descriptionB:bJ:GetZ())

        Vector3 lin0
        lin0:Set(lin):Scale(massInverseA)

        Vector3 lin1
        lin1:Set(lin):Scale(massInverseB)

        Vector3 sum
        sum:Set(ang0):Add(ang1):Add(lin0):Add(lin1)

        return sum:GetX() + sum:GetY() + sum:GetZ()        
    end

    /*
    This action returns the relative velocities between two 3D objects whose constraints
    are stored inside this ConstraintDescription3D.
    */
    action GetRelativeVelocity(Vector3 linearVelocityA, Vector3 angularVelocityA, Vector3 linearVelocityB, Vector3 angularVelocityB) returns number
        
//        output "linear joint axis GetRelativeVelocity"
//        linearJointAxis:Output()
//        output isLinearConstraint

        Vector3 linrel
        linrel:Set(linearVelocityA):Subtract(linearVelocityB)

        Vector3 angvela
        angvela:SetX(angularVelocityA:GetX() * aJ:GetX())
        angvela:SetY(angularVelocityA:GetY() * aJ:GetY())
        angvela:SetZ(angularVelocityA:GetZ() * aJ:GetZ())

        Vector3 angvelb
        angvelb:SetX(angularVelocityB:GetX() * bJ:GetX())
        angvelb:SetY(angularVelocityB:GetY() * bJ:GetY())
        angvelb:SetZ(angularVelocityB:GetZ() * bJ:GetZ())

        linrel:SetX(linrel:GetX() * linearJointAxis:GetX())
        linrel:SetY(linrel:GetY() * linearJointAxis:GetY())
        linrel:SetZ(linrel:GetZ() * linearJointAxis:GetZ())

        angvela:Add(angvelb)
        angvela:Add(linrel)

        number rel_vel2 = angvela:GetX() + angvela:GetY() + angvela:GetZ()
        return rel_vel2 + 0.000000119209290
    end
end