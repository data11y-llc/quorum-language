package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D
use Libraries.Compute.Math  
use Libraries.Compute.Vector3   

/*
This class stores information of how to control a joint via a motor.
*/
class RotationalLimitMotor3D

    Math math
    number loLimit = -(math:RaiseToPower(2, 10))   //joint limit
    number hiLimit = math:RaiseToPower(2, 10)     //joint limit
    number targetVelocity = 0                       //target motor velocity
    number maxMotorForce = 0.1                      //maximum force on motor
    number maxLimitForce = 300                      //maximum force on limit
    number damping = 1
    number limitSoftness = 0.5
    number ERP = 0.5//Error tolerance factor when joint is at limit
    number bounce = 0           //restitution factor
    boolean enableMotor = false
    number currentLimitError = 0        //how much is violated at a certain limit
    integer currentLimit = 0            //0 = free, 1 = at low limit, 2 = at high limit
    number accumulatedImpulse = 0

    /*
    This action sets the values of this RotationalLimitMotor3D using another RotationalLimitMotor3D.
    Attribute: Parameter other The other RotationalLimitMotor3D.
    */
    action Set(RotationalLimitMotor3D other) 
        targetVelocity = other:GetTargetVelocity()
        maxMotorForce = other:GetMaxMotorForce()
        limitSoftness = other:GetLimitSoftness()
        loLimit = other:GetLoLimit()
        hiLimit = other:GetHiLimit()
        ERP = other:GetERP()
        bounce = other:GetBounce()
        currentLimit = other:GetCurrentLimit()
        currentLimitError = other:GetCurrentLimitError()
        enableMotor = other:GetEnableMotor()
    end    
   
    /*
    This action lets you know if you have set a limit or not.
    Attribute: Returns 0 if you have not set a limit, 1 if you have set a limit.
    */
    action IsLimited() returns boolean
    	if loLimit >= hiLimit  
            return false
        end
        return true
    end

    /*
    This action lets you know if you need to apply torque to any of the objects associated with this RotationalLimitMotor3D because either the error in calculation is not 0 or motor is enabled.
    Attribute: Returns 0 if this motor is not enabled so there will be no torque from this motor, 1 when there will be torque from this motor.
    */
    action NeedApplyTorques() returns boolean
    	if (currentLimit = 0) and (enableMotor = false)
            return false
        end    
    	return true
    end

    /*
    This action lets you know if a testValue that you passed in is within the limits of this RotationalLimitMotor3D.
    Attribute: Parameter testValue The test value that you want to see if its within limit.
    Attribute: Returns 0 if the limits aren't set in the first place or test value is within limit, 1 if test value is lower than the lowest limit, 2 if the test value is higher than the highest limit.
    */
    action TestLimitValue(number testValue) returns integer
	if loLimit > hiLimit
            currentLimit = 0    //no violation
            return 0
	end
	if testValue < loLimit
            currentLimit = 1    //lower limit has violation
            currentLimitError = testValue - loLimit

            return 1
	elseif testValue > hiLimit
            currentLimit = 2    //higher limit has violation
            currentLimitError = testValue - hiLimit

            return 2
	end
	currentLimit = 0    //there is no violation
	return 0
    end
    
    /*
    This action makes sure that the angular limits of the motors are met.
    Attribute: Returns the impulse that should be applied.
    */
    action SolveAngularLimits(number timeStep, Vector3 axis, number jacDiagABInv, Item3D body0, Item3D body1)  returns number
        if NeedApplyTorques() = false
            return 0
	end

	number localTargetVelocity = targetVelocity
	number localMaxMotorForce = maxMotorForce

	// current error correction
	if currentLimit not= 0
            localTargetVelocity = -ERP * currentLimitError / (timeStep)
            localMaxMotorForce = maxLimitForce
	end

	localMaxMotorForce = localMaxMotorForce * timeStep

	// current velocity difference
	Vector3 velDiff
        velDiff:Set(body0:GetAngularVelocity())
	if body1 not= undefined
            velDiff:Subtract(body1:GetAngularVelocity())            //velDiff = body0:GetAngularVelocity() - body1:GetAngularVelocity()
	end
	number relVel = axis:DotProduct(velDiff)

	// correction velocity
	number motorRelvel = limitSoftness * (localTargetVelocity - damping * relVel)

	if (motorRelvel < (1.19209290 * math:RaiseToPower(10, -7))) and (motorRelvel > (-1.19209290 * math:RaiseToPower(10, -7)))
            return 0
	end

	number unclippedMotorImpulse = (1 + bounce) * motorRelvel * jacDiagABInv

        // clip correction impulse
	number clippedMotorImpulse = 0


	if unclippedMotorImpulse > 0
            if unclippedMotorImpulse > maxMotorForce
                clippedMotorImpulse = maxMotorForce 
            else
                clippedMotorImpulse = unclippedMotorImpulse
            end
	else 
            if unclippedMotorImpulse < -maxMotorForce
                clippedMotorImpulse = -maxMotorForce 
            else
                clippedMotorImpulse = unclippedMotorImpulse
            end
	end

	// sort with accumulated impulses
	number lo = -(math:RaiseToPower(10, 30))
	number hi = math:RaiseToPower(10, 30)

	number oldaccumImpulse = accumulatedImpulse
	number sum = oldaccumImpulse + clippedMotorImpulse


        if sum > hi
            accumulatedImpulse = 0
        elseif sum < lo
            accumulatedImpulse = 0
        else
            accumulatedImpulse = sum
        end

	clippedMotorImpulse = accumulatedImpulse - oldaccumImpulse

	Vector3 motorImp
	motorImp:Set(axis)
        motorImp:Scale(clippedMotorImpulse)

	body0:ApplyAngularImpulse(motorImp)     //applyTorqueImpulse
	if body1 not= undefined
            motorImp:MakeOpposite()
            body1:ApplyAngularImpulse(motorImp)
	end

	return clippedMotorImpulse
    end  

    /*
    This action sets the amount of impulse that you have applied so far.
    Attribute: Parameter x The amount of impulse that you have applied so far.
    */
    action SetAccumulatedImpulse(number x)
        accumulatedImpulse = x
    end 
    
    /*
    This action returns the velocity that you want the motor to go.
    Attribute: Returns the velocity that you want the motor to go.
    */
    action GetTargetVelocity() returns number
        return targetVelocity
    end
    
    /*
    This action returns what is the maximum force that this motor will exhibit on an object attached to this motor.
    Attribute: Returns the maximum force that this motor will exhibit on an object.
    */
    action GetMaxMotorForce() returns number
        return maxMotorForce
    end
    
    /*
    This action returns a number that tells you how quick you would like to correct your motor's speed if there is a speed change.
    When this number gets closer to 1 that means you would want the motor's speed to go as quickly as possible to the desired speed.
    When this number gets closer to 0 that means you will ignore the motor's speed error.
    Attribute: Returns how quick you would like to correct your motor's speed if there is a speed change.
    */
    action GetLimitSoftness() returns number
        return limitSoftness
    end

    /*
    This action returns the lowest angle that this motor can rotate to. 
    Attribute: Returns the lowest angle that this motor can rotate to. 
    */
    action GetLoLimit() returns number
        return loLimit
    end

    /*
    This action sets the lowest angle that this motor can rotate to.
    Attribute: Parameter limit The lowest angle that this motor can rotate to. 
    */
    action SetLoLimit(number limit) 
        loLimit = limit
    end
    
    /*
    This action returns the highest angle that this motor can rotate to.
    Attribute: Returns the highest angle that this motor can rotate to.
    */
    action GetHiLimit() returns number
        return hiLimit
    end

    /*
    This action sets the highest angle that this motor can rotate to.
    Attribute: Parameter limit The highest angle that this motor can rotate to.
    */
    action SetHiLimit(number limit) 
        hiLimit = limit
    end
    
    /*
    This action returns the error tolerance factor when joint is at its angular limit. When this ERP gets closer to 1, that means you will not allow the motor
    to have any angle that is outside the limit range. When this ERP gets closer to 0 that means you will ignore all of the errors.
    Attribute: Returns the error tolerance factor when joint is at its angular limit.
     */
    action GetERP() returns number
        return ERP
    end

    /*
    This action returns a number that tells you how quick the motor will stop oscillating once that motor has reached its desired position.
    Having a higher number means there will be more oscillation.    
    Attribute: Returns how quick the motor will stop oscillating.
    */
    action GetBounce() returns number
        return bounce
    end
    
    /*
    This action returns the state of the motor's angle right now. 0 means that the motor's angle is in range or that there 
    wasn't a limit set in the first place. 1 means that the motor's angle is lower than its lowest limit. 2 means that 
    the motor's angle is higher than its highest limit.
    Attribute: Returns the state of the motor's angle.
    */
    action GetCurrentLimit() returns integer
        return currentLimit
    end

    /*
    This action tells you how much over or under the current angle that the motor is in right now to the correct range
    of the motor's angles.
    Attribute: Returns how much over or under the current angle that the motor is in right now to the correct range.
    */
    action GetCurrentLimitError() returns number
        return currentLimitError
    end

    /*
    This action tells you whether the motor is allowed to turn or not.
    Attribute: Returns 0 if motor won't turn, 1 if the motor will turn.
    */
    action GetEnableMotor() returns boolean
        return enableMotor
    end
end

