package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D
use Libraries.Containers.Array
use Libraries.Compute.Math  
use Libraries.Compute.Vector3 

/*
This class stores information of how much a 3D joint (so that the body can slide along an axis and also rotate around this axis) can slide and rotate.
*/ 
class TranslationalLimitMotor3D

    Math math
    Vector3 lowerLimit //lower limit <x,y,z>
    Vector3 upperLimit //upper limit <x,y,z>
    Vector3 accumulatedImpulse
	

    //set constants to default values
    number limitSoftness = 0.7
    number damping = 1.0
    number restitution = 0.5

 
    on create
        lowerLimit:Set(0,0,0)
        upperLimit:Set(0,0,0)
        accumulatedImpulse:Set(0,0,0)
    end 
    
    /*
    This action sets the values inside this TranslationalLimitMotor3D using another TranslationalLimitMotor3D.
    Attribute: Parameter other The other TranslationalLimitMotor3D.
    */
    action Set(TranslationalLimitMotor3D other) 
	lowerLimit:Set(other:GetLowerLimit())
	upperLimit:Set(other:GetUpperLimit())
	accumulatedImpulse:Set(other:GetAccumulatedImpulse())

	limitSoftness = other:GetLimitSoftness()
	damping = other:GetDamping()
	restitution = other:GetRestitution()
    end    

    /*
    This action lets you know if any of the sliding has been limited. When upper limit < lower limit: the axis is free; when upper limit = lower limit: the axis is fixed; when upper limit > lower limit: the axis is limited between lower and upper limits.
    Attribute: Parameter limitIndex The indicator of which axis you want to check, 0 for x, 1 for y, and 2 for z.
    Attrubute: Returns 0 there is no limit, 1 the axis that you are checking has a limit set.
    */
    action IsLimited(integer limitIndex) returns boolean
        if limitIndex = 0
            return upperLimit:GetX() >= lowerLimit:GetX()
        elseif limitIndex = 1
            return upperLimit:GetY() >= lowerLimit:GetY()
        elseif limitIndex = 2
            return upperLimit:GetZ() >= lowerLimit:GetZ()    
	end
        return false
    end   

    /*
    This action makes sure that the bodies joined together by this TranslationalLimitMotor is at where they are supposed to be based on their translational limits.
    Attribute: Returns the velocity that you want to add to the current velocity to make sure that the slider is within the position range that we want it to be.
    */
    action SolveLinearAxis(number timeStep, number jacDiagABInv, Item3D body1, Vector3 pointInA, Item3D body2, Vector3 pointInB, integer limitIndex, Vector3 axisNormalOnA, Vector3 anchorPos) returns number
	Vector3 tmp
	Vector3 tmpVec
		
	Vector3 relativePosition1
        relativePosition1:Set(anchorPos)       //anchor position relative to body A
	relativePosition1:Subtract(body1:GetCenterOfMassPosition()) //COM_A to the anchor position

	Vector3 relativePosition2
        relativePosition2:Set(anchorPos)
	relativePosition2:Subtract(body2:GetCenterOfMassPosition()) //COM_B to the anchor position

	Vector3 velocity1         
	Vector3 velocity2        
	Vector3 velocity

        velocity1:Set(body1:GetLinearVelocityAtLocalPoint(relativePosition1))
        velocity2:Set(body2:GetLinearVelocityAtLocalPoint(relativePosition2))
	velocity:Set(velocity1)
        velocity:Subtract(velocity2)

	number relativeVelocity = axisNormalOnA:DotProduct(velocity)


        // positional error (zeroth order error)
        tmp:Set(pointInA)
        tmp:Subtract(pointInB)

        number depth = -(tmp:DotProduct(axisNormalOnA))


	number lo = -(math:RaiseToPower(10, 30))
	number hi = math:RaiseToPower(10, 30)


        
        number minLimit = 0
        number maxLimit = 0



        if limitIndex = 0
            minLimit = lowerLimit:GetX()
            maxLimit = upperLimit:GetX()
        elseif limitIndex = 1
            minLimit = lowerLimit:GetY()
            maxLimit = upperLimit:GetY()
        elseif limitIndex = 2
            minLimit = lowerLimit:GetZ()
            maxLimit = upperLimit:GetZ()  
        end



        if (minLimit < maxLimit)
            if (depth > maxLimit)
                depth = depth - maxLimit
                lo = 0
            else
                if (depth < minLimit)
                    depth = depth - minLimit
                    hi = 0
                else
                    return 0   //there is no error
                end
            end
        end



        number normalImpulse = limitSoftness * (restitution * depth / timeStep - damping * relativeVelocity) * jacDiagABInv
        
        number oldNormalImpulse = 0

        if limitIndex = 0
            oldNormalImpulse = accumulatedImpulse:GetX()
        elseif limitIndex = 1
            oldNormalImpulse = accumulatedImpulse:GetY()
        elseif limitIndex = 2
            oldNormalImpulse = accumulatedImpulse:GetZ()
        end

        number sum = oldNormalImpulse + normalImpulse

        number valueToSet = 0
        if (sum > hi)
            valueToSet = 0
        elseif (sum < lo)
            valueToSet = 0
        else
            valueToSet = sum
        end

        if limitIndex = 0
            accumulatedImpulse:SetX(valueToSet)
        elseif limitIndex = 1
            accumulatedImpulse:SetY(valueToSet)
        elseif limitIndex = 2
            accumulatedImpulse:SetZ(valueToSet)
        end

        normalImpulse = valueToSet - oldNormalImpulse       //the new normal impulse

        Vector3 impulseVector
        impulseVector:Set(axisNormalOnA)
        impulseVector:Scale(normalImpulse)

        body1:ApplyLinearImpulse(impulseVector, relativePosition1)
	tmp:Set(impulseVector)
        tmp:MakeOpposite()


	body2:ApplyLinearImpulse(tmp, relativePosition2)
	return normalImpulse
    end 
    
    /*
    This action sets the total amount of impulse that is applied to the objects to make sure that this joint stays intact. 
    Attribute: Parameter x The x direction of impulse.
    Attribute: Parameter y The y direction of impulse.
    Attribute: Parameter z The z direction of impulse.
    */
    action SetAccumulatedImpulse(number x, number y, number z)
        accumulatedImpulse:Set(x, y, z)
    end

    /*
    This action returns the minimum position that the sliding object can be at.
    Attribute: Returns the minimum position that the sliding object can be at.
    */
    action GetLowerLimit() returns Vector3
        return lowerLimit
    end

    /*
    This action sets the minimum position that the sliding object can be at.
    Attribute: Parameter limit The minimum position that the sliding object can be at.
    */
    action SetLowerLimit(Vector3 limit)
        lowerLimit:Set(limit)
    end
    
    /*
    This action returns the maximum position that the sliding object can be at.
    Attribute: Returns the maximum position that the sliding object can be at.
    */
    action GetUpperLimit() returns Vector3
        return upperLimit
    end

    /*
    This action sets the maximum position that the sliding object can be at.
    Attribute: Parameter limit The maximum position that the sliding object can be at.
    */
    action SetUpperLimit(Vector3 limit)
        upperLimit:Set(limit)
    end

    /*
    This action returns how much impulse has been applied to the object because of this joint.
    Attribute: Returns how much impulse has been applied to the object because of this joint.
    */
    action GetAccumulatedImpulse() returns Vector3
        return accumulatedImpulse
    end

    /*
    This action returns how much you care about if the slider goes out of the range of the position limit.
    A number that is closer to 1 means that you really don't want the slider to go out of the range.
    A number that is closer to 0 means that you don't care if the slider goes out of the position limit.
    Attribute: Returns the limit softness value.
    */
    action GetLimitSoftness() returns number
        return limitSoftness
    end

    /*
    This action returns how fast you want the slider to stop oscillating when the slider is trying to reach the target position.
    A number that is closer to 1 means that you don't want the slider to ever oscillate.
    A number that is closer to 0 means that you are allowing the slider to oscillate forever in the extreme case.
    Attribute: Returns the damping value.
    */
    action GetDamping() returns number
        return damping
    end

    /*
    This action returns a number that tells you how fast you would want the slider to correct its velocity.
    0 means that you will ignore the velocity error between the slider and our desired velocity for the slider to go, 1 means that 
    you want to correct the velocity right away.
    Attribute: Returns how fast you would want the slider to correct its velocity.
    */
    action GetRestitution() returns number
        return restitution
    end
end

