package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D

/*
This class has all of the possible joint types and blueprint actions for all 3D joints (also known as typed constraints).
*/
class Joint3D
    public constant integer BallAndSocket = 0
    public constant integer Hinge = 1
    public constant integer Customizable = 2
    public constant integer Slider = 3
    public constant integer ConeTwist = 4


    integer type = 0
    Item3D itemA
    Item3D itemB
    number appliedImpulse = 0

    Joint3D previous = undefined
    Joint3D next = undefined
    JointEdge3D edgeA
    JointEdge3D edgeB

    boolean inCollisionGroup = false

    /*
    This action returns whether this joint is been accounted for in a collision group.
    Attribute: Returns true when the joint has already been assigned to a collision group, false if the joint is not
    */
    action InCollisionGroup returns boolean
        return inCollisionGroup
    end

    /*
    This action sets whether this joint is been accounted for in a collision group.
    Attribute: Parameter flag True if the joint has been assigned to a collision group.
    */
    action SetInCollisionGroup(boolean flag)
        me:inCollisionGroup = flag
    end

    /*
    This action sets the first 3D item that is joined by this Joint3D.
    Attribute: Parameter item The first 3D item that is joined by this Joint3D.
    */
    action SetItemA(Item3D item)
        me:itemA = item
    end

    /*
    This action returns the first 3D item that is joined by this Joint3D.
    Attribute: Returns the first 3D item that is joined by this Joint3D.
    */
    action GetItemA returns Item3D
        return itemA
    end

    /*
    This action sets the second 3D item that is joined by this Joint3D.
    Attribute: Parameter item The second 3D item that is joined by this Joint3D.
    */
    action SetItemB(Item3D item)
        me:itemB = item
    end

    /*
    This action returns the second 3D item that is joined by this Joint3D.
    Attribute: Returns the second 3D item that is joined by this Joint3D.
    */
    action GetItemB returns Item3D
        return itemB
    end

    /*
    This action sets the amount of impulse that should be applied to the items in the
    joints to allow them to continue to be joined.
    Attribute: Parameter impulse The amount of impulse that should be applied to the items
    */
    action SetAppliedImpulse(number impulse)
        me:appliedImpulse = impulse
    end

    /*
    This action sets the type of joint that you have. 
    BallAndSocket = 0, Hinge = 1, Customizable = 2, Slider = 3
    Attribute: Parameter type The type of joint that you have.
    */  
    action SetType(integer type)
        me:type = type
    end

    /*
    This action returns the type of joint that you have.
    Attribute: Returns the type of joint that you have.
    */
    action GetType returns integer
        return type
    end

    /*
    This action returns the amount of impulse that should be applied to the items in the
    joints to allow them to continue to be joined.
    Attribute: Returns the amount of impulse that should be applied to the items.
    */
    action GetAppliedImpulse returns number
        return appliedImpulse
    end

    blueprint action BuildJacobian

    action GetInformation(CollisionSolverInformation3D information)
    end

    blueprint action SolveJoint(number timeStep)

    /*
    This action gets you the previous information about a joint (stored in another Joint3D) inside a linked list of Joint3Ds.
    Attribute: Returns the previous joint.
    */
    action GetPrevious returns Joint3D
        return previous
    end

    /*
    This action lets you store another information about a joint (stored in another Joint3D) as a previous link to the current Joint3D.
    Attribute: Parameter previous The previous joint.
    */
    action SetPrevious(Joint3D previous)
        me:previous = previous
    end

    /*
    This action gets you the next information about a joint (stored in another Joint3D) inside a linked list of Joint3Ds.  
    Attribute: Returns the next joint.
    */
    action GetNext returns Joint3D
        return next
    end

    /*
    This action lets you store another information about a joint (stored in another Joint3D) as a next link to the current Joint3D.
    Attribute: Parameter next The next joint.
    */
    action SetNext(Joint3D next)
        me:next = next
    end

    /*
    This action returns the first JointEdge3D stored inside this Joint3D.
    Attribute: Returns the first JointEdge3D stored inside this Joint3D.
    */
    action GetEdgeA returns JointEdge3D
        return edgeA
    end

    /*
    This action sets the first JointEdge3D stored inside this Joint3D.
    Attribute: Parameter edgeA The first JointEdge3D stored inside this Joint3D.
    */
    action SetEdgeA(JointEdge3D edgeA)
        me:edgeA = edgeA
    end

    /*
    This action returns the second JointEdge3D stored inside this Joint3D.
    Attribute: Returns the second JointEdge3D stored inside this Joint3D.
    */
    action GetEdgeB returns JointEdge3D
        return edgeB
    end

    /*
    This action sets the second JointEdge3D stored inside this Joint3D.
    Attribute: Parameters edgeB The second JointEdge3D stored inside this Joint3D.
    */
    action SetEdgeB(JointEdge3D edgeB)
        me:edgeB = edgeB
    end
end