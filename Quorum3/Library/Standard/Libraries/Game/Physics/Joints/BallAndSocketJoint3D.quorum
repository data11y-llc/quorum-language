package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D
use Libraries.Containers.Array
use Libraries.Compute.Math  
use Libraries.Compute.Vector3  
use Libraries.Compute.Matrix3
use Libraries.Game.Physics.Joints.RotationalLimitMotor3D
use Libraries.Game.Physics.Joints.TranslationalLimitMotor3D   
use Libraries.Game.Physics.ConstraintDescription3D
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Compute.Quaternion

/*
This class is a joint that is similar to the joint between a person's shoulder and arm, where the arm can freely rotate about the shoulder.
*/
class BallAndSocketJoint3D is Joint3D
    ConstraintDescription3D jac0
    ConstraintDescription3D jac1
    ConstraintDescription3D jac2



    Vector3 pivotInA
    Vector3 pivotInB

    number tau = 0.3
    number damping = 1
    number impulseClamp = 0

    /*
    This action initializes the joint.
    Attribute: Parameter itemA The first item.
    Attribute: Parameter itemB The second item.
    Attribute: Parameter pivotInA The location of the joint relative to the first item.
    Attribute: Parameter pivotInB The location of the joint relative to the second item.
    */
    action Initialize(Item3D itemA, Item3D itemB, Vector3 pivotInA, Vector3 pivotInB)
        parent:Joint3D:SetItemA(itemA)
        parent:Joint3D:SetItemB(itemB)
        parent:Joint3D:SetType(parent:Joint3D:BallAndSocket)
        me:pivotInA = pivotInA
        me:pivotInB = pivotInB
    end

    /*
    This action is called by the Collision Solver to gather information on the joint before calling the SolveJoint action.
    This action is used internally.
    */
    action BuildJacobian
        parent:Joint3D:appliedImpulse = 0

        Vector3 normal
        normal:Set(0,0,0)


        Matrix3 tempMat1
        Matrix3 tempMat2

        Vector3 temp1
        Vector3 temp2
        Vector3 tempVec


        PhysicsPosition3D centerOfMassA
        PhysicsPosition3D centerOfMassB
        centerOfMassA:Set(parent:Joint3D:itemA:GetCenterOfMassTransform())
        centerOfMassB:Set(parent:Joint3D:itemB:GetCenterOfMassTransform())
        

        normal:Set(1.0, normal:GetY(), normal:GetZ())
        tempMat1:Set(centerOfMassA:GetBasis())
        tempMat1:Transpose()

        tempMat2:Set(centerOfMassB:GetBasis())
        tempMat2:Transpose()
        

        temp1:Set(pivotInA)
        centerOfMassA:Transform(temp1)
        temp1:Subtract(parent:Joint3D:itemA:GetCenterOfMassTransform():GetOrigin())

        temp2:Set(pivotInB)
        centerOfMassB:Transform(temp2)
        temp2:Subtract(parent:Joint3D:itemB:GetCenterOfMassTransform():GetOrigin())

        jac0:Initialize(tempMat1, tempMat2, temp1, temp2, normal, parent:Joint3D:itemA:GetInverseInertiaLocal(), parent:Joint3D:itemA:GetInverseMass(), parent:Joint3D:itemB:GetInverseInertiaLocal(), parent:Joint3D:itemB:GetInverseMass())

        normal:Set(0.0, 0.0, 0.0)
        normal:Set(0, 1, 0)
        jac1:Initialize(tempMat1, tempMat2, temp1, temp2, normal, parent:Joint3D:itemA:GetInverseInertiaLocal(), parent:Joint3D:itemA:GetInverseMass(), parent:Joint3D:itemB:GetInverseInertiaLocal(), parent:Joint3D:itemB:GetInverseMass())

        normal:Set(0,0,0)
        normal:Set(0, 0, 1)
        jac2:Initialize(tempMat1, tempMat2, temp1, temp2, normal, parent:Joint3D:itemA:GetInverseInertiaLocal(), parent:Joint3D:itemA:GetInverseMass(), parent:Joint3D:itemB:GetInverseInertiaLocal(), parent:Joint3D:itemB:GetInverseMass())
    end


    /*
    This action solves the constraint of this joint and make sure that objects A and B is able to move accordint to the joint constraint applied.
    This action is used internally.
    */
    action SolveJoint(number timeStep)
        Vector3 temp
        Vector3 temp2
        Vector3 tempVec

        PhysicsPosition3D centerOfMassA
        PhysicsPosition3D centerOfMassB
        centerOfMassA:Set(parent:Joint3D:itemA:GetCenterOfMassTransform())
        centerOfMassB:Set(parent:Joint3D:itemB:GetCenterOfMassTransform())

        Vector3 pivotAInW
        pivotAInW:Set(pivotInA)
        centerOfMassA:Transform(pivotAInW)

        Vector3 pivotBInW
        pivotBInW:Set(pivotInB)
        centerOfMassB:Transform(pivotBInW)

        Vector3 normal
        normal:Set(0,0,0)


        Vector3 rel_pos1
        rel_pos1:Set(pivotAInW)
        rel_pos1:Subtract(parent:Joint3D:itemA:GetCenterOfMassTransform():GetOrigin())

        Vector3 rel_pos2
        rel_pos2:Set(pivotBInW)
        rel_pos2:Subtract(parent:Joint3D:itemB:GetCenterOfMassTransform():GetOrigin())

        Vector3 vel1
        vel1:Set(parent:Joint3D:itemA:GetLinearVelocityAtLocalPoint(rel_pos1))

        Vector3 vel2
        vel2:Set(parent:Joint3D:itemB:GetLinearVelocityAtLocalPoint(rel_pos2))

        Vector3 vel
        vel:Set(vel1)
        vel:Subtract(vel2)

        number rel_vel = 0
        integer i = 0
        number jacDiagABInv = 1


        repeat 3 times
            if (i = 0)
                normal:Set(1,0,0)
                jacDiagABInv = 1/jac0:GetDiagonal()
            elseif (i = 1)
                normal:Set(0,1,0)
                jacDiagABInv = 1/jac1:GetDiagonal()
            else
                normal:Set(0,0,1)
                jacDiagABInv = 1/jac2:GetDiagonal()
            end

            rel_vel = normal:DotProduct(vel)

            // positional error (zeroth order error)
            temp:Set(pivotAInW)
            temp:Subtract(pivotBInW)

            number depth = -(temp:DotProduct(normal)) // this is the error projected on the normal
            number impulse = depth * tau / timeStep * jacDiagABInv - damping * rel_vel * jacDiagABInv

            //number impulseClamp = me:impulseClamp

            if (impulseClamp > 0)
                if (impulse < -impulseClamp)
                    impulse = -impulseClamp
                end
                if (impulse > impulseClamp)
                    impulse = impulseClamp
                end
            end

            parent:Joint3D:appliedImpulse = parent:Joint3D:appliedImpulse + impulse

            Vector3 impulse_vector
            impulse_vector:Set(normal)
            impulse_vector:Scale(impulse)

            temp:Set(pivotAInW)
            temp:Subtract(parent:Joint3D:itemA:GetCenterOfMassTransform():GetOrigin())
            parent:Joint3D:itemA:ApplyImpulse(impulse_vector, temp)

            temp:Set(impulse_vector)
            temp:MakeOpposite()

            temp2:Set(pivotBInW)
            temp2:Subtract(parent:Joint3D:itemB:GetCenterOfMassTransform():GetOrigin())

            parent:Joint3D:itemB:ApplyImpulse(temp, temp2)
            i = i + 1
        end
    end




    action UpdateRHS(number timeStep)
    end
end
