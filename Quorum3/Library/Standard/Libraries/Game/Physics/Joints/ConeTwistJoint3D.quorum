package Libraries.Game.Physics.Joints

use Libraries.Game.Physics.CollisionSolverInformation3D
use Libraries.Game.Physics.all
use Libraries.Interface.Item3D
use Libraries.Containers.Array
use Libraries.Compute.Math  
use Libraries.Compute.Vector3  
use Libraries.Compute.Matrix3
use Libraries.Game.Physics.Joints.RotationalLimitMotor3D
use Libraries.Game.Physics.Joints.TranslationalLimitMotor3D   
use Libraries.Game.Physics.ConstraintDescription3D
use Libraries.Game.Collision.PhysicsPosition3D
use Libraries.Compute.Quaternion

/*
This is a joint that describes how much freedom can one object rotate about another object. 
This joint is different than the ball and socket joint in that there is an angular limit to how much the rotating object can rotate.
*/
class ConeTwistJoint3D is Joint3D

    ConstraintDescription3D jac0
    ConstraintDescription3D jac1
    ConstraintDescription3D jac2

    PhysicsPosition3D rbAFrame 
    PhysicsPosition3D rbBFrame 

    number limitSoftness = 0.0


    number biasFactor  = 0.0

    number relaxationFactor  = 0.0


    number swingSpan1  = 0.0
    number swingSpan2  = 0.0
    number twistSpan  = 0.0


    Vector3 swingAxis 
    Vector3 twistAxis 

    number kSwing  = 0.0
    number kTwist  = 0.0

    number twistLimitSign  = 0.0
    number swingCorrection  = 0.0
    number twistCorrection  = 0.0

    number accSwingLimitImpulse  = 0.0
    number accTwistLimitImpulse  = 0.0

    boolean angularOnly = false 
    boolean solveTwistLimit = false
    boolean solveSwingLimit = false

    Math math
    number epsilon = 1.1920928955078125 * (math:RaiseToPower(10, -7))


    /*
    This action initializes the joint.
    Attribute: Parameter itemA The first item.
    Attribute: Parameter itemB The second item.
    Attribute: Parameter positionA The center and orientation of the joint connection in A's point of view.
    Attribute: Parameter positionB The center and orientation of the joint connection in B's point of view.
    */
    action Initialize(Item3D itemA, Item3D itemB, PhysicsPosition3D positionA, PhysicsPosition3D positionB)
        parent:Joint3D:SetItemA(itemA)
        parent:Joint3D:SetItemB(itemB)
        parent:Joint3D:SetType(parent:Joint3D:ConeTwist)

        rbAFrame:Set(positionA)
        rbBFrame:Set(positionB)

        swingSpan1 = math:RaiseToPower(10, 30)
        swingSpan2 = math:RaiseToPower(10, 30)
        twistSpan = math:RaiseToPower(10, 30) 
        biasFactor = 0.3 
        relaxationFactor = 1.0 

        solveTwistLimit = false 
        solveSwingLimit = false 
    end


    /*
    This action is called by the Collision Solver to gather information on the joint before calling the SolveJoint action.
    This action is used internally.
    */
    action BuildJacobian
        Vector3 tmp 
        Vector3 tmp1
        Vector3 tmp2 

        PhysicsPosition3D tmpTrans 

        parent:Joint3D:appliedImpulse = 0

        // set bias, sign, clear accumulator
        swingCorrection = 0 
        twistLimitSign = 0 
        solveTwistLimit = false 
        solveSwingLimit = false 
        accTwistLimitImpulse = 0 
        accSwingLimitImpulse = 0 

        if (not angularOnly)
            Vector3 pivotAInW
            pivotAInW:Set(rbAFrame:GetOrigin())
            Vector3 pivotBInW
            pivotBInW:Set(rbBFrame:GetOrigin())

            parent:Joint3D:itemA:GetCenterOfMassTransform():Transform(pivotAInW)

            parent:Joint3D:itemB:GetCenterOfMassTransform():Transform(pivotBInW)

            Vector3 relPos
            relPos:Set(pivotBInW)
            relPos:Subtract(pivotAInW)

            Vector3 normal0
            Vector3 normal1
            Vector3 normal2

            if (relPos:LengthSquared() > epsilon)
                normal0:Set(relPos)
                normal0:Normalize()
            else
                normal0:Set(1,0,0)
            end
            PlaneSpace1(normal0, normal1, normal2)

            integer i = 0

            Matrix3 mat1
            mat1:Set(parent:Joint3D:itemA:GetCenterOfMassTransform():GetBasis())
            mat1:Transpose()
            Matrix3 mat2
            mat2:Set(parent:Joint3D:itemB:GetCenterOfMassTransform():GetBasis())
            mat2:Transpose()

            tmp1:Set(pivotAInW)
            tmp1:Subtract(parent:Joint3D:itemA:GetCenterOfMassTransform():GetOrigin())

            tmp2:Set(pivotBInW)
            tmp2:Subtract(parent:Joint3D:itemB:GetCenterOfMassTransform():GetOrigin())


            jac0:Initialize(mat1, mat2, tmp1, tmp2, normal0, parent:Joint3D:itemA:GetInverseInertiaLocal(), parent:Joint3D:itemA:GetInverseMass(), parent:Joint3D:itemB:GetInverseInertiaLocal(), parent:Joint3D:itemB:GetInverseMass())

            jac1:Initialize(mat1, mat2, tmp1, tmp2, normal1, parent:Joint3D:itemA:GetInverseInertiaLocal(), parent:Joint3D:itemA:GetInverseMass(), parent:Joint3D:itemB:GetInverseInertiaLocal(), parent:Joint3D:itemB:GetInverseMass())

            jac2:Initialize(mat1, mat2, tmp1, tmp2, normal2, parent:Joint3D:itemA:GetInverseInertiaLocal(), parent:Joint3D:itemA:GetInverseMass(), parent:Joint3D:itemB:GetInverseInertiaLocal(), parent:Joint3D:itemB:GetInverseMass())

        end

        
        Vector3 b1Axis1
        Vector3 b1Axis2
        Vector3 b1Axis3

        Vector3 b2Axis1
        Vector3 b2Axis2

        b1Axis1:Set(rbAFrame:GetBasis():GetColumn(0))
        parent:Joint3D:itemA:GetCenterOfMassTransform():GetBasis():Transform(b1Axis1)

        b2Axis1:Set(rbBFrame:GetBasis():GetColumn(0))
        parent:Joint3D:itemB:GetCenterOfMassTransform():GetBasis():Transform(b2Axis1)

        number swing1 = 0
        number swing2 = 0

        number swx = 0
        number swy = 0
        number thresh = 10
        number fact = 0

        // Get Frame into world space
	if (swingSpan1 >= 0.05)
            b1Axis2:Set(rbAFrame:GetBasis():GetColumn(1))
            parent:Joint3D:itemA:GetCenterOfMassTransform():GetBasis():Transform(b1Axis2)

            swx = b2Axis1:DotProduct(b1Axis1)
            swy = b2Axis1:DotProduct(b1Axis2)

            swing1 = atan2Fast(swy, swx)

            fact = (swy*swy + swx*swx) * thresh * thresh
            fact = fact / (fact + 1.0)

            swing1 = swing1 * fact
        end

         //special case of ball and socket joint
        if (swingSpan2 >= 0.05)
            b1Axis3:Set(rbAFrame:GetBasis():GetColumn(2))
            parent:Joint3D:itemA:GetCenterOfMassTransform():GetBasis():Transform(b1Axis3)

            swx = b2Axis1:DotProduct(b1Axis1)
            swy = b2Axis1:DotProduct(b1Axis3)

            swing2 = atan2Fast(swy, swx)
            fact = (swy*swy + swx*swx) * thresh * thresh
            fact = fact / (fact + 1.0)
            swing2 = swing2 * fact
        end


        number RMaxAngle1Sq = 1.0 / (swingSpan1 * swingSpan1)
        number RMaxAngle2Sq = 1.0 / (swingSpan2 * swingSpan2)
        number EllipseAngle = math:AbsoluteValue(swing1*swing1) * RMaxAngle1Sq + math:AbsoluteValue(swing2*swing2) * RMaxAngle2Sq
    
        if (EllipseAngle > 1.0)
            swingCorrection = EllipseAngle - 1.0
            solveSwingLimit = true

            // Calculate necessary axis & factors
            tmp1:Set(b1Axis2)
            tmp1:Scale(b2Axis1:DotProduct(b1Axis2))
            tmp2:Set(b1Axis3)
            tmp2:Scale(b2Axis1:DotProduct(b1Axis3))

            tmp:Set(tmp1)
            tmp:Add(tmp2)

            swingAxis:Set(b2Axis1)
            swingAxis:CrossProduct(tmp)
            swingAxis:Normalize()

            number swingAxisSign = 0
            if (b2Axis1:DotProduct(b1Axis1) >= 0.0)
                swingAxisSign = 1
            else
                swingAxisSign = -1
            end

            swingAxis:Scale(swingAxisSign)

            number dem1 = parent:Joint3D:itemA:ComputeAngularImpulseDenominator(swingAxis)
            number dem2 = parent:Joint3D:itemB:ComputeAngularImpulseDenominator(swingAxis)
            kSwing = 1 / (dem1+dem2) 
        end

        // Twist limits
        if (twistSpan >= 0)
            b2Axis2:Set(rbBFrame:GetBasis():GetColumn(1))
            parent:Joint3D:itemB:GetCenterOfMassTransform():GetBasis():Transform(b2Axis2)
            
            Quaternion rotationArc
            rotationArc:SetAsShortestArcQuaternion(b2Axis1, b1Axis1)

            Vector3 TwistRef
            TwistRef:Set(rotationArc:QuaternionRotate(b2Axis2))

            number twist = atan2Fast(TwistRef:DotProduct(b1Axis3), TwistRef:DotProduct(b1Axis2))

            number lockedFreeFactor = 0
            if (twistSpan > 0.05)
                lockedFreeFactor = limitSoftness
            else
                lockedFreeFactor = 0
            end

            if (twist <= -twistSpan * lockedFreeFactor)
                twistCorrection = -(twist + twistSpan)

                solveTwistLimit = true

                twistAxis:Set(b2Axis1)
                twistAxis:Add(b1Axis1) 
                twistAxis:Scale(0.5)
                twistAxis:Normalize()

                twistAxis:Scale(-1)

                
                number dem1a = parent:Joint3D:itemA:ComputeAngularImpulseDenominator(twistAxis)
                number dem2a = parent:Joint3D:itemB:ComputeAngularImpulseDenominator(twistAxis)
                kTwist = 1.0 / (dem1a + dem2a)
            elseif (twist > twistSpan * lockedFreeFactor)
                twistCorrection = (twist - twistSpan)
                solveTwistLimit = true
                twistAxis:Set(b2Axis1)
                twistAxis:Add(b1Axis1)
                twistAxis:Scale(0.5)
                twistAxis:Normalize()
                number dem1b = parent:Joint3D:itemA:ComputeAngularImpulseDenominator(twistAxis)
                number dem2b = parent:Joint3D:itemB:ComputeAngularImpulseDenominator(twistAxis)
                kTwist = 1.0 / (dem1b + dem2b)
            end
        end
        
    end


    private number SQRT12 = 0.7071067690849304
    /*
    This action is used to create a coordinate system based on a normal vector.
    */
    private action PlaneSpace1(Vector3 n, Vector3 p, Vector3 q)
        if (math:AbsoluteValue(n:GetZ()) > SQRT12)
            number a = n:GetY() * n:GetY() + n:GetZ() * n:GetZ()
            number k = 1.0/a

            p:Set(0, -n:GetZ() * k, n:GetY() * k)
            q:Set(a*k, -n:GetX() * p:GetZ(), n:GetX()*p:GetY())

        else
            number a = n:GetY() * n:GetY() + n:GetX() * n:GetX()
            number k = 1.0/a

            p:Set(-n:GetY() * k, n:GetX() * k, 0)
            q:Set(-n:GetZ() * p:GetY(), n:GetZ()*p:GetX(), a*k)
        end
    end

    /*
    This action solves the constraint of this joint and make sure that objects A and B is able to move accordint to the joint constraint applied.
    This action is used internally.
    */
    action SolveJoint(number timeStep)
        Vector3 tmp 
        Vector3 tmp2 

        Vector3 tmpVec 
        PhysicsPosition3D tmpTrans

        Vector3 pivotAInW 
        pivotAInW:Set(rbAFrame:GetOrigin())
        parent:Joint3D:itemA:GetCenterOfMassTransform():Transform(pivotAInW)

        Vector3 pivotBInW 
        pivotBInW:Set(rbBFrame:GetOrigin())
        parent:Joint3D:itemB:GetCenterOfMassTransform():Transform(pivotBInW)
        
        number tau = 0.3


        // solve linear part
        if (not angularOnly)
            Vector3 rel_pos1
            rel_pos1:Set(pivotAInW)
            rel_pos1:Subtract(parent:Joint3D:itemA:GetCenterOfMassTransform():GetOrigin())

            Vector3 rel_pos2
            rel_pos2:Set(pivotBInW)
            rel_pos2:Subtract(parent:Joint3D:itemB:GetCenterOfMassTransform():GetOrigin())

            Vector3 vel1
            vel1:Set(parent:Joint3D:itemA:GetLinearVelocityAtLocalPoint(rel_pos1))

            Vector3 vel2
            vel2:Set(parent:Joint3D:itemB:GetLinearVelocityAtLocalPoint(rel_pos2))

            Vector3 vel
            vel:Set(vel1)
            vel:Subtract(vel2)

            number rel_vel = 0
            integer i = 0
            number jacDiagABInv = 1
            Vector3 normal

            repeat 3 times
                if (i = 0)
                    normal:Set(jac0:GetLinearJointAxis())
                    jacDiagABInv = 1/jac0:GetDiagonal()
                elseif (i = 1)
                    normal:Set(jac1:GetLinearJointAxis())
                    jacDiagABInv = 1/jac1:GetDiagonal()
                else
                    normal:Set(jac2:GetLinearJointAxis())
                    jacDiagABInv = 1/jac2:GetDiagonal()
                end

                rel_vel = normal:DotProduct(vel)

                tmp:Set(pivotAInW)
                tmp:Subtract(pivotBInW)

                number depth = -(tmp:DotProduct(normal)) // this is the error projected on the normal
                number impulse = depth * tau / timeStep * jacDiagABInv - rel_vel * jacDiagABInv
                
                parent:Joint3D:appliedImpulse = parent:Joint3D:appliedImpulse + impulse

                Vector3 impulse_vector
                impulse_vector:Set(normal)
                impulse_vector:Scale(impulse)

                tmp:Set(pivotAInW)
                tmp:Subtract(parent:Joint3D:itemA:GetCenterOfMassTransform():GetOrigin())
                parent:Joint3D:itemA:ApplyImpulse(impulse_vector, tmp)

                tmp:Set(impulse_vector)
                tmp:MakeOpposite()

                tmp2:Set(pivotBInW)
                tmp2:Subtract(parent:Joint3D:itemB:GetCenterOfMassTransform():GetOrigin())

                parent:Joint3D:itemB:ApplyImpulse(tmp, tmp2)
                i = i + 1
            end //end for loop
        end //end solve linear

        
        //start solving angular part
        Vector3 angVelA
        angVelA:Set(parent:Joint3D:itemA:GetAngularVelocity())
        Vector3 angVelB
        angVelB:Set(parent:Joint3D:itemB:GetAngularVelocity())


        if (solveSwingLimit)
            tmp:Set(angVelB)
            tmp:Subtract(angVelA)

            number amplitude = ((tmp:DotProduct(swingAxis)) * relaxationFactor * relaxationFactor + swingCorrection * (1.0 / timeStep) * biasFactor)
            number impulseMag = amplitude * kSwing

            // Clamp the accumulated impulse
            number temp = accSwingLimitImpulse
            accSwingLimitImpulse = math:MaximumOf(accSwingLimitImpulse + impulseMag, 0.0)
            impulseMag = accSwingLimitImpulse - temp
            
            Vector3 impulse
            impulse:Set(swingAxis)
            impulse:Scale(impulseMag)

            parent:Joint3D:itemA:ApplyTorqueImpulse(impulse)
            tmp:Set(impulse)
            tmp:MakeOpposite()
            parent:Joint3D:itemB:ApplyTorqueImpulse(tmp)
        end //if (solveSwingLimit)
        

        // solve twist limit
	if (solveTwistLimit)
            tmp:Set(angVelB)
            tmp:Subtract(angVelA)
            
            number amplitude = ((tmp:DotProduct(twistAxis)) * relaxationFactor * relaxationFactor + twistCorrection * (1.0 / timeStep) * biasFactor)

            number impulseMag = amplitude * kTwist

            // Clamp the accumulated impulse
            number temp = accTwistLimitImpulse
            accTwistLimitImpulse = math:MaximumOf(accTwistLimitImpulse + impulseMag, 0.0)
            impulseMag = accTwistLimitImpulse - temp

            Vector3 impulse
            impulse:Set(twistAxis)
            impulse:Scale(impulseMag)

            parent:Joint3D:itemA:ApplyTorqueImpulse(impulse)
            tmp:Set(impulse)
            tmp:MakeOpposite()
            parent:Joint3D:itemB:ApplyTorqueImpulse(tmp)
        end
    end

    /*
    This action is used to calculate the inverse tangent.
    */
    private action atan2Fast(number y, number x) returns number
        number coeff_1 = math:pi/4.0
        number coeff_2 = 3.0*coeff_1

        number abs_y = math:AbsoluteValue(y)

        number angle = 0

        if (x >= 0.0)
            number r = (x - abs_y )/(x+abs_y)
            angle = coeff_1 - coeff_1 * r
        else
            number r = (x + abs_y) / (abs_y - x)
            angle = coeff_2 - coeff_1 * r
        end

        if (y < 0.0)
            return -angle
        else 
            return angle
        end
    end

    /*
    This action sets the limits to the cone twist joint.
    Attribute: Parameter inputSwingSpan1 The limit on the Z rotation axis of the joint in degrees.
    Attribute: Parameter inputSwingSpan2 The limit on the Y rotation axis of the joint in degrees.
    Attribute: Parameter inputTwistSpan The limit on the X rotation axis of the joint in degrees.
    Attribute: Parameter inputSoftness At what fraction should the velocity limits starts to be solved. For example, if softness is 0.8, that means the physics will try to correct for the joint when the objects are at 0.8*(velocity limit range). Recommended values are from 0.8 to 1.
    Attribute: Parameter inputBiasFactor Because during simulation, errors in position of the objects pile up due to rounding errors, this sets how much you want to correct for that error. Default value is 0.3, and the recommended range is [-0.3 to 0.3].
    Attribute: Parameter inputRelaxationfactor How lenient are you with the objects going out of the limit range in fractions. (0 very lenient, 1 very hard). Default value is 1.
    */
    action SetLimits(number inputSwingSpan1, number inputSwingSpan2, number inputTwistSpan, number inputSoftness, number inputBiasFactor, number inputRelaxationfactor)
        swingSpan1 = inputSwingSpan1
        swingSpan2 = inputSwingSpan2
        twistSpan = inputTwistSpan
        limitSoftness = inputSoftness   
        biasFactor = inputBiasFactor
        relaxationFactor = inputRelaxationfactor
    end
end