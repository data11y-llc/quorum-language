package Libraries.Game.Physics

use Libraries.Containers.Array
use Libraries.Compute.Vector3
use Libraries.Interface.Events.CollisionListener3D
use Libraries.Interface.Item3D
use Libraries.Interface.Events.CollisionEvent3D
use Libraries.Game.Physics.CollisionSolver3D
use Libraries.Compute.Math
use Libraries.Game.Physics.Joints.Joint3D
use Libraries.Game.Collision.LocalCollisionPoints3D
use Libraries.Game.Physics.all

/*
When the physics algorithm groups objects together, they will be stored inside the same group.
This class groups items together so that collisions between these items in this
group can be treated independent of other groups.
Usually, we only have one CollisionGroup3D per one physics world.
*/
class CollisionGroup3D 
    Array<Item3D> items
    Array<CollisionEvent3D> collisions
    Array<Joint3D> joints

    integer itemCount = 0
    integer jointCount = 0
    integer collisionCount = 0

    Math math

    CollisionSolver3D collisionSolver
    CollisionSolverInformation3D solverInfo

    number linearSleepingThreshold = 0.8
    number angularSleepingThreshold = 1

    /*
    This action sets all of the class variables to 0.
    This action needs to be called everytime you want to use the same CollisionGroup3D object for a different collision group.
    */
    action Empty
        itemCount = 0
        items:Empty()
        collisionCount = 0
        collisions:Empty()
        jointCount = 0
        joints:Empty()
    end

    /*
    This action adds a 3D object to this CollisionGroup3D.
    Attribute: Parameter item The 3D object to add.
    */
    action Add(Item3D item)
        items:Add(item)
        item:SetCollisionGroupIndex(-1)
        itemCount = itemCount + 1
        end

    /*
    This action records a collision that involves one of the items/joints in this
    CollisionGroup3D.
    Attribute: Parameter collision The collision event to add.
    */
    action Add(CollisionEvent3D collision)
        collisions:Add(collision)
        collisionCount = collisionCount + 1
    end

    /*
    This action adds a joint to this CollisionGroup3D.
    Attribute: Parameter joint The joint to add.
    */
    action Add(Joint3D joint)
        //correct joint is added
        //output "Added a joint in CollisionGroup3D"
        //output "This is the joint with itemA as " + joint:GetItemA():GetDescription()
        joints:Add(joint)
        jointCount = jointCount + 1
    end

    /*
    This action returns how many 3D objects are inside this CollisionGroup3D.
    Attribute: Returns the number of 3D objects.
    */
    action GetItemCount returns integer
        return itemCount
    end

    /*
    This action returns how many collisions have been recorded that involves an
    item/joint that is inside this CollisionGroup3D.
    Attribute: Returns the number of collision counts.
    */
    action GetCollisionCount returns integer
        return collisionCount
    end

    /*
    This action returns how many joints are inside this CollisionGroup3D.
    Attribute: Returns the number of joint counts.
    */
    action GetJointCount returns integer
        return jointCount
    end

    /*
    This action returns a 3D object that is inside this CollisionGroup3D at an array
    index of "integer index."
    Attribute: Parameter index The index of interest.
    Attribute: Returns the 3D object.
    */
    action GetItem(integer index) returns Item3D
        return items:Get(index)
    end

    /*
    This action returns a container for all of the properties of a collision
    involving one of the items/joints in this CollisionGroup3D at an array
    index of "integer index."
    Attribute: Parameter index The index of interest.
    Attribute: Returns the 3D collision event.
    */
    action GetCollision(integer index) returns CollisionEvent3D
        return collisions:Get(index)
    end

    /*
    This action returns a Joint3D that is inside this CollisionGroup3D at an array
    index of "integer index."
    Attribute: Parameter index The index of interest.
    Attribute: Returns the 3D joint.
    */
    action GetJoint(integer index) returns Joint3D
        return joints:Get(index)
    end

    /*
    This action connects a container for all of the constants/variables that a solver needs
    to this CollisionGroup3D to be used by this CollisionGroup3D.
    Attribute: Parameter solverInformation The data holder for information of the solver.
    */
    action SetSolverInformation(CollisionSolverInformation3D solverInformation)
        me:solverInfo = solverInformation
    end

    /*
    This action updates the positions of objects that is inside this CollisionGroup3D by solving physics.
    Attribute: Parameter seconds Amount of time to simulate.
    Attribute: Parameter gravity The gravitational force.
    Attribute: Parameter requireSimulation Whether this object will react to forces or sleep.
    */
    action Solve(number seconds, Vector3 gravity, boolean requireSimulation)
        Array<LocalCollisionPoints3D> manifolds
        integer manifoldCount = 0
        integer i = 0
        repeat while i < collisions:GetSize()
            LocalCollisionPoints3D manifold = collisions:Get(i):GetCollisionPoints()
            manifolds:Add(manifold)
            manifoldCount = manifoldCount + 1
            i = i + 1
        end

        //apply gravity
        i = 0
        repeat while i < items:GetSize()
            Item3D item = items:Get(i)
            Vector3 force
            force:Set(gravity)
            force:Scale(1.0 / item:GetInverseMass())
            item:ApplyForceToCenter(force)
            item:IntegrateVelocities(seconds)
            item:ApplyDamping(seconds)

            i = i + 1
        end

        collisionSolver:SolveGroup(items, itemCount, manifolds, 0, manifoldCount, joints, 0, jointCount, solverInfo)

        if not requireSimulation
            number h = solverInfo:GetTimeStep()
            number timeToSleep = 2
            number minSleepTime = timeToSleep:GetMaximumValue()

            i = 0
            repeat while i < itemCount
                Item3D body = items:Get(i)
                if body:GetResponsiveness() not= body:GetPhysicsProperties():UNMOVABLE
                    Vector3 linvel
                    linvel:Set(body:GetLinearVelocity())
                    Vector3 angvel
                    angvel:Set(body:GetAngularVelocity())
                    if body:IsSimulationRequired()
                        or angvel:LengthSquared() > angularSleepingThreshold * angularSleepingThreshold
                        or linvel:LengthSquared() > linearSleepingThreshold * linearSleepingThreshold
                            body:SetSleepTime(0)
                            minSleepTime = 0
                    else
                        body:SetSleepTime(body:GetSleepTime() + h)
                        if minSleepTime > body:GetSleepTime()
                            minSleepTime = body:GetSleepTime()
                        end
                    end
                end

                i = i + 1
            end

            if minSleepTime >= timeToSleep
                i = 0
                repeat while i < itemCount
                    Item3D body = items:Get(i)
                    body:Simulate(false)

                    i = i + 1
                end
            end
        end
    end
end