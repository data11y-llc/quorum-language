package Libraries.Game.Graphics.Fonts

use Libraries.Game.Graphics.Fonts.all

/*
The CoordinateVector class is used to store information about x/y coordinate
pairs, including their position, whether or not they are on the curve, and if
they are endpoints.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all   
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame()
            CoordinateVector vector
            vector:SetX(0)
            vector:SetY(1)
            output "x: " + vector:GetX() + ", y: " + vector:GetY()
        end
    end 
*/
class CoordinateVector 
    /*X coordinate position*/
    number x = 0
    /*Y coordinate position*/
    number y = 0

    /*Whether or not the point lies on a curve.*/
    boolean onCurve = false
    /*Whether or not the point is an endpoint.*/
    boolean endpoint = false
    /*Whether or not this vector has already been computed.*/
    boolean computed = false

    /*
    This action makes a copy of a given vector.

    Attribute: Parameter vector The vector to be copied.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector1
                CoordinateVector vector2
                vector1:SetX(1)
                vector1:SetY(1)
                vector2:Copy(vector1)
                output vector2:GetX()
            end
        end
    */
    action Copy(CoordinateVector vector)
        me:x = vector:GetX()
        me:y = vector:GetY()
        me:onCurve = vector:IsOnCurve()
    end

    /*
    This action returns whether or not the vector is on the outline curve.

    Attribute: Returns Returns true if the vector is on the curve, and false if
    it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame()
                CoordinateVector vector 
                output vector:IsOnCurve()
            end 
        end
    */
    action IsOnCurve() returns boolean
        return me:onCurve
    end

    /*
    This action sets whether or not this vector is on the outline curve.

    Attribute: Parameter onCurve True is the vector is on the curve, false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                vector:SetOnCurve(true)
                output vector:IsOnCurve()
            end
        end
    */
    action SetOnCurve(boolean onCurve) 
        me:onCurve = onCurve
    end

    /*
    This action returns the x position of the vector.

    Attribute: Returns Returns the x position of the vector.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                output vector:GetX()
            end
        end
    */
    action GetX() returns number
        return me:x
    end

    /*
    This action returns the y position of the vector.

    Attribute: Returns Returns the y position of the vector.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                output vector:GetY()
            end
        end
    */
    action GetY() returns number
        return me:y
    end

    /*
    This action sets the x position of the vector.

    Attribute: Parameter x The x position of the vector.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                vector:SetX(1)
                output vector:GetX()
            end
        end
    */
    action SetX(number x)
        me:x = x
    end

    /*
    This action sets the y position of the vector.

    Attribute: Parameter y The y position of the vector.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                vector:SetY(1)
                output vector:GetY()
            end
        end
    */
    action SetY(number y)
        me:y = y
    end

    /*
    This action changes the vector's coordinates based on the change in x and y
    for a given line.

    Attribute: Parameter changeInX The rate of change along the x-axis.

    Attribute: Parameter changeInY The rate of change along the y-axis.

    Attribute: Parameter onCurve Whether or not this point is on the curve.

    Attribute: Parameter endPoint Whether or not this point is an end point.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame()
                CoordinateVector vector
                vector:AddNewPointRelativeToLast(1, 2, true, false)
            end
        end
    */
    action AddNewPointRelativeToLast(integer changeInX, integer changeInY, boolean onCurve, boolean endpoint)
        me:x = me:x + changeInX
        me:y = me:y + changeInY
        me:onCurve = onCurve
        me:endpoint = endpoint
    end

    /*
    This action sets whether or not this vector has had its coordinates computed.

    Attribute: Parameter computed True if the vector has been computed, and false
    if it has not been.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame
                CoordinateVector vector
                vector:SetComputed(false)
            end
        end
    */
    action SetComputed(boolean computed)
        me:computed = computed
    end

    /*
    This action checks whether or not this vector has had its coordinates computed.

    Attribute: Returns Returns true if the vector has been computed, and false
    if it has not been.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                output vector:IsComputed()
            end
        end 
    */
    action IsComputed returns boolean
        return me:computed
    end

    /*
    This action sets whether or not this vector is an endpoint of the curve.

    Attribute: Parameter endpoint True if the vector is an endpoint, and false
    if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                vector:SetEndpoint(true)
            end
        end
    */
    action SetEndpoint(boolean endpoint)
        me:endpoint = endpoint
    end
    
    /*
    This action checks whether or not this vector is an endpoint of the curve.

    Attribute: Returns Returns true if the vector is an endpoint of the curve,
    and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                CoordinateVector vector
                output vector:IsEndpoint()
            end
        end 
    */
    action IsEndpoint() returns boolean
        return me:endpoint
    end
end