package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Compute.Math
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.all

/*
The Line class is used to calculate the lines that need to be drawn to fill in
a glyph's outline, including the points that fall on the outline itself. It scans
the glyph line by line on the y-axis to find where the glyph outline begins and
ends, and sets the x-intercepts accordingly. These x-intercepts/y-coordinate pairs
are used in the rasterization process.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.Containers.HashTable

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Line line
            HashTable<integer, XCoordinateList> list
            // Gets the x-intercepts for a line where the pixel size is 14,
            // EM size is 2048, the vertical resolution is 1080, and the nonzero
            // value is currently 0.
            list = line:GetXInterceptsNumber(14, 14, 2048, 1080, 0)
        end
    end
*/
class Line 
    /*The starting x-coordinate of the line.*/
    number x1 = -1
    /*The ending x-coordinate of the line.*/
    number x2 = -1
    /*The starting y-coordinate of the line.*/
    number y1 = -1
    /*The ending y-coordinate of the line.*/
    number y2 = -1

    /*
    This action computes the nonzero value of the line. This may need to be
    adjusted since there are still some cases where we are not filling in the
    glyph properly.
    */
    private action ComputeNonzero(number y1, number y2) returns integer
       integer iy1 = cast(integer, y1)
       integer iy2 = cast(integer, y2)

       if iy2 > iy1 
           return -1
       elseif iy2 = iy1 
            return 0
       else
           return 1
       end
    end

    /*
    This action finds all of the x-intercepts for a scanline along the y-axis,
    and then returns a hash table of these intercepts.

    Attribute: Parameter xPixelSize The pixel size of the display on the x-axis.

    Attribute: Parameter yPixelSize The pixel size of the display on the y-axis.

    Attribute: Parameter unitsPerEM The EM size of the font.

    Attribute: Parameter yScreenSize The vertical resolution of the display.

    Attribute: Parameter oldNonZero The previous nonzero value of the line.

    Attribute: Returns Returns a hash table of x-intercepts for the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.HashTable

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                HashTable<integer, XCoordinateList> list
                // Gets the x-intercepts for a line where the pixel size is 14,
                // EM size is 2048, the vertical resolution is 1080, and the nonzero
                // value is currently 0.
                list = line:GetXInterceptsNumber(14, 14, 2048, 1080, 0)
            end
        end
    */ 
    action GetXInterceptsNumber(integer xPixelSize, integer yPixelSize, integer unitsPerEM, integer yScreenSize, integer oldNonZero) returns HashTable<integer, XCoordinateList>
        Math math
        
        number pixelX1 = CalculateCoordinate(x1, xPixelSize, unitsPerEM, 0)   
        number pixelX2 = CalculateCoordinate(x2, xPixelSize, unitsPerEM, 0)
        number pixelY1 = CalculateCoordinate(y1, yPixelSize, unitsPerEM, yScreenSize)
        number pixelY2 = CalculateCoordinate(y2, yPixelSize, unitsPerEM, yScreenSize)
        
        /*
        // CalculateCoordinateNumber is causing anomalies in the text appearance, can revert back to CalculateCoordinate
        number pixelX1 = CalculateCoordinateNumber(x1, xPixelSize, unitsPerEM, 0)   
        number pixelX2 = CalculateCoordinateNumber(x2, xPixelSize, unitsPerEM, 0)

        number pixelY1 = CalculateCoordinateNumber(y1, yPixelSize, unitsPerEM, yScreenSize)
        number pixelY2 = CalculateCoordinateNumber(y2, yPixelSize, unitsPerEM, yScreenSize)
        */

        //HashTable<integer, XCoordinateList> temp = BresenhamLineAlgorithm(x1, y1, x2, y2) // this is to test the original size outline
        HashTable<integer, XCoordinateList> temp = BresenhamLineAlgorithm(pixelX1, pixelY1, pixelX2, pixelY2)

        // Sorting the entries is neccessary for reliable drawing
        Iterator<integer> it = temp:GetKeyIterator()
        repeat while it:HasNext()
            integer i = it:Next()
            XCoordinateList l = temp:GetValue(i)
            l:Sort()    // doesn't actually seem to be necessary
        end

        return temp
    end

    /* 
       Bresenham's line algorithm to calculate x intercepts
       multi purpose from http://tech-algorithm.com/articles/drawing-line-using-bresenham-algorithm/
    */ 
    private action BresenhamLineAlgorithm (number x1, number y1, number x2, number y2) returns HashTable<integer, XCoordinateList>
        HashTable<integer, XCoordinateList> intercepts
        Math math

        // attempt at new algorithm
        /*
        boolean steep = math:AbsoluteValue(y2 - y1) > math:AbsoluteValue(x2 - x1)
        integer swap = 0
        if(steep)
            swap = x1
            x1 = y1
            y1 = swap
            swap = x2
            x2 = y2
            y2 = swap
        end
        if(x1 > x2)
            swap = x1
            x1 = x2
            x2 = swap
            swap = y1
            y1 = y2
            y2 = swap
        end
        number dx = x2-x1
        number dy = y2-y1
        number gradient = dy/dx
        if(dx = 0.0)
            gradient = 1
        end

        integer xpx11 = x1
        integer xpx12 = x2
        number intersectY = y1

        integer x = xpx11
        if(steep)
            repeat while x <= xpx12
                DrawPoint(IntegerPartOfNumber(intersectY), x, rFractionalPartOfNumber(intersectY), ComputeNonzero(y1, y2), intercepts)
                DrawPoint(IntegerPartOfNumber(intersectY)-1, x, FractionalPartOfNumber(intersectY), ComputeNonzero(y1, y2), intercepts)
                intersectY = intersectY + gradient
                x = x + 1
            end
        else
            repeat while x <= xpx12
                DrawPoint(x, IntegerPartOfNumber(intersectY), rFractionalPartOfNumber(intersectY), ComputeNonzero(y1, y2), intercepts)
                DrawPoint(x, IntegerPartOfNumber(intersectY)-1, FractionalPartOfNumber(intersectY), ComputeNonzero(y1, y2), intercepts)
                intersectY = intersectY + gradient
                x = x + 1
            end
        end
        */

        // Working algorithm
        number intensity = 0

        integer x1i = cast(integer, x1)
        integer x2i = cast(integer, x2)
        integer y1i = cast(integer, y1)
        integer y2i = cast(integer, y2)

        if y1 = y2 and x1 = x2
            return intercepts
        end

        integer nonzero = ComputeNonzero(y1, y2)

        integer lastx = -1
        integer w = cast(integer, (x2 - x1))
        integer h = cast(integer, (y2 - y1)) 
        
        integer dx1 = 0
        integer dy1 = 0
        integer dx2 = 0
        integer dy2 = 0

        if w < 0
            dx1 = -1
        elseif w > 0
            dx1 = 1
        end

        if h < 0
            dy1 = -1
        elseif h > 0
            dy1 = 1
        end

        if w < 0
            dx2 = -1
        elseif w > 0
            dx2 = 1
        end

        integer longest = math:AbsoluteValue(w)
        integer shortest = math:AbsoluteValue(h)
        if not (longest > shortest)
            longest = math:AbsoluteValue(h)
            shortest = math:AbsoluteValue(w)
            if h < 0
                dy2 = -1
            elseif h > 0
                dy2 = 1
            end

            dx2 = 0
        end

        integer numerator = longest / 2
        integer i = 0

        repeat while i <= longest
            
            if intercepts:HasKey(cast(integer, y1))
                XCoordinateList l = intercepts:GetValue(cast(integer, y1))
                PixelIntersection p
                p:SetXPosition(cast(integer, x1))
                p:SetIntensity(1)
                l:Add(p)
            else
                XCoordinateList l
                l:SetNonzero(nonzero)
                PixelIntersection p
                p:SetXPosition(cast(integer, x1))
                p:SetIntensity(1)
                l:Add(p)
                intercepts:Add(cast(integer, y1), l)
            end

            numerator = numerator + shortest
            if not (numerator < longest)
                numerator = numerator - longest
                x1 = x1 + dx1
                y1 = y1 + dy1
            else
                x1 = x1 + dx2
                y1 = y1 + dy2
            end
            
            i = i + 1
        end
        // end working algorithm
        
        return intercepts
    end

    /*
    This action creates a point to be drawn to fill in the glyph, which includes
    its intensity (how much to color the position) as well as the location.
    */
    private action DrawPoint(integer x1, integer y1, number intensity, integer nonzero, HashTable<integer, XCoordinateList> intercepts)
        //output "Intensity is: " + intensity 
        if intercepts:HasKey(cast(integer, y1))
                XCoordinateList l = intercepts:GetValue(y1)
                PixelIntersection p
                p:SetXPosition(x1)
                p:SetIntensity(intensity)
                l:Add(p)
            else
                XCoordinateList l
                l:SetNonzero(nonzero)
                PixelIntersection p
                p:SetXPosition(x1)
                p:SetIntensity(intensity)
                l:Add(p)
                intercepts:Add(y1, l)
            end
    end

    /*
    This action returns the absolute value of a number.
    */
    private action Absolute(number x) returns number
        if(x < 0)
            return -x
        end
        return x
    end

    /*
    This action returns the integer part of a decimal number.
    */
    private action IntegerPartOfNumber(number x) returns integer
        return cast(integer, x)
    end

    /*
    This action rounds a number up if it is >= x.5 and down otherwise, then
    returns the integer value of it.
    */
    private action RoundNumber(number x) returns integer
        return IntegerPartOfNumber(x + 0.5)
    end

    /*
    This action returns the decimal portion of a number.
    */
    private action FractionalPartOfNumber(number x) returns number
        if(x > 0)
            return x - IntegerPartOfNumber(x)
        end
        return x - (IntegerPartOfNumber(x) + 1)
    end

    /*
    This action returns the difference between 1 and the decimal portion of a number.
    */
    private action rFractionalPartOfNumber(number x) returns number
        return 1 - FractionalPartOfNumber(x)
    end

    /*
    This action calculates and returns the scaled coordinate position of a
    coordinate, as an integer.

    Attribute: Parameter gridCoordinate The coordinate to scale.

    Attribute: Parameter pixelSize The size of a pixel on the display.

    Attribute: Parameter emSize The EM size of the font.

    Attribute: Parameter screenSize The screen size of the display.

    Attribute: Returns Returns the scaled coordinate position of a coordinate, as
    an integer.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:CalculateCoordinate(100, 12, 2048, 1080)
            end
        end
    */
    public action CalculateCoordinate(number gridCoordinate, integer pixelSize, integer emSize, integer screenSize) returns number
        if screenSize = 0
            return gridCoordinate * pixelSize / emSize
        end
        number coordinate = screenSize - gridCoordinate * pixelSize / emSize
        return coordinate
    end

    /*
    This action calculates and returns the scaled coordinate position of a
    coordinate, as a number.

    Attribute: Parameter gridCoordinate The coordinate to scale.

    Attribute: Parameter pixelSize The size of a pixel on the display.

    Attribute: Parameter emSize The EM size of the font.

    Attribute: Parameter screenSize The screen size of the display.

    Attribute: Returns Returns the scaled coordinate position of a coordinate, as
    a number.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:CalculateCoordinateNumber(100, 12, 2048, 1080)
            end
        end
    */
    public action CalculateCoordinateNumber(integer gridCoordinate, integer pixelSize, integer emSize, integer screenSize) returns number
        if screenSize = 0
           return cast(number,gridCoordinate) * pixelSize / emSize
        end
        number coordinate = screenSize - gridCoordinate * cast(number, pixelSize) / emSize
        return coordinate
    end

    /*
    This action sets the starting coordinates of the line.

    Attribute: Parameter x The x-coordinate of the starting position.

    Attribute: Parameter y The y-coordinate of the starting position.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                line:SetPoint1(0, 0)
            end
        end 
    */
    action SetPoint1(number x, number y)
        me:x1 = x
        me:y1 = y
    end

    /*
    This action sets the ending coordinates of the line.

    Attribute: Parameter x The x-coordinate of the ending position.

    Attribute: Parameter y The y-coordinate of the ending position.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                line:SetPoint2(10, 10)
            end
        end
    */  
    action SetPoint2(number x, number y)
        me:x2 = x
        me:y2 = y
    end

    /*
    This action sets the starting x-coordinate of the line.

    Attribute: Parameter x The starting x-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                line:SetX1(0)
            end
        end 
    */
    action SetX1(number x) 
        me:x1 = x
    end

    /*
    This action returns the starting x-coordinate of the line.

    Attribute: Returns Returns the starting x-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:GetX1()
            end
        end
    */
    action GetX1() returns number
        return me:x1
    end

    /*
    This action sets the ending x-coordinate of the line.

    Attribute: Parameter x The ending x-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                line:SetX2(10)
            end
        end
    */
    action SetX2(number x) 
        me:x2 = x
    end

    /*
    This action returns the ending x-coordinate of the line.

    Attribute: Returns Returns the ending x-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:GetX2()
            end
        end 
    */
    action GetX2() returns number
        return me:x2
    end

    /*
    This action sets the starting y-coordinate of the line.

    Attribute: Parameter y The starting y-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                line:SetY1(0)
            end
        end 
    */
    action SetY1(number y) 
        me:y1 = y
    end

    /*
    This action returns the starting y-coordinate of the line.

    Attribute: Returns Returns the starting y-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:GetY1()
            end
        end
    */
    action GetY1() returns number
        return me:y1
    end

    /*
    This action sets the ending y-coordinate of the line.

    Attribute: Parameter y The ending y-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                line:SetY2(10)
            end
        end
    */
    action SetY2(number y) 
        me:y2 = y
    end

    /*
    This action returns the ending y-coordinate of the line.

    Attribute: Returns Returns the ending y-coordinate of the line.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:GetY2()
            end
        end 
    */
    action GetY2() returns number
        return me:y2
    end
    
    /*
    This action returns the starting and ending coordinate positions of the line
    as text, in ordered pair form (x, y).

    Attribute: Returns Returns the starting and ending coordinate positions of the line
    as text.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Line line
                output line:ToText()
            end
        end
    */
    action ToText() returns text
        text r = ""
        r = "(" + x1 + ", " + y1 + "), (" + x2 + ", " + y2 + "), "
        return r
    end
end