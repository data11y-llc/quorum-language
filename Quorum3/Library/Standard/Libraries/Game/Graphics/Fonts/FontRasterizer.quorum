package Libraries.Game.Graphics.Fonts

use Libraries.Game.Graphics.PixelMap
use Libraries.Containers.Array
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Format
use Libraries.Compute.Math
use Libraries.Game.Graphics.Fonts.all

/*
The FontRasterizer class is used to rasterize characters. This means creating
a character's outline, filling it in, and saving the drawable for display, scaled
to the desired size.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game
    use Libraries.Game.Graphics.Color
    use Libraries.System.File

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            FontFileReader fileReader
            File file
            // This is the working directory for fonts on Mac
            file:SetWorkingDirectory("/Library/Fonts")
            file:SetPath("Arial.ttf")
            fileReader:Load(file)
            TrueTypeFileInformation fileInformation = fileReader:GetFileInformation()
            FontRasterizer fontRasterizer
            Color color
            BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints("a")
            FontDrawable fontDrawable = fontRasterizer:DrawGlyph(glyphOutline, 0, 0, color, fileInformation) 
        end
    end
*/
class FontRasterizer 
    /*Size of a pixel on the display.*/
    integer pixelSize = 14  // pixel size differs based on resolution, may have to change this
    /*Size of the EM Square.*/
    integer emSize = 2048  //2048 is standard in TrueType
    /*Dots per inch on the x-axis.*/
    integer xDotsPerInch = 96
    /*Dots per inch on the y-axis.*/
    integer yDotsPerInch = 96
    /*Maximum height of the pixelmap.*/
    integer maximumSizeYAxis = 40
    /*Maximum width of the pixelmap.*/
    integer maximumSizeXAxis = 40
    private integer int = 1337
    /*Leftmost coordinate position, on the x-axis, of the pixelmap.*/
    integer xMinimum = int:GetMaximumValue()
    /*Rightmost coordinate position, on the x-axis, of the pixelmap.*/
    integer xMaximum = int:GetMinimumValue()
    /*Lowermost coordinate position, on the y-axis, of the pixelmap.*/
    integer yMinimum = int:GetMaximumValue()
    /*Uppermost coordinate position, on the y-axis, of the pixelmap.*/
    integer yMaximum = int:GetMinimumValue()

    /*
    This action calculates and returns a scaled coordinate position of a coordinate, based
    on the font and screen size.

    Attribute: Parameter coordinate The coordinate to scale.

    Attribute: Parameter pixelSize The font size.

    Attribute: Parameter emSize The size of the EM Square.

    Attribute: Returns Returns the scaled coordinate position of a coordinate.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer rasterizer
                output rasterizer:CalculateScaledCoordinate(10000, 12, 2048)
            end
        end
    */
    action CalculateScaledCoordinate(integer coordinate, integer pixelSize, integer emSize) returns integer
        return coordinate * pixelSize / emSize
    end

    /* 
    This action calculates the height of the glyph.
    */
    private action CalculateGlyphHeight(Array<Line> lines, Array<number> maximums) returns number
        number lowestPoint = 0
        number highestPoint = 0
        Math math

        if lines:GetSize() > 0
            Line line = lines:Get(0)
            lowestPoint = line:GetY1()
            highestPoint = line:GetY2()
        end
         
        integer i = 0
        repeat while i < lines:GetSize()
            Line line = lines:Get(i)
            if line:GetY1() < lowestPoint
                lowestPoint = line:GetY1()
            elseif line:GetY2() < lowestPoint
                lowestPoint = line:GetY2()
            end
    
            if line:GetY1() > highestPoint
                highestPoint = line:GetY1()
            elseif line:GetY2() > highestPoint
                highestPoint = line:GetY2()
            end
            i = i + 1
        end    
        
        number height = math:AbsoluteValue(lowestPoint - highestPoint)
        maximums:Add(0, lowestPoint)
        maximums:Add(1, highestPoint)
        return height
    end

    /*
    This action calculates the width of the glyph.
    */
    private action CalculateGlyphWidth(Array<Line> lines) returns number
        number leftPoint = 0
        number rightPoint = 0
        Math math

        if lines:GetSize() > 0
            Line line = lines:Get(0)
            leftPoint = line:GetX1()
            rightPoint = line:GetX2()
        end

        integer i = 0
        repeat while i < lines:GetSize()
            Line line = lines:Get(i)
            if line:GetX1() < leftPoint
                leftPoint = line:GetX1()
            elseif line:GetX2() < leftPoint
                leftPoint = line:GetX2()
            end

            if line:GetX1() > rightPoint
                rightPoint = line:GetX1()
            elseif line:GetX2() > rightPoint
                rightPoint = line:GetX2()
            end
            i = i + 1
        end
        number width = math:AbsoluteValue(leftPoint - rightPoint) + 20 // arbitrary addition to fix characters being cut off, not sure what to add here
        return width
    end

    /*
    This action creates a pixel map of the character so that it may be drawn to
    the screen. It returns a FontDrawable which contains this pixel map, as well
    as information pertaining to the glyph.

    Attribute: Parameter outline The Bezier curve glyph points of the character to draw.

    Attribute: Parameter offsetx The horizontal offset to use when calculating points.

    Attribute: Parameter offsety The vertical offset to use when calculating points.

    Attribute: Parameter color The color to draw the character in.

    Attribute: Parameter information The TrueTypeFileInformation for the font.

    Attribute: Returns Returns a FontDrawable of the character, including its pixelmap.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Game.Graphics.Color
        use Libraries.System.File

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontFileReader fileReader
                File file
                // This is the working directory for fonts on Mac
                file:SetWorkingDirectory("/Library/Fonts")
                file:SetPath("Arial.ttf")
                fileReader:Load(file)
                TrueTypeFileInformation fileInformation = fileReader:GetFileInformation()
                FontRasterizer fontRasterizer
                Color color
                BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints("a")
                FontDrawable fontDrawable = fontRasterizer:DrawGlyph(glyphOutline, 0, 0, color, fileInformation) 
            end
        end
    */
    action DrawGlyph(BezierCurveGlyphPoints outline, integer offsetx, integer offsety, Color color, TrueTypeFileInformation information) returns FontDrawable
        FontBoundingBox box = outline:GetBoundingBox()
        integer highPoint = CalculateScaledCoordinate(box:GetYMaximum(), pixelSize, information:GetUnitsPerEm()) + 1
        integer lowPoint = CalculateScaledCoordinate(box:GetYMinimum(), pixelSize, information:GetUnitsPerEm()) -1

        output "Inside FontRasterizer, outline has points: "
        outline:DisplayCoordinates()

        Format format = SetupFormat()
        Array<Line> linesToDraw = GetLinesToDraw(outline, emSize)
        Array<number> maximums
        number height = CalculateGlyphHeight(linesToDraw, maximums) + 1
        number heightFromBaseline = highPoint
        PixelMap pixelmap = SetupPixelMap(maximumSizeYAxis, height, format)     // at some point, change the maximumSizeYAxis to use the value calculated by the width function

        pixelmap = RenderAntiAliasedOutline(offsetx, offsety, pixelmap, outline, emSize, color, false, maximums)  // draws the glyph outline
        //pixelmap = RenderRasterizedGlyph(offsetx, offsety, pixelmap, outline, color, linesToDraw, maximums) // fills in the glyphs
        
        Texture tex
        tex:FinishLoadingAsynchronously(undefined, pixelmap, format, false, undefined)
        Drawable d
        d:Load(tex)

        FontDrawable glyph
        glyph:SetDrawable(d)
        glyph:SetXMaximum(xMaximum)
        glyph:SetYMaximum(yMaximum)
        glyph:SetXMinimum(xMinimum)
        glyph:SetYMinimum(yMinimum)
        glyph:SetHeightFromBaseline(heightFromBaseline)

        return glyph
    end

    /*
    This action fills in the glyphs, based on the outline. It scans line by line
    on the y-axis, and when it enters a glyph outline it starts drawing, and it
    stops once it exits a glyph outline. It then returns the pixelmap of a
    character.

    Attribute: Parameter offsetx The horizontal offset to use when calculating points.

    Attribute: Parameter offsety The vertical offset to use when calculating points.

    Attribute: Parameter pixelmap The pixelmap to draw the character to.

    Attribute: Parameter outline The Bezier curve glyph points of the character.

    Attribute: Parameter color The color to draw the character.
    
    Attribute: Parameter linesToDraw An array of all the lines to draw for the character.

    Attribute: Parameter maximums An array containing the maximum values of the glyph,
    including its highest y-axis coordinate position and its rightmost x-axis
    coordinate position.

    Attribute: Returns Returns a pixelmap of the character.
    */
    private action RenderRasterizedGlyph(integer offsetx, integer offsety, PixelMap pixelmap, BezierCurveGlyphPoints outline, Color color, Array<Line> linesToDraw, Array<integer> maximums) returns PixelMap
        integer lowerX = 0
        integer lowerY = 0
        integer upperX = pixelmap:GetWidth()
        integer upperY = pixelmap:GetHeight()
        Math math
        offsety = math:AbsoluteValue(upperY-maximums:Get(1)-1)

        integer i = 0
        repeat while i < linesToDraw:GetSize()
            Line line = linesToDraw:Get(i)

            //pixelmap:DrawLine(line:GetX1() + offsetx, line:GetY1() - offsety, line:GetX2()+ offsetx, line:GetY2() - offsety, color)
           
            i = i + 1
        end
        return pixelmap
    end

    /*
        Renders the outline used for rasterizing the glyph

        Can be used to debug when debug is set to true (shows differently colored outlines) or
        to add antialiasing to the glyph
    */
    private action RenderAntiAliasedOutline(integer offsetx, integer offsety, PixelMap pixelmap, BezierCurveGlyphPoints outline, integer unitsPerEM, Color color, boolean debug, Array<integer> maximums) returns PixelMap
        integer lowerX = 0
        integer lowerY = 0
        integer upperX = pixelmap:GetWidth()
        integer upperY = pixelmap:GetHeight()
        Math math
        offsety = math:AbsoluteValue(upperY-maximums:Get(1)-1)

        GlyphProfile profiles = CreateAntiAliasedGlyphProfile(outline, unitsPerEM)

        HashTable<integer, CoordinateContainer> value = profiles:GetXIntercepts()
        Iterator<integer> iterator = value:GetKeyIterator()
        repeat while iterator:HasNext() 
            integer key = iterator:Next()
            if key > yMaximum 
                yMaximum = key
            end
            
            if key < yMinimum
                yMinimum = key
            end
            
            CoordinateContainer v = value:GetValue(key)

            integer i = 0
            repeat while i < v:GetSize()
                XCoordinateList xc = v:Get(i)
                integer j = 0
                repeat while j < xc:GetSize()
                    PixelIntersection currentX = xc:Get(j)
                    if currentX:GetXPosition() > xMaximum
                        xMaximum = currentX:GetXPosition()
                    end
                    if currentX:GetXPosition() < xMinimum
                        xMinimum = currentX:GetXPosition()
                    end
                    if debug
                        if xc:GetNonzero() < 0
                            pixelmap:SetPixel(currentX:GetXPosition()+offsetx, key-offsety, color:Teal())   // teal is negative
                        end
                        if xc:GetNonzero() > 0 
                            pixelmap:SetPixel(currentX:GetXPosition()+offsetx, key-offsety, color:Blue())   // blue is positive
                        end
                        if xc:GetNonzero() = 0
                            pixelmap:SetPixel(currentX:GetXPosition()+offsetx, key-offsety, color:Red())    // red is 0
                        end
                    else
                        Color individualColor 
                        individualColor:CopyColor(color)
                        individualColor:SetAlpha(currentX:GetIntensity())
                        pixelmap:SetPixel(xc:Get(j):GetXPosition()+offsetx, key-offsety, individualColor)  
                    end
                    j = j +1
                end
                i = i + 1
            end

        end
        return pixelmap
    end

    /* 
        Renders actual outline as contained in font file
    */
    private action RenderGlyphOutline(integer offsetx, integer offsety,PixelMap pixelmap, BezierCurveGlyphPoints outline, TrueTypeFileInformation file) returns PixelMap
        
        Array<CoordinateVector> vectorArray = outline:GetPoints()
        
        FontBoundingBox boundingBox = outline:GetBoundingBox()
        Color color

        number yCoord = -1
        number xCoord = -1

        Array<integer> endpoints = outline:GetContourEndpoints()
        integer contour = 0
        repeat while contour < endpoints:GetSize()
            integer endpoint = endpoints:Get(contour)
            integer lastEndpoint = 0
            integer i = 0
            if contour > 0
                lastEndpoint = endpoints:Get(contour-1)
                i = 0 + lastEndpoint + 1
            end
            

            repeat while i <= endpoint
                CoordinateVector tempVec = vectorArray:Get(i)

                xCoord = CalculateCoordinate (tempVec:GetX(), pixelSize, file:GetUnitsPerEm(), 0) +offsetx
                yCoord = CalculateCoordinate (tempVec:GetY(), pixelSize, file:GetUnitsPerEm(), maximumSizeYAxis) -offsety

                CoordinateVector nextPoint = NextPoint(i, contour, vectorArray, endpoints)
                number xNext = CalculateCoordinate (nextPoint:GetX(), pixelSize, file:GetUnitsPerEm(), 0) +offsetx
                number yNext = CalculateCoordinate (nextPoint:GetY(), pixelSize, file:GetUnitsPerEm(), maximumSizeYAxis) -offsety
                if not tempVec:IsOnCurve() and nextPoint:IsOnCurve()
                    // quadratic curve
                    CoordinateVector lastPoint = PreviousPoint(vectorArray, i)

                    number xPast = CalculateCoordinate (lastPoint:GetX(), pixelSize, file:GetUnitsPerEm(), 0) +offsetx
                    number yPast = CalculateCoordinate (lastPoint:GetY(), pixelSize, file:GetUnitsPerEm(), maximumSizeYAxis) -offsety
                    // xPast/yPast are start points of the curve, xCoord/yCoord are control points of the curve, xNext/yNext are end points of the curve
                    DrawFlatCurve(pixelmap, xPast, yPast, xCoord, yCoord, xNext, yNext)


                elseif not tempVec:IsOnCurve() and not nextPoint:IsOnCurve()
                    alert( "This shouldn't be happening, two points not on curve")
                    // this shouldn't happen because this should be handled while reading the data from file (fill in one point)
                elseif tempVec:IsOnCurve() and nextPoint:IsOnCurve()
                    // straight line case
                    //pixelmap:DrawLine(xCoord, yCoord, xNext, yNext, color:Yellow())            
                end

                i = i + 1
            end

            contour = contour + 1
        end

        return pixelmap
    end

    /*
        called by RenderGlyphOutline (non-anti-aliasing) action to calculate 
        <x, y> coordinate with respect to screen size 
    */
    private action CalculateCoordinate(number gridCoordinate, integer pixelSize, integer emSize, integer screenSize) returns number 
        if screenSize = 0
           return gridCoordinate * pixelSize / emSize
        end
        return screenSize - gridCoordinate * pixelSize / emSize
    end

    /*
        returns next point on contour relative to last
    */
    private action NextPoint(integer i, integer contour, Array<CoordinateVector> vectorArray, Array<integer> endpoints) returns CoordinateVector        
        if endpoints:Get(contour) = i and contour > 0   
            integer value = 0
            value = endpoints:Get(contour-1)
            value = value + 1
            return vectorArray:Get(value)
        elseif endpoints:Get(contour) = i and contour = 0
            return vectorArray:Get(0)
        end
        return vectorArray:Get(i+1)
    end
    
    /* This may be the new function to implement de Casteljau's algorithm
    General idea:
        create an array
        get the midpoints of the line
        check if the line is curved enough
        if it is, add the points to the array
            otherwise, recursively subdivide the line until it is curved enough
        TODO: Seems like this may be recursing too much in some cases. Set limit?    
    */
    private action FlatCurveAlgorithm(number startX, number startY, number controlX, number controlY, number endX, number endY, Array<CoordinateVector> vals, integer recursionLimit)
        Math absoluteValue

        if(recursionLimit < 50)
            // Midpoints of the lines between start/end and control points
            number xStartToxControlMid = (startX + controlX) / 2
            number yStartToyControlMid = (startY + controlY) / 2
            number xControlToxEndMid = (controlX + endX) / 2
            number yControlToyEndMid = (controlY + endY) / 2
            number xMidToxMid = (xStartToxControlMid + xControlToxEndMid) /2
            number yMidToyMid = (yStartToyControlMid + yControlToyEndMid) /2

            number dx = endX-startX
            number dy = endY-startY
            number d = absoluteValue:AbsoluteValue(((controlX-endX)*dy-(controlY-endY)*dx))

            // need to add end points to the array
            if(d*d <= (dx*dx + dy*dy))
                CoordinateVector vector
                vector:SetX(cast(integer, endX))
                vector:SetY(cast(integer, endY))
                vals:Add(vector)
            else
                FlatCurveAlgorithm(startX, startY, xStartToxControlMid, yStartToyControlMid, xMidToxMid, yMidToyMid, vals, recursionLimit + 1)
                FlatCurveAlgorithm(xMidToxMid, yMidToyMid, xControlToxEndMid, yControlToyEndMid, endX, endY, vals, recursionLimit + 1)
            end
        end
    end

    /*
    This action gets the lines to draw to fill in the glyph. Each y-axis line
    on the monitor scans horizontally and finds where it intersects with the
    outline, turning the line on/off based on the outline.
    */
    private action GetLinesToDraw(BezierCurveGlyphPoints outline, integer unitsPerEM) returns Array<Line>
        GlyphProfile profile = CreateAntiAliasedGlyphProfile(outline, unitsPerEM)

        Array<Line> linesToDraw

        integer ypixel = 0
        Iterator<integer> ite = profile:GetKeyIterator()
        repeat while ite:HasNext()
            ypixel = ite:Next()

            if profile:HasY(ypixel)
                CoordinateContainer matches = profile:GetXInterceptAtY(ypixel)
                integer nonzerorule = 0
                integer i = 0
                repeat while i < matches:GetSize()

                    XCoordinateList current = matches:Get(i)
                    XCoordinateList next
                   
                    if current:GetNonzero() = 0
                        Line l
                        l:SetPoint1(current:Get(0):GetXPosition(), ypixel)    // REMOVE THE +1 AND -1 FROM THE X COORDINATES, POSSIBLY (add them back?)
                        l:SetPoint2(current:GetLast():GetXPosition(), ypixel)
                        linesToDraw:Add(l)
                    end

                    nonzerorule = nonzerorule + current:GetNonzero()

                    if not (nonzerorule = 0)
                        Line l

                        l:SetPoint1(current:Get(0):GetXPosition()+1, ypixel) // first in list because left side
                        if not (matches:GetSize() <= i + 1)
                            next = matches:Get(i+1)

                            l:SetPoint2(next:GetLast():GetXPosition()-1, ypixel) //last in list because right side
                            linesToDraw:Add(l)
                        end
                    end

                    i = i + 1
                end
            end
        end
        return linesToDraw
    end

    /*
    This action creates the anti-aliased outline for the glyph. Not currently
    anti-aliasing.
    */
    private action CreateAntiAliasedGlyphProfile(BezierCurveGlyphPoints outline, integer unitsPerEM) returns GlyphProfile
        GlyphProfile profile
        Array<Line> lines

        if outline:GetCompoundGlyph()
            lines = FlattenCompoundOutline(outline)
        else
            lines = FlattenOutline(outline) // this currently has some erroneous lines, such as from (0, 0) to (0, 0). Removing doesn't seem to fix anything, though.
        end
        integer oldNonZero = 1

        integer i = 0
        repeat while i < lines:GetSize() and lines:GetSize() < 10000
            Line line = lines:Get(i)

            //HashTable<integer, XCoordinateList> xintercepts = line:BresenhamLineAlgorithm(line:GetX1(), line:GetY1(), line:GetX2(), line:GetY2())
            HashTable<integer, XCoordinateList> xintercepts = line:GetXInterceptsNumber(pixelSize, pixelSize, unitsPerEM, maximumSizeYAxis, oldNonZero)   
            Iterator<integer> keyiterator = xintercepts:GetKeyIterator()
            repeat while keyiterator:HasNext()
                integer key = keyiterator:Next()
                XCoordinateList value = xintercepts:GetValue(key)
                boolean test = profile:AddCoordinatesAt(key, value)
                oldNonZero = xintercepts:GetValue(key):GetNonzero()
            end

            i = i + 1
        end
        return profile
    end

    /*
    This action takes the glyph outline for compound glyphs and "flattens" it to make
    drawing easier and more efficient.
    */
    private action FlattenCompoundOutline (BezierCurveGlyphPoints outline) returns Array<Line>
        Array<Line> lines
        integer i = 0
        Array<Array<integer>> compoundEndpoints = outline:GetCompoundEndpoints()
        Array<Array<CoordinateVector>> compoundPoints = outline:GetCompoundPoints()

        repeat while i < compoundEndpoints:GetSize()
            Array<CoordinateVector> vectorArray = compoundPoints:Get(i)

            Array<integer> endpoints = compoundEndpoints:Get(i)
            integer contour = 0
            repeat while contour < endpoints:GetSize()
                integer endpoint = endpoints:Get(contour)
                integer lastEndpoint = 0
                integer j = 0
                if contour > 0
                    lastEndpoint = endpoints:Get(contour-1)
                    j = 0 + lastEndpoint + 1
                end

                repeat while j <= endpoint
                    CoordinateVector tempVec = vectorArray:Get(j)

                    xCoord = tempVec:GetX()
                    yCoord = tempVec:GetY()

                    CoordinateVector nextPoint = NextPoint(j, contour, vectorArray, endpoints)
                    xNext = nextPoint:GetX()
                    yNext = nextPoint:GetY()

                    if not tempVec:IsOnCurve() and nextPoint:IsOnCurve()
                        // quadratic curve
                        CoordinateVector lastPoint = PreviousPoint(vectorArray, j)

                        number xPast = lastPoint:GetX()
                        number yPast = lastPoint:GetY()
                        AddAll(lines, GetFlatCurve(xPast, yPast, xCoord, yCoord, xNext, yNext))

                    elseif not tempVec:IsOnCurve() and not nextPoint:IsOnCurve()
                        // this shouldn't happen because this should be handled while reading the data from file (fill in one point)
                    elseif tempVec:IsOnCurve() and nextPoint:IsOnCurve()
                        // straight line case
                        Line l
                        l:SetPoint1(xCoord, yCoord)
                        l:SetPoint2(xNext, yNext)
                        lines:Add(l)
                    end
                    j = j + 1
                end
                contour = contour + 1
            end            
            i = i + 1
        end

        return lines
    end

    /*
    This action takes the glyph outline and "flattens" it to make drawing easier
    and more efficient.
    */
    private action FlattenOutline (BezierCurveGlyphPoints outline) returns Array<Line>
        Array<Line> lines
        
        Array<CoordinateVector> vectorArray = outline:GetPoints()

        Array<integer> endpoints = outline:GetContourEndpoints()
        integer contour = 0
        repeat while contour < endpoints:GetSize()
            integer endpoint = endpoints:Get(contour)
            integer lastEndpoint = 0
            integer i = 0
            if contour > 0
                lastEndpoint = endpoints:Get(contour-1)
                i = 0 + lastEndpoint + 1
            end
            
            repeat while i <= endpoint
                CoordinateVector tempVec = vectorArray:Get(i)

                xCoord = tempVec:GetX()
                yCoord = tempVec:GetY()

                CoordinateVector nextPoint = NextPoint(i, contour, vectorArray, endpoints)
                xNext = nextPoint:GetX()
                yNext = nextPoint:GetY()

                if not tempVec:IsOnCurve() and nextPoint:IsOnCurve()
                    // quadratic curve
                    CoordinateVector lastPoint = PreviousPoint(vectorArray, i)

                    number xPast = lastPoint:GetX()
                    number yPast = lastPoint:GetY()
                    AddAll(lines, GetFlatCurve(xPast, yPast, xCoord, yCoord, xNext, yNext))

                elseif not tempVec:IsOnCurve() and not nextPoint:IsOnCurve()
                    // this shouldn't happen because this should be handled while reading the data from file (fill in one point)
                elseif tempVec:IsOnCurve() and nextPoint:IsOnCurve()
                    // straight line case
                    Line l
                    l:SetPoint1(xCoord, yCoord)
                    l:SetPoint2(xNext, yNext)
                    lines:Add(l)
                end
                i = i + 1
            end
            contour = contour + 1
        end
        return lines
    end
    
    /*
    Helper function to add all the lines from one array to another.
    */
    private action AddAll(Array<Line> original, Array<Line> toAdd)
        integer i = 0
        repeat while i < toAdd:GetSize() 
            original:Add(toAdd:Get(i))
            i = i + 1 
        end
    end

    /*
    This action takes a curve and flattens it, breaking it into several smaller
    line segments if necessary.
    */
    private action GetFlatCurve(number x1, number y1, number x2, number y2, number x3, number y3) returns Array<Line>
        Array<CoordinateVector> vals
        FlatCurveAlgorithm(x1, y1, x2, y2, x3, y3, vals, 0)
        Array<Line> lines
    
        Line l0
        l0:SetPoint1(x1,y1)
        l0:SetPoint2(vals:Get(0):GetX(), vals:Get(0):GetY())
        lines:Add(l0)

        integer i = 0
        repeat while i < vals:GetSize()
            number xCoord = vals:Get(i):GetX()
            number yCoord = vals:Get(i):GetY()
            
            number xNext = -1
            number yNext = -1

            if i < vals:GetSize() - 1
                CoordinateVector next = vals:Get(i+1)
                xNext = next:GetX()
                yNext = next:GetY()
            else 
                xNext = x3
                yNext = y3
            end

            Line l
            l:SetPoint1(xCoord,yCoord)
            l:SetPoint2(xNext, yNext)
            lines:Add(l)
        
            i = i + 1 
        end 
        return lines
    end

    /*
    This action draws the flattened curves to the pixelmap.
    */
    private action DrawFlatCurve(PixelMap pixelmap, number x1, number y1, number x2, number y2, number x3, number y3)
        Array<CoordinateVector> vals
        FlatCurveAlgorithm(x1, y1, x2, y2, x3, y3, vals, 0)
        Color color
        //pixelmap:DrawLine(x1, y1, vals:Get(0):GetX(), vals:Get(0):GetY(), color:Yellow())

        integer i = 0
        repeat while i < vals:GetSize()
            number xCoord = vals:Get(i):GetX()
            number yCoord = vals:Get(i):GetY()
            
            number xNext = -1
            number yNext = -1

            if i < vals:GetSize() - 1
                CoordinateVector next = vals:Get(i+1)
                xNext = next:GetX()
                yNext = next:GetY()
            else 
                xNext = x3
                yNext = y3
            end

            //pixelmap:DrawLine(xCoord, yCoord, xNext, yNext, color:Yellow())
        
            i = i + 1 
        end
    end
    
    /*
    This action takes Bezier control points and calculates points along the curve
    based on them.
    */
    private action BezierCoordinate(number t, integer c1, integer c2, integer c3) returns number
        number tSq = t * t
        number mt = 1 - t
        number mtSq = mt * mt
        return c1 * mtSq + c2 * 2 * mt * t + c3 * tSq
    end

    /*
    This action returns the previous point on the curve.
    */  
    private action PreviousPoint(Array<CoordinateVector> array, integer i) returns CoordinateVector
        if i = 0
            return array:Get(array:GetSize()-1)
        end

        return array:Get(i-1)
    end

    /*
    This action returns the next point on the curve.
    */
    private action NextPoint (Array<CoordinateVector> array, integer i) returns CoordinateVector
        if i = array:GetSize()-1
            return array:Get(0)
        end

        return array:Get(i+1)
    end

    /*
    This action initializes the pixel map used for the glyph.
    */  
    private action SetupPixelMap(number width, number height, Format format) returns PixelMap
        Color color
        PixelMap map

        map:SetColor(color:Black())
        map:CreatePixelMap(cast(integer, width), cast(integer, height), format)
        //map:FillRectangle(0, 0, width, height, color:CustomColor(1, 1, 1, 0.2))   // used for debugging to see the size of the pixelmap

        return map
    end
    
    /*
    This action initializes the format used for the pixel map.
    */
    private action SetupFormat() returns Format
        Format format
        format:SetValue(format:RGBA8888)
        return format
    end

    /*
    This action sets the EM size of the font.

    Attribute: Parameter emSize EM size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                fontRasterizer:SetEmSize(2048)
            end
        end
    */
    action SetEmSize(integer emSize) 
        me:emSize = emSize
    end

    /*
    This action returns the EM size of the font.

    Attribute: Returns Returns the EM size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                output fontRasterizer:GetEmSize()
            end
        end
    */
    action GetEmSize() returns integer
        return me:emSize
    end

    /*
    This action sets the maximum distance between two points of the glyph, on
    the y-axis.

    Attribute: Parameter maxSizeY The maximum distance between two points of the
    glyph, on the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                fontRasterizer:SetMaxYSize(48)
            end
        end
    */
    action SetMaxYSize(integer maxSizeY)
        me:maximumSizeYAxis = maxSizeY
    end
    
    /*
    This action returns the maximum distance between two points of the glyph, on
    the y-axis.

    Attribute: Returns Returns the maximum distance between two points of the glyph,
    on the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                output fontRasterizer:GetMaxYSize()
            end
        end
    */
    action GetMaxYSize() returns integer
        return me:maximumSizeYAxis
    end

    /*
    This action sets the maximum distance between two points of the glyph, on
    the x-axis.

    Attribute: Parameter maxSizeX The maximum distance between two points of the
    glyph, on the x-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                fontRasterizer:SetMaxXSize(48)
            end
        end
    */
    action SetMaxXSize(integer maxSizeX)
        me:maximumSizeXAxis = maxSizeX
    end
   
    /*
    This action returns the maximum distance between two points of the glyph, on
    the x-axis.

    Attribute: Returns Returns the maximum distance between two points of the glyph,
    on the x-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                output fontRasterizer:GetMaxXSize()
            end
        end
    */
    action GetMaxXSize() returns integer
        return me:maximumSizeXAxis
    end

    /*
    This action sets the dots per inch along the x-axis of the display.

    Attribute: Parameter xDPI The dots per inch along the x-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                fontRasterizer:SetXDotsPerInch(96)
            end
        end 
    */
    action SetXDotsPerInch (integer xDPI)
        me:xDotsPerInch = xDPI
    end

    /*
    This action returns the dots per inch along the x-axis of the display.

    Attribute: Returns Returns the dots per inch along the x-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame
                FontRasterizer fontRasterizer
                output fontRasterizer:GetXDotsPerInch()
            end
        end
    */
    action GetXDotsPerInch() returns  integer
        return me:xDotsPerInch
    end

    /*
    This action sets the dots per inch along the y-axis of the display.

    Attribute: Parameter yDPI The dots per inch along the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                fontRasterizer:SetYDotsPerInch(96)
            end
        end 
    */
    action SetYDotsPerInch (integer yDPI)
        me:yDotsPerInch = yDPI
    end

    /*
    This action returns the dots per inch along the y-axis of the display.

    Attribute: Returns Returns the dots per inch along the y-axis.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame
                FontRasterizer fontRasterizer
                output fontRasterizer:GetYDotsPerInch()
            end
        end
    */
    action GetYDotsPerInch () returns integer
        return me:yDotsPerInch
    end

    /*
    This action sets the pixel size, maximum distance between two points on the
    x-axis and maximum distance between two points on the y-axis for a glyph.

    Attribute: Parameter size The pixel size of the glyph, also used to calculate
    the maximum distance between two points on both axes.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                FontRasterizer fontRasterizer
                fontRasterizer:SetSize(14)
            end
        end
    */
    action SetSize(integer size)
       me:pixelSize = size  
       me:maximumSizeXAxis = cast(integer, 2*size)
       me:maximumSizeYAxis = cast(integer, 1.5*size)
    end

    /*
    This action returns the pixel size of the glyph.

    Attribute: Returns Returns the pixel size of the glyph.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end
            
            action CreateGame
                FontRasterizer fontRasterizer
                output fontRasterizer:GetSize()
            end
        end
    */
    action GetSize returns integer
        return me:pixelSize
    end

    /*
    This action sets the point size used for the glyph, such as 12 point font.

    Attribute: Parameter pointSize The point size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame()
                FontRasterizer fontRasterizer
                fontRasterizer:SetPointSize(12)
            end
        end
    */
    action SetPointSize(integer pointSize) 
       SetSize(cast(integer,(pointSize*yDotsPerInch)/72))
    end
end