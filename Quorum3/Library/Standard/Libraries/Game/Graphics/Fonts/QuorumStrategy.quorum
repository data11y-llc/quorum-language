package Libraries.Game.Graphics.Fonts

use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Array
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Compute.Math
use Libraries.Game.Graphics.Fonts.all

/*
The QuorumStrategy class is used to load fonts on the system using the QuorumFont
font engine.

Attribute: Example
    
    use Libraries.Game.Graphics.Font
    use Libraries.Game.Graphics.Label
    use Libraries.Game.Game

    class Main is Game
        action Main
            StartGame()
        end

        action CreateGame
            Font font
            Label label
            if not font:FontIsAvailable("Verdana")
                output "The font could not be found!"
                return now
            end
            font:LoadFont("Verdana")
            font:SetSize(18)
            label:SetFont(font)
            Add(label)
        end
    end
*/
class QuorumStrategy is FontStrategy
    private integer size = 14
    private number angle = 0
    private boolean initialized = false
    private boolean subFontInitialized = false
    private HashTable<text, Glyph> glyphTable
    // ^ use character map instead of makeshift glyph table?
    private KerningTable kerningTable

    private FontFileReader fileReader
    private TrueTypeFileInformation fileInformation
    private FontRasterizer fontRasterizer
    private Color color

    private integer fontHeight = 0
    private integer lineHeight = 0
    private integer fontWidth = 0
    private integer fontEmSize = 0
    private integer fontMaximumX = 0
    private integer fontMaximumY = 0
    private integer fontMinimumX = 0
    private integer fontMinimumY = 0

    // These are indecies into the dataArray for ttc files
    // They are used to reference some common font styles when switching between them
    private integer regular = -1
    private integer plain = -1
    private integer medium = -1
    private integer heavy = -1
    private integer light = -1
    private integer condensed = -1
    private integer book = -1
    private integer roman = -1
    private integer semibold = -1
    private integer bold = -1
    private integer italic = -1
    private integer boldItalic = -1

    // TTC files contain several font tables in them. This array stores
    // indecies that are used to access these subtables. For example, if a ttc
    // file has Regular, Bold, and Italic fonts, this will contain 3 items that
    // contain the indecies needed to get the glyphs corresponding to the desired
    // font style.
    private Array<TrueTypeCollectionData> dataArray

    private text style = ""

    on create
        Color color
        color = color:Black()
        SetColor(color)
    end

    /*
    This action sets the style of font to use, such as bold, italic, condensed,
    and so on. This is only applicable to TrueTypeCollection (.ttc) files.

    Attribute: Parameter newStyle The style of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:SetStyle("Bold")
                font:LoadFont(file)
            end
        end
    */
    action SetStyle(text newStyle)
        style = newStyle
    end

    /*
    This action loads a font from a given font file.

    Attribute: Parameter fontFile The font file to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
            end
        end
    */
    action LoadFont(File fontFile)
        if initialized
            Dispose()
            EmptyGlyphTable()
        end

        fileReader:Load(fontFile)
        fileInformation = fileReader:GetFileInformation()
        kerningTable = fileReader:GetKerningTable()

        if fileInformation:GetTrueTypeCollectionFlag() = true
            LoadSubFont()
        end

        SetFontDimensions()
        initialized = true
    end

    // When loading a font file and it is in .ttc format, we need to pick the
    // style of font (regular, bold, etc.) to load. This checks the file for
    // the style set by the user. If the style was not set, or the style set is not
    // in the file, it goes through some default options and tries those. Finally,
    // if none of the default options are part of the font file, it just loads
    // the first font that was found in the file. It also scans the font file
    // for common fonts and sets indecies to them for later use if changing the
    // style. 
    private action LoadSubFont()
        subFontInitialized = true
        TrueTypeCollectionRecords trueTypeTable = fileInformation:GetTrueTypeCollectionRecords()
        dataArray = trueTypeTable:GetCollectionTables()
        boolean styleFound = false

        integer j = 0
        repeat while j < dataArray:GetSize() and styleFound = false
            TrueTypeCollectionData data = dataArray:Get(j)
            Array<NameRecord> records = data:GetNameRecords()

            integer i = 0
            repeat while i < records:GetSize() and styleFound = false
                NameRecord record = records:Get(i)
                text name = record:GetFontStyleName()
                if name:EqualsIgnoringCase(style)
                    fileInformation:SetAllTrueTypeInformation(data)
                    styleFound = true
                elseif name:EqualsIgnoringCase("regular")
                    regular = j
                elseif name:EqualsIgnoringCase("plain")
                    plain = j
                elseif name:EqualsIgnoringCase("medium")
                    medium = j
                elseif name:EqualsIgnoringCase("heavy")
                    heavy = j
                elseif name:EqualsIgnoringCase("light")
                    light = j
                elseif name:EqualsIgnoringCase("condensed")
                    condensed = j
                elseif name:EqualsIgnoringCase("book")
                    book = j
                elseif name:EqualsIgnoringCase("roman")
                    roman = j
                elseif name:EqualsIgnoringCase("semibold")
                    semibold = j
                elseif name:EqualsIgnoringCase("bold")
                    bold = j
                elseif name:EqualsIgnoringCase("italic")
                    italic = j
                elseif name:EqualsIgnoringCase("boldItalic")
                    boldItalic = j
                end
                i = i + 1
            end

            j = j + 1
        end

        if styleFound = false       // specified style was not found, try some defaults
            ChangeSubFont(style)
        end
    end


    /*
    This action changes the style of the font to the new style specified (such as
    bold, italic, condensed, and so on). This action only works both if the font
    file is a TrueTypeCollection (.ttc) file and if the file has already been loaded.
    If the file has not been loaded yet, use the SetStyle(text style) action to set
    the desired style and then load the font file.

    Attribute: Parameter newStyle The style of the font to change to.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                File file
                file:SetPath("CustomFont.ttf")
                font:LoadFont(file)
                font:ChangeSubFont("Italic")
            end
        end
    */
    action ChangeSubFont(text newStyle)
        TrueTypeCollectionData data
        boolean styleFound = false

        if subFontInitialized = true
            if style not= newStyle
                style = newStyle

                integer j = 0
                repeat while j < dataArray:GetSize() and styleFound = false
                    data = dataArray:Get(j)
                    Array<NameRecord> records = data:GetNameRecords()

                    integer i = 0
                    repeat while i < records:GetSize() and styleFound = false
                        NameRecord record = records:Get(i)
                        text name = record:GetFontStyleName()
                        if name:EqualsIgnoringCase(style)
                            fileInformation:SetAllTrueTypeInformation(data)
                            styleFound = true
                        end
                        i = i + 1
                    end
                    j = j + 1
                end
            end
        
            // style not found, try some defaults
            if styleFound = false
                if regular > -1
                    data = dataArray:Get(regular)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif plain > -1
                    data = dataArray:Get(plain)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif medium > -1
                    data = dataArray:Get(medium)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif heavy > -1
                    data = dataArray:Get(heavy)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif light > -1
                    data = dataArray:Get(light)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif condensed > -1
                    data = dataArray:Get(condensed)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif book > -1
                    data = dataArray:Get(book)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif roman > -1
                    data = dataArray:Get(roman)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif semibold > -1
                    data = dataArray:Get(semibold)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif bold > -1
                    data = dataArray:Get(bold)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif italic > -1
                    data = dataArray:Get(italic)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif boldItalic > -1
                    data = dataArray:Get(boldItalic)
                    fileInformation:SetAllTrueTypeInformation(data)
                else // no standard fonts, just load the first one from the file
                    data = dataArray:Get(0)
                    fileInformation:SetAllTrueTypeInformation(data)
                end
            end
        end    
    end

    /*
    This action will load a font by name from the system. On Windows, this will
    search for fonts in "C:\Windows\Fonts". On Mac, this will search for fonts
    in "/Library/Fonts". On Android, this will search for fonts in "/system/fonts".

    Attribute: Parameter fontName The name of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
            end
        end
    */
    action LoadFont(text fontName)

        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        elseif os:Contains("iOS Device")
            fontFile:SetWorkingDirectory("/System/Library/Fonts/Core")
        elseif os:Contains("Web Browser")
            fontFile:SetWorkingDirectory("fonts")
        else
            fontFile:SetWorkingDirectory("/system/fonts")
        end

        text fontPath = FindFontExtension(fontName)
        if fontPath = ""
            alert("No font file named " + fontName + " could be found on the system!")
        else
            fontFile:SetPath(fontPath)
            LoadFont(fontFile)
        end
    end

    private action FindFontExtension(text fontName) returns text
        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        elseif os:Contains("iOS Device")
            fontFile:SetWorkingDirectory("/System/Library/Fonts/Core")
        elseif os:Contains("Web Browser")
            if FontIsAvailable(fontName)
                return fontName + ".ttf"
            else 
                return ""
            end
        else
            fontFile:SetWorkingDirectory("/system/fonts/")
        end

        boolean success = false
        fontFile:SetPath(fontName + ".ttf")
        
        if fontFile:Exists()
           return fontName + ".ttf"
        else
            fontFile:SetPath(fontName + ".ttc")
            if fontFile:Exists()
                return fontName + ".ttc"
            else
                fontFile:SetPath(fontName + ".otf")
                if fontFile:Exists()
                    return fontName + ".otf"
                else
                    fontFile:SetPath(fontName + ".dfont")
                    if fontFile:Exists()
                        return fontName + ".dfont"
                    else
                        return ""
                    end
                end
            end
        end
    end

    /*
    This action will look in the default system font folder and look for a font
    of the given name. If a font is found with the same name, the action will
    return true. Otherwise, it returns false.

    Attribute: Parameter fontName The name of the font to check for on the system.

    Attribute: Returns Returns true if the font is on the system, and false otherwise.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                boolean hasFont = font:FontIsAvailable("Times New Roman")
            end
        end
    */
    action FontIsAvailable(text fontName) returns boolean
        text os = GetOS()
        if os:Contains("Web Browser")
            if fontName = "Roboto-Black"
                return true
            else 
                return false
            end
        else 
            if FindFontExtension(fontName) = ""
                return false
            else
                return true
            end
        end
    end

    /*
        This action sets the general dimensions of the font when the font file
        is loaded. All glyphs have these dimensions in common and include 
        em size, maximum and minimum x and y values, height, and width. 
        The action also updates the em size, MaxXSize, and MaxYSize in the class's
        font rasterizer variable.
    */
    private action SetFontDimensions
            fontEmSize = fileInformation:GetUnitsPerEm()
            fontRasterizer:SetEmSize(fontEmSize)
            
            fontMinimumX = Round(CalculateCoordinate(fileInformation:GetXMinimum():GetFontUnit(), size, fontEmSize, 0))
            fontMinimumY = Round(CalculateCoordinate(fileInformation:GetYMinimum():GetFontUnit(), size, fontEmSize, 0))
            fontMaximumX = Round(CalculateCoordinate(fileInformation:GetXMaximum():GetFontUnit(), size, fontEmSize, 0))
            fontMaximumY = Round(CalculateCoordinate(fileInformation:GetYMaximum():GetFontUnit(), size, fontEmSize, 0))

            fontHeight = fontMaximumY - fontMinimumY
            fontWidth = fontMaximumX - fontMinimumX
            
            fontRasterizer:SetMaxXSize(fontWidth)
            fontRasterizer:SetMaxYSize(fontHeight)
    end

    /*
    This action will set the size of the font. The default font size is 14.

    Attribute: Parameter newSize The size to change the font to.
    
    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetSize(16)
            end
        end
    */
    action SetSize (integer newSize)
        size = newSize
        textChanged = true
        if initialized
            fontRasterizer:SetSize(newSize)
            height = GetHeight()
            EmptyGlyphTable()
        end
    end

    /*
    This action will return the current size of the font. The default font size
    is 14.

    Attribute: Returns Returns the current size of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The default font size is " + font:GetSize()
            end
        end
    */
    action GetSize returns integer
        return size
    end

    /*
    This action will rotate the characters produced by this font by the given
    number of degrees. Note that this function is not yet implemented.

    Attribute: Parameter rotation The number of degrees to rotate the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:Rotate(45)
            end
        end
    */
    action Rotate(number rotation)
        SetAngle(angle + rotation)
    end

    /*
    This action will set the angle in degrees of the characters produced by this
    font. Note that this function is not yet implemented.

    Attribute: Parameter newAngle The number of degrees to angle the font by.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:SetAngle(90)
            end
        end
    */
    action SetAngle(number newAngle)

    end

    /*
    This action will set the color of the characters produced by this font.

    Attribute: Parameter newColor The color to use for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color
                font:SetColor(color:Orange())
            end
        end
    */
    action SetColor(Color newColor)
        me:color = newColor
        if initialized
            EmptyGlyphTable()
        end
    end

    /*
    This action will return the color of the characters produced by this font.

    Attribute: Returns The color being used by this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Color
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Color color = font:GetColor()
            end
        end
    */  
    action GetColor() returns Color
        return me:color
    end

    /*
    This action will return the current angle of the font. The default angle is
    0 degrees.

    Attribute: Returns Returns the current angle of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                output "The font has an angle of " + font:GetAngle() + " degrees."
            end
        end
    */
    action GetAngle returns number
        return angle
    end

    /*
    This action will release the resources used by a loaded font. The Font 
    object will no longer be usable until another font is loaded.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                font:Dispose()
            end
        end
    */
    private action Dispose
        initialized = false
    end

    /*
    This action will return a Glyph object for this font's representation of the
    given character. 

    Attribute: Parameter targetCharacter The character to create a glyph of.

    Attribute: Returns Returns a glyph representation of the character.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Graphics.Glyph
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                Glyph a = font:GetGlyph("a")
            end
        end
    */
    action GetGlyph(text targetCharacter) returns Glyph
        text character = targetCharacter:GetCharacter(0)
        if glyphTable:HasKey(character)
            return glyphTable:GetValue(character):CopyGlyph()
        else
            Math math
            BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints(character)
            // ^ change to read from fileInformation instead of fileReader 

            integer glyphMinimumX = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetXMinimum(), size, fontEmSize, 0))
            integer glyphMaximumX = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetXMaximum(), size, fontEmSize, 0))
            integer glyphMinimumY = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetYMinimum(), size, fontEmSize, 0))
            integer glyphMaximumY = Round(CalculateCoordinate(glyphOutline:GetBoundingBox():GetYMaximum(), size, fontEmSize, 0))

            integer scaledUpper = fontRasterizer:CalculateScaledCoordinate(fileInformation:GetMaximumAscent(), size, fileInformation:GetUnitsPerEm())
            integer scaledLower = fontRasterizer:CalculateScaledCoordinate(fileInformation:GetMaximumDescent(), size, fileInformation:GetUnitsPerEm())
            integer scaledLineGap = fontRasterizer:CalculateScaledCoordinate(fileInformation:GetLineGap(), size, fileInformation:GetUnitsPerEm())
            lineHeight = math:AbsoluteValue(scaledUpper) + math:AbsoluteValue(scaledLower) + scaledLineGap

            integer horizontalOffset = 0                                        // TODO - based on kerning?

            /*
            Currently unused, the fix was to calculate this relative to the pixelmap.
            Pixel maps are always from (0, 0) to height * width-1. Coordinates for
            glyphs are calculated in an arbitrary grid where positions are unknown
            until they are calculated. To solve this, I found the maximum values
            of the glyph and then took the absolute value of the upperbound
            for the pixelmap - the highest point of the glyph, and used this as
            the offset. There may be cases where glyphs are below the lowest point
            of the pixel grid, and there would need to be work done there to fix those
            cases, but it should be straightforward.

            Keeping this variable here for now as it may need to be calculated here
            to compute the heightFromBaseLine value. But, its actual value set
            here is irrelevant at this time.
            */
            integer verticalOffset = math:AbsoluteValue(fontMinimumY) + size

            integer glyphWidth = glyphMaximumX //- glyphMinimumX
            integer verticalAdvance = 0     // this seems wrong to me, and it doesn't seem to affect the fonts at all
            integer extraHorizontalAdvance = size/20                             // TODO - based on kerning?
            //extraHorizontalAdvance = fileReader:GetKerningValue(
            // ^ change to read from fileInformation instead of fileReader

            FontDrawable glyphDrawable = fontRasterizer:DrawGlyph(glyphOutline, horizontalOffset, verticalOffset, color, fileInformation)
            Drawable d = glyphDrawable:GetDrawable()
            integer glyphActualWidth = glyphDrawable:GetXMaximum() - glyphDrawable:GetXMinimum()      
            integer horizontalAdvance = cast(integer, horizontalOffset+glyphWidth+extraHorizontalAdvance)

            if character =  " "
                integer extraSpaceHorizontalAdvance = size/4                    // TODO - space character based on kerning?
                horizontalAdvance = horizontalAdvance + extraSpaceHorizontalAdvance
            end

            number heightFromBaseLine = glyphDrawable:GetHeightFromBaseline()
            
            Glyph glyph
            glyph:drawable = glyphDrawable:GetDrawable()
            glyph:horizontalAdvance = horizontalAdvance
            glyph:verticalAdvance = verticalAdvance
            glyph:heightFromBaseLine = cast(integer, heightFromBaseLine)
            glyph:lengthToGlyph = horizontalOffset

            glyphTable:Add(character, glyph)
            return glyph
        end
        return undefined
    end

    /*
    This action calculates the kerning value between a pair of characters and then
    returns it.

    Attribute: Parameter currentCharacter The first character in the pair.

    Attribute: Parameter nextCharacter The second character in the pair.

    Attribute: Returns Returns the kerning value between these two characters.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer kerning = font:GetKerning("A", "V")
            end
        end
    */
    action GetKerning(text currentCharacter, text nextCharacter) returns integer
        integer readKerning = fileReader:GetKerningValue(currentCharacter, nextCharacter)

        // 2048 units/em https://en.wikipedia.org/wiki/Kerning#Kerning_values
        integer kerning = size * readKerning / fontEmSize
        return kerning
    end 

    /*
        This action approximates a decimal number by dropping all decimal values
        without rounding.
    */
    private action IntegerPart(number x) returns integer
        return cast(integer, x)
    end

    /*
        This action returns a decimal number rounded to the nearest integer.
    */
    private action Round(number x) returns integer
        return IntegerPart(x + 0.5)
    end

    private action CalculateCoordinate(integer gridCoordinate, integer pixelSize, integer emSize, integer screensize) returns number
        if screensize = 0
           return cast(number, gridCoordinate) * pixelSize / emSize
        end
        return screensize - cast(number, gridCoordinate) * pixelSize / emSize
    end

    /*
    This action will check if the font has been loaded yet. If the font has
    been loaded, this will return true. Otherwise, it will return false.

    Attribute: Returns Returns true if the font is loaded, and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                boolean loaded = font:IsLoaded()
            end
        end
    */
    action IsLoaded returns boolean
        return initialized
    end

    /*
    This action will return the integer height of the font.

    Attribute: Returns Returns the height of the font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                integer font:GetHeight()
            end
        end
    */
    private action GetHeight returns integer
        return fontHeight
    end

    /*
    This action will return the height of each line of text produced by this font.

    Attribute: Returns Returns the height of a line of text for this font.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
                integer height = font:GetLineHeight()
            end
        end
    */
    action GetLineHeight returns integer
        return lineHeight
    end

    /*
    This action will return an array of all files found in the system's default
    font folder.

    Attribute: Returns Returns an array with all the font files on the system.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.System.File
        use Libraries.Containers.Array
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                Array<File> fontFiles = font:GetAvailableFonts()
                integer index = 0
                output "The following fonts are available on the system: "
                repeat fontFiles:GetSize() times
                    File temp = fontFiles:Get(index)
                    output temp:GetPath()
                    index = index + 1
                end
            end
        end
    */
    action GetAvailableFonts returns Array<File>

        text os = GetOS()

        Array<File> fontFiles = undefined
        File fontDirectory

        if os:Contains("Windows")
            fontDirectory:SetWorkingDirectory("C:\Windows\Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontDirectory:SetWorkingDirectory("/Library/Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("iOS Device")
            fontDirectory:SetWorkingDirectory("/System/Library/Fonts/Core")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("Web Browser")
            Array<File> fontFiles2
            fontFiles = fontFiles2
            File file
            file:SetPath("fonts/Roboto-Black.ttf")
            fontFiles:Add(file)
        else    // Linux and Android
            fontDirectory:SetWorkingDirectory("/system/fonts/")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        end

        return fontFiles
    end
    
    // Used to determine where to look for available fonts.
    private action GetOS returns text
        Properties properties
        text os = properties:GetOperatingSystemName()
        return os
    end

    private action EmptyGlyphTable
        Iterator<Glyph> glyphs = glyphTable:GetValueIterator()
        Glyph temp = undefined
        Drawable tempDrawable = undefined
        repeat while glyphs:HasNext()
            temp = glyphs:Next()
            tempDrawable = temp:drawable

            if tempDrawable not= undefined
                tempDrawable:Dispose()
            end
        end
        glyphTable:Empty()
    end

    action GetMaximumAscent returns integer
        return fileInformation:GetMaximumAscent()
    end

    action GetMaximumDescent returns integer
        return fileInformation:GetMaximumDescent()
    end

    action GetLineGap returns integer
        return fileInformation:GetLineGap()
    end
end
