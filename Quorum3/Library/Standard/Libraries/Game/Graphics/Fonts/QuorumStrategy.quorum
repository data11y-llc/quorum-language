package Libraries.Game.Graphics.Fonts

use Libraries.Game.Graphics.Fonts.FontStrategy
use Libraries.Containers.HashTable
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.Fonts.KerningTable
use Libraries.Game.Graphics.Fonts.FontFileReader
use Libraries.Game.Graphics.Fonts.TrueTypeFileInformation
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Game.Graphics.Fonts.TrueTypeCollectionData
use Libraries.System.File
use Libraries.Game.Graphics.Fonts.TrueTypeCollectionRecords
use Libraries.Game.Graphics.Fonts.NameRecord
use Libraries.Compute.Math
use Libraries.Game.Graphics.Fonts.BezierCurveGlyphPoints
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Fonts.FontDrawable
use Libraries.System.Properties
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Fonts.CoordinateVector
use Libraries.Containers.List
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.Blending
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Fonts.FontBoundingBox
use Libraries.Game.Graphics.Fonts.GlyphOutlineEdge
use Libraries.Game.GameStateManager

class QuorumStrategy is FontStrategy
    private integer fontSize = 14
    private integer emSize = 2048
    private number angle = 0
    //private integer pixelSize = 14
    private integer screenXSize = 1400
    private integer screenYSize = 900
    private integer xOffset = 0
    private integer yOffset = 0
    private Math math
    private Color color
    private text character = " "
    //BezierCurveGlyphPoints glyphPoints
    //Array<CoordinateVector> coordinates
    //Array<integer> endpoints

    
    // initialize the game window
    //SetScreenSize(screenXSize, screenYSize)
    // object to read font files
    FontFileReader fileReader
    // object to manipulate files
    File file

    private FontRasterizer fontRasterizer
    private TrueTypeFileInformation fileInformation
    private boolean initialized = false
    private boolean subFontInitialized = false
    private HashTable<text, Glyph> glyphTable
    private KerningTable kerningTable
    
    private integer fontHeight = 0
    private integer lineHeight = 0
    private integer fontWidth = 0
    private integer fontEmSize = 0
    private integer fontMaximumX = 0
    private integer fontMaximumY = 0
    private integer fontMinimumX = 0
    private integer fontMinimumY = 0    

    // These are indecies into the dataArray for ttc files
    // They are used to reference some common font styles when switching between them
    private integer regular = -1
    private integer plain = -1
    private integer medium = -1
    private integer heavy = -1
    private integer light = -1
    private integer condensed = -1
    private integer book = -1
    private integer roman = -1
    private integer semibold = -1
    private integer bold = -1
    private integer italic = -1
    private integer boldItalic = -1

    // TTC files contain several font tables in them. This array stores
    // indecies that are used to access these subtables. For example, if a ttc
    // file has Regular, Bold, and Italic fonts, this will contain 3 items that
    // contain the indecies needed to get the glyphs corresponding to the desired
    // font style.
    private Array<TrueTypeCollectionData> dataArray

    private text style = ""

    on create
        Color color
        color = color:Black()
        SetColor(color)
    end    

private action LoadSubFont()
    subFontIntitialized = true
    TrueTypeCollectionRecords trueTypeTable = fileInformation:GetTrueTypeCollectionRecords()
    dataArray = trueTypeTable:GetCollectionTables()
    boolean styleFound = false

        integer j = 0
        repeat while j < dataArray:GetSize() and styleFound = false
            TrueTypeCollectionData data = dataArray:Get(j)
            Array<NameRecord> records = data:GetNameRecords()

            integer i = 0
            repeat while i < records:GetSize() and styleFound = false
                NameRecord record = records:Get(i)
                text name = record:GetFontStyleName()
                if name:EqualsIgnoringCase(style)
                    fileInformation:SetAllTrueTypeInformation(data)
                    styleFound = true
                elseif name:EqualsIgnoringCase("regular")
                    regular = j
                elseif name:EqualsIgnoringCase("plain")
                    plain = j
                elseif name:EqualsIgnoringCase("medium")
                    medium = j
                elseif name:EqualsIgnoringCase("heavy")
                    heavy = j
                elseif name:EqualsIgnoringCase("light")
                    light = j
                elseif name:EqualsIgnoringCase("condensed")
                    condensed = j
                elseif name:EqualsIgnoringCase("book")
                    book = j
                elseif name:EqualsIgnoringCase("roman")
                    roman = j
                elseif name:EqualsIgnoringCase("semibold")
                    semibold = j
                elseif name:EqualsIgnoringCase("bold")
                    bold = j
                elseif name:EqualsIgnoringCase("italic")
                    italic = j
                elseif name:EqualsIgnoringCase("boldItalic")
                    boldItalic = j
                end
                i = i + 1
            end

            j = j + 1
        end

        if styleFound = false       // specified style was not found, try some defaults
            ChangeSubFont(style)
        end
end

    action ChangeSubFont(text newStyle)
        TrueTypeCollectionData data
        boolean styleFound = false

        if subFontInitialized = true
            if style not= newStyle
                style = newStyle

                integer j = 0
                repeat while j < dataArray:GetSize() and styleFound = false
                    data = dataArray:Get(j)
                    Array<NameRecord> records = data:GetNameRecords()

                    integer i = 0
                    repeat while i < records:GetSize() and styleFound = false
                        NameRecord record = records:Get(i)
                        text name = record:GetFontStyleName()
                        if name:EqualsIgnoringCase(style)
                            fileInformation:SetAllTrueTypeInformation(data)
                            styleFound = true
                        end
                        i = i + 1
                    end
                    j = j + 1
                end
            end
        
            // style not found, try some defaults
            if styleFound = false
                if regular > -1
                    data = dataArray:Get(regular)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif plain > -1
                    data = dataArray:Get(plain)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif medium > -1
                    data = dataArray:Get(medium)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif heavy > -1
                    data = dataArray:Get(heavy)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif light > -1
                    data = dataArray:Get(light)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif condensed > -1
                    data = dataArray:Get(condensed)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif book > -1
                    data = dataArray:Get(book)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif roman > -1
                    data = dataArray:Get(roman)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif semibold > -1
                    data = dataArray:Get(semibold)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif bold > -1
                    data = dataArray:Get(bold)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif italic > -1
                    data = dataArray:Get(italic)
                    fileInformation:SetAllTrueTypeInformation(data)
                elseif boldItalic > -1
                    data = dataArray:Get(boldItalic)
                    fileInformation:SetAllTrueTypeInformation(data)
                else // no standard fonts, just load the first one from the file
                    data = dataArray:Get(0)
                    fileInformation:SetAllTrueTypeInformation(data)
                end
            end
        end    
    end

    /*
    This action will load a font by name from the system. On Windows, this will
    search for fonts in "C:\Windows\Fonts". On Mac, this will search for fonts
    in "/Library/Fonts". On Android, this will search for fonts in "/system/fonts".

    Attribute: Parameter fontName The name of the font to load.

    Attribute: Example

        use Libraries.Game.Graphics.Font
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                Font font
                font:LoadFont("Arial")
            end
        end
    */
    action LoadFont(text fontName)

        File fontFile
        text os = GetOS()

        if os:Contains("Windows")
            fontFile:SetWorkingDirectory("C:\Windows\Fonts")
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontFile:SetWorkingDirectory("/Library/Fonts")
        elseif os:Contains("iOS Device")
            fontFile:SetWorkingDirectory("/System/Library/Fonts/Core")
        elseif os:Contains("Web Browser")
            fontFile:SetWorkingDirectory("fonts")
        else
            fontFile:SetWorkingDirectory("/system/fonts")
        end

        text fontPath = FindFontExtension(fontName)
        if fontPath = ""
            alert("No font file named " + fontName + " could be found on the system!")
        else
            fontFile:SetPath(fontPath)
            LoadFont(fontFile)
        end
    end

    private action FindFontExtension(text fontName) returns text
        File fontFile
        text os = GetOS()

            if os:Contains("Windows")
                fontFile:SetWorkingDirectory("C:\Windows\Fonts")
            elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
                fontFile:SetWorkingDirectory("/Library/Fonts")
            elseif os:Contains("iOS Device")
                fontFile:SetWorkingDirectory("/System/Library/Fonts/Core")
            elseif os:Contains("Web Browser")
                if FontIsAvailable(fontName)
                    return fontName + ".ttf"
                else 
                    return ""
                end
            else
                fontFile:SetWorkingDirectory("/system/fonts/")
            end

            boolean success = false
            fontFile:SetPath(fontName + ".ttf")

            if fontFile:Exists()
               return fontName + ".ttf"
            else
                fontFile:SetPath(fontName + ".ttc")
                if fontFile:Exists()
                    return fontName + ".ttc"
                else
                    fontFile:SetPath(fontName + ".otf")
                    if fontFile:Exists()
                        return fontName + ".otf"
                    else
                        fontFile:SetPath(fontName + ".dfont")
                        if fontFile:Exists()
                            return fontName + ".dfont"
                        else
                            return ""
                        end
                    end
                end
            end   
    end

    private action SetFontDimensions
        fontEmSize = fileInformation:GetUnitsPerEm()
        fontRasterizer:SetEmSize(fontEmSize)

        fontMinimumX = Round(CalculateCoordinate(fileInformation:GetXMinimum():GetFontUnit(), me:fontSize, fontEmSize, 0))
        fontMinimumY = Round(CalculateCoordinate(fileInformation:GetYMinimum():GetFontUnit(), me:fontSize, fontEmSize, 0))
        fontMaximumX = Round(CalculateCoordinate(fileInformation:GetXMaximum():GetFontUnit(), me:fontSize, fontEmSize, 0))
        fontMaximumY = Round(CalculateCoordinate(fileInformation:GetYMaximum():GetFontUnit(), me:fontSize, fontEmSize, 0))

        fontHeight = fontMaximumY - fontMinimumY
        fontWidth = fontMaximumX - fontMinimumX

        fontRasterizer:SetMaxXSize(fontWidth)
        fontRasterizer:SetMaxYSize(fontHeight)
    end

    action SetSize(integer newSize)
        me:fontSize = newSize
        textChanged = true
        if initialized
            fontRasterizer:SetSize(newSize)
            fontHeight = GetHeight()
            EmptyGlyphTable()
        end
    end

    action GetSize returns integer
        return me:fontSize
    end

    action Rotate(number rotation)
        SetAngle(angle + rotation)
    end

    action SetAngle(number newAngle)

    end

    action SetColor(Color newColor)
        me:color = newColor
        if initialized
            EmptyGlyphTable()
        end
    end

    action GetColor() returns Color
        return me:color
    end

    action GetAngle returns number
        return angle
    end

    //used to determine where to look for available fonts
    private action GetOS returns text
        GameStateManager manager
        text os = manager:GetOperatingSystem()
        return os
    end

    action LoadFont(File fontFile)
        if initialized
            Dispose()
            EmptyGlyphTable()
        end

        fileReader:Load(fontFile, me)
        // When the FontFileReader is done reading, it will call FinishFontLoading().
    end

    action FinishFontLoading(FontFileReader fileReader)
        me:fileReader = fileReader
        fileInformation = fileReader:GetFileInformation()
        kerningTable = fileReader:GetKerningTable()
        if fileInformation:GetTrueTypeCollectionFlag() = true
            LoadSubFont()
        end
        SetFontDimensions()
        initialized = true
    end

    private action Dispose
        initialized = false
    end

    action GetGlyph(text targetCharacter) returns Glyph
        text character = targetCharacter:GetCharacter(0)
        if glyphTable:HasKey(character)
            return glyphTable:GetValue(character):CopyGlyph()
        else
            BezierCurveGlyphPoints glyphPoints = fileReader:GetCharacterGlyphPoints(character)
            output "Inside QuorumStrategy outline has points: "
            glyphPoints:DisplayCoordinates()
            integer glyphMinimumX = Round(CalculateCoordinate(glyphPoints:GetBoundingBox():GetXMinimum(), fontSize, fontEmSize, 0))
            integer glyphMaximumX = Round(CalculateCoordinate(glyphPoints:GetBoundingBox():GetXMaximum(), fontSize, fontEmSize, 0))
            integer glyphMinimumY = Round(CalculateCoordinate(glyphPoints:GetBoundingBox():GetYMinimum(), fontSize, fontEmSize, 0))
            integer glyphMaximumY = Round(CalculateCoordinate(glyphPoints:GetBoundingBox():GetYMaximum(), fontSize, fontEmSize, 0))
            integer scaledUpper = fontRasterizer:CalculateScaledCoordinate(fileInformation:GetMaximumAscent(), fontSize, fileInformation:GetUnitsPerEm())
            integer scaledLower = fontRasterizer:CalculateScaledCoordinate(fileInformation:GetMaximumDescent(), fontSize, fileInformation:GetUnitsPerEm())
            integer scaledLineGap = fontRasterizer:CalculateScaledCoordinate(fileInformation:GetLineGap(), fontSize, fileInformation:GetUnitsPerEm())            
            lineHeight = math:AbsoluteValue(scaledUpper) + math:AbsoluteValue(scaledLower) + scaledLineGap

            integer horizontalOffset = 0
            integer verticalOffset = math:AbsoluteValue(fontMinimumY) + me:fontSize
            integer glyphWidth = glyphMaximumX - glyphMinimumX
            integer verticalAdvance = 0
            integer extraHorizontalAdvance = me:fontSize/20
            
            
            FontDrawable glyphDrawable = fontRasterizer:DrawGlyph(glyphPoints, horizontalOffset, verticalOffset, me:color, fileInformation)
            Drawable d = glyphDrawable:GetDrawable()
            
            integer glyphActualWidth = glyphDrawable:GetXMaximum() - glyphDrawable:GetXMinimum()
            integer horizontalAdvance = cast(integer, horizontalOffset + glyphWidth + extraHorizontalAdvance)

            if character = " " 
                integer extraSpaceHorizontalAdvance = me:fontSize/4
                horizontalAdvance = horizontalAdvance + extraSpaceHorizontalAdvance
            end 

            number heightFromBaseline = glyphDrawable:GetHeightFromBaseline()
            me:character = character
            Glyph glyph
            glyph:drawable = glyphDrawable:GetDrawable()
            glyph:horizontalAdvance = horizontalAdvance
            glyph:verticalAdvance =  verticalAdvance
            glyph:heightFromBaseLine = cast(integer, heightFromBaseline)
            glyph:lengthToGlyph = horizontalOffset     //could be different
            glyphTable:Add(character, glyph)
            return glyph
        end
        //return undefined
    end

    action FontIsAvailable(text fontName) returns boolean
        text os = GetOS()
        if os:Contains("Web Browser")
            if fontName = "Roboto-Black"
                return true
            else 
                return false
            end
        else 
            if FindFontExtension(fontName) = ""
                return false
            else
                return true
            end
        end
    end

    action SetStyle(text newStyle)
        me:style = newStyle
    end

    action GetKerning(text currentCharacter, text nextCharacter) returns integer
        integer readKerning = fileReader:GetKerningValue(currentCharacter, nextCharacter)

        // 2048 units/em https://en.wikipedia.org/wiki/Kerning#Kerning_values
        integer kerning = me:fontSize * readKerning / fontEmSize
        return kerning
    end 

    private action IntegerPart(number x) returns integer
        return cast(integer, x)
    end

    /*
        This action returns a decimal number rounded to the nearest integer.
    */
    private action Round(number x) returns integer
        return IntegerPart(x + 0.5)
    end

    private action CalculateCoordinate(integer gridCoordinate, integer pixelSize, integer emSize, integer screensize) returns number
        if screensize = 0
            return cast(number, gridCoordinate) * pixelSize / emSize
        end
        return screensize - cast(number, gridCoordinate) * pixelSize / emSize
    end

    action IsLoaded returns boolean
        return initialized
    end

    private action GetHeight returns integer
        return fontHeight
    end

    action GetLineHeight returns integer
        return lineHeight
    end
  
    action GetAvailableFonts returns Array<File>

        text os = GetOS()

        Array<File> fontFiles = undefined
        File fontDirectory

        if os:Contains("Windows")
            fontDirectory:SetWorkingDirectory("C:\Windows\Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("Mac OS X") or os:Contains("iOS Simulator")
            fontDirectory:SetWorkingDirectory("/Library/Fonts")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("iOS Device")
            fontDirectory:SetWorkingDirectory("/System/Library/Fonts/Core")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        elseif os:Contains("Web Browser")
            Array<File> fontFiles2
            fontFiles = fontFiles2
            File file
            file:SetPath("fonts/Roboto-Black.ttf")
            fontFiles:Add(file)
        else    // Linux and Android
            fontDirectory:SetWorkingDirectory("/system/fonts/")
            fontDirectory:SetPath("")
            fontFiles = fontDirectory:GetDirectoryListing()
        end

        return fontFiles
    end

    private action EmptyGlyphTable
        Iterator<Glyph> glyphs = glyphTable:GetValueIterator()
        Glyph temp = undefined
        Drawable tempDrawable = undefined
        repeat while glyphs:HasNext()
            temp = glyphs:Next()
            tempDrawable = temp:drawable

            if tempDrawable not= undefined
                tempDrawable:Dispose()
            end
        end
        glyphTable:Empty()
    end

    action GetMaximumAscent returns integer
        return fileInformation:GetMaximumAscent()
    end

    action GetMaximumDescent returns integer
        return fileInformation:GetMaximumDescent()
    end

    action GetLineGap returns integer
        return fileInformation:GetLineGap()
    end
end







