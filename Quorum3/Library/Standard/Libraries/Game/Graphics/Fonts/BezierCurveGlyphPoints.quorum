package Libraries.Game.Graphics.Fonts

use Libraries.Containers.Array
use Libraries.Game.Graphics.Fonts.all
use Libraries.Compute.Math

/*
The BezierCurveGlyphPoints class is used to store the Bezier point information
for a given character, as well as to create virtual points needed when scaling
the glyph to a given size. Most users will never use this class directly.

Attribute: Example

    use Libraries.Game.Graphics.Fonts.all
    use Libraries.Game.Game

    class Main is Game
        FontFileReader fileReader
            
        action Main
            StartGame()
        end

        action CreateGame
            BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints("a")
        end
    end
*/
class BezierCurveGlyphPoints 
    /*The number of contours the glyph has.*/
    integer numberOfContours = 0
    /*Contains the number of points for each contour of the glyph.*/
    Array<integer> contourEndpoints
    /*Contains all of the coordinates for the Bezier curve.*/
    Array<CoordinateVector> points
    /*The coordinate space for which the points are restricted to.*/
    FontBoundingBox boundingbox
    /*Whether or not this is a compound glyph (a glyph made up of multiple glyphs).*/
    boolean compoundGlyph = false
    /*Contains all of the endpoints for compound glyph components.*/
    Array<Array<integer>> compoundEndpoints
    /*Contains all of the coordinates for the Bezier curves of compound glyph components.*/
    Array<Array<CoordinateVector>> compoundPoints

    /*
    This action sets whether or not the BezierCurveGlyphPoints is a simple glyph.

    Attribute: Parameter value True if this is a compound glyph, and false if it is not.

    Attribute: Example
    
        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                points:SetCompoundGlyph(true)
            end
        end
    */
    action SetCompoundGlyph(boolean value)
        compoundGlyph = value
    end

    /*
    This action returns whether or not the BezierCurveGlyphPoints is a simple glyph.

    Attribute: Returns Returns true if this is a compound glyph, and false if it is not.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                output points:GetCompoundGlyph()
            end
        end
    */
    action GetCompoundGlyph() returns boolean
        return compoundGlyph
    end
    
    /*
    This action adds an array of endpoints for a compound glyph component to the
    BezierCurveGlyphPoints.

    Attribute: Parameter endpoints Array of endpoints for a compound glyph component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                Array<integer> endpoints
                points:AddToCompoundEndpoints(endpoints)
            end
        end
    */
    action AddToCompoundEndpoints(Array<integer> endPoints)
        compoundEndpoints:Add(endPoints)
    end

    /*
    This action adds an array of coordinate points for a compound glyph component
    to the BezierCurveGlyphPoints.

    Attribute: Parameter coordinatePoints Array of coordinate points for a compound
    glyph component.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                Array<CoordinateVector> coordinatePoints
                points:AddToCompoundPoints(coordinatePoints)
            end
        end
    */
    action AddToCompoundPoints(Array<CoordinateVector> coordinatePoints)
        compoundPoints:Add(coordinatePoints)
    end

    /*
    This action returns an array of all the endpoint arrays in a compound glyph.

    Attribute: Returns Returns an array of all the endpoint arrays in a compound glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                Array<Array<integer>> endpoints = points:GetCompoundEndpoints()
            end
        end
    */
    action GetCompoundEndpoints() returns Array<Array<integer>>
        return compoundEndpoints
    end

    /*  
    This action returns an array of all the coordinate point arrays in a compound glyph.

    Attribute: Returns Returns an array of all the coordinate point arrays in a compound glyph.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                Array<Array<CoordinateVector>> coordinatePoints = points:GetCompoundPoints()
            end
        end
    */
    action GetCompoundPoints() returns Array<Array<CoordinateVector>>
        return compoundPoints
    end

    /*
    This action adds the absolute coordinate position of the next point relative
    to the last point that was read from the file. 
    
    Attribute: Parameter changeInX The amount of change on the x-axis.

    Attribute: Parameter changeInY The amount of change on the y-axis.

    Attribute: Parameter onCurve True if the point is on the curve, and false if it falls outside of the curve.

    Attribute: Parameter endpoint True if the point is an endpoint, and false if it is not.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            FontFileReader fileReader
            
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints("a")
                glyphOutline:AddNewPointRelativeToLast(1, 1, true, false)
            end
        end
    */
    action AddNewPointRelativeToLast(integer changeInX, integer changeInY, boolean onCurve, boolean endpoint)
        CoordinateVector vector
        vector:Copy(GetLastPoint())
        vector:AddNewPointRelativeToLast(changeInX, changeInY, onCurve, endpoint)
        AddPoint(vector)
    end

    /*
    This action offsets the BezierCurveGlyphPoints coordinate points by the given
    offset values. These values are in a real, unscaled coordinate system and 
    should be used on points that are also in a real, unscaled coordinate system 
    (before the points have been scaled to a font size, for example).

    Attribute: Parameter offsetX The value to offset the x-coordinates by.

    Attribute: Parameter offsetY The value to offset the y-coordinates by.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                points:OffsetXY(10, 20)
            end
        end
    */
    action OffsetXY(integer offsetX, integer offsetY)
        CoordinateVector vector
        integer i = 0
        repeat while i < points:GetSize()
            vector = points:Get(i)
            vector:SetX(offsetX + vector:GetX())
            vector:SetY(offsetY + vector:GetY())
            i = i + 1
        end
    end

    /*
    This action adds virtual points between the actual points of a Bezier curve.
    Virtual points are points between actual points and are useful in calculating
    lines when creating the outlines of characters. Note that this function must
    be called every time actual points are added.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            FontFileReader fileReader
       
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline = fileReader:GetCharacterGlyphPoints("a")
                glyphOutline:AddVirtualPoints()
            end
        end
    */
    action AddVirtualPoints()
        integer contour = 0
        repeat while contour < numberOfContours
            integer endpoint = contourEndpoints:Get(contour)
            integer lastEndpoint = 0
            integer i = 0
            if contour > 0
                lastEndpoint = contourEndpoints:Get(contour-1)
                i = 0 + lastEndpoint + 1
            end
           
            repeat while i <= endpoint
                CoordinateVector next = NextPoint(i, contour)
                if not points:Get(i):IsOnCurve() and not next:IsOnCurve()
                    CoordinateVector current = points:Get(i)
                    CoordinateVector newPoint = ComputeMiddlePoint(current, next)
                    newPoint:SetComputed(true)

                    points:Add(i+1, newPoint)
                    // Since there is an additional point, update following contours
                    IncrementContoursByOne(contour)
                    endpoint = endpoint + 1
                end
                i = i + 1
            end
            contour = contour + 1
        end
    end

    private action IncrementContoursByOne(integer contour)
        integer c = contour
        repeat while c < contourEndpoints:GetSize()
            contourEndpoints:Set(c, contourEndpoints:Get(c)+1)

            c = c + 1
        end
    end

    // This action finds the middle point between two coordinate points of the
    // BezierCurveGlyphPoints.
    private action ComputeMiddlePoint(CoordinateVector current, CoordinateVector next) returns CoordinateVector
        number x = (current:GetX() + next:GetX())/2
        number y = (current:GetY() + next:GetY())/2

        CoordinateVector newPoint
        newPoint:SetX(x)
        newPoint:SetY(y)
        newPoint:SetOnCurve(true)

        return newPoint
    end

    // Next Point in respect to contours
    private action NextPoint(integer i, integer contour) returns CoordinateVector
        if contourEndpoints:Get(contour) = i and contour > 0
            return points:Get(contourEndpoints:Get(contour-1)+1)
        elseif contourEndpoints:Get(contour) = i and contour = 0
            return points:Get(0)
        end
        return points:Get(i+1)
    end

    private action GetLastPoint() returns CoordinateVector
        integer size = me:points:GetSize()
        if size = 0
            CoordinateVector cv
            cv:SetX(0)
            cv:SetY(0)
            return cv
        end
        return me:points:Get(me:points:GetSize()-1)
    end

    /*
    This action sets the array of coordinate points for this Bezier curve.

    Attribute: Parameter points The array of CoordinateVector points that make up
    this Bezier curve's points.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                Array<CoordinateVector> points
                CoordinateVector vector
                vector:SetX(1)
                vector:SetY(1)
                points:Add(vector)
                glyphOutline:SetPoints(points)
            end
        end
    */
    action SetPoints(Array<CoordinateVector> points)
        me:points = points
    end
    
    /*
    This action adds a CoordinateVector set of points to the Bezier curve point
    array.

    Attribute: Parameter point The CoordinateVector points to add to the curve.

    Attribute: Example
        
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                CoordinateVector vector
                vector:SetX(1)
                vector:SetY(1)
                glyphOutline:AddPoint(vector)
            end
        end
    */
    action AddPoint(CoordinateVector point)
        me:points:Add(point)
    end

    /*
    This action adds a point to the Bezier curve's point array by creating
    a CoordinateVector, setting its values and then adding it to the array.

    Attribute: Parameter x The x position of the point.

    Attribute: Parameter y The y position of the point.

    Attribute: Example
        
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                glyphOutline:AddPoint(1, 1)
            end
        end
    */
    action AddPoint(integer x, integer y)
        CoordinateVector cv
        cv:SetX(x)
        cv:SetY(y)

        me:points:Add(cv)
    end

    /* 
    This action sets the number of contours for the Bezier curve.
    
    Attribute: Parameter numberOfContours The number of contours for the Bezier curve.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                glyphOutline:SetNumberOfContours(1)
            end
        end
    */
    action SetNumberOfContours(integer numberOfContours)
        me:numberOfContours = numberOfContours
    end

    /*
    This action sets the number of points that are on each contour of the glyph.
    Note that these are not the coordinates for each point, only how many points
    there are.

    Attribute: Parameter endpoints Array of integers representing the 
    number of points on the ith contour of the glyph.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                Array<integer> count
                count:Add(1)
                glyphOutline:SetContourEndpoints(count)
            end
        end
    */
    action SetContourEndpoints(Array<integer> endpoints)
        me:contourEndpoints = endpoints
    end

    /*
    This action returns the array containing the number of points on the ith
    contour of the glyph.

    Attribute: Returns Returns the array containing the number of points on every contour of the glyph.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                Array<integer> count = glyphOutline:GetContourEndpoints()
            end
        end
    */
    action GetContourEndpoints() returns Array<integer>
        return me:contourEndpoints
    end
    
    /*
    This action returns the array containing the points that make up the Bezier curve.

    Attribute: Returns Returns the array containing the coordinates of every point
    on the Bezier curve.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game
        use Libraries.Containers.Array

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                Array<CoordinateVector> points = glyphOutline:GetPoints()
            end
        end    
    */
    action GetPoints() returns Array<CoordinateVector>
        return me:points
    end

    /*
    This action sets the BoundingBox of the Bezier curve to an already defined
    bounding box.

    Attribute: Parameter boundingbox The BoundingBox to constrain the Bezier curve to.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                FontBoundingBox boundingBox
                glyphOutline:SetBoundingBox(boundingBox)
            end
        end
    */
    action SetBoundingBox(FontBoundingBox boundingbox)
        me:boundingbox = boundingbox
    end

    /*
    This action sets the BoundingBox of the Bezier curve to the dimensions specified.

    Attribute: Parameter xMin The left-most x-coordinate of the box.

    Attribute: Parameter yMin The bottom-most y-coordinate of the box.

    Attribute: Parameter xMax The right-most x-coordinate of the box.

    Attribute: Parameter yMax The top-most y-coordinate of the box.

    Attribute: Example
    
        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end 
                
            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                glyphOutline:SetBoundingBox(0, 0, 100, 100)
            end
        end
    */
    action SetBoundingBox(integer xMin, integer yMin, integer xMax, integer yMax)
        me:boundingbox:SetBoundingBox(xMin, yMin, xMax, yMax)
    end

    /*
    This action returns the BoundingBox of the Bezier curve.

    Attribute: Returns Returns the bounding box of the Bezier curve.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                FontBoundingBox box = glyphOutline:GetBoundingBox()
            end
        end
    */
    action GetBoundingBox() returns FontBoundingBox
        return me:boundingbox
    end

    /*
    This actions prints to the screen the number of contours and the number
    of points for the Bezier curve.

    Attribute: Returns Returns a string of characters containing the number
    of contours and the number of points for the Bezier curve.

    Attribute: Example

        use Libraries.Game.Graphics.Fonts.all
        use Libraries.Game.Game

        class Main is Game
            action Main
                StartGame()
            end 

            action CreateGame
                BezierCurveGlyphPoints glyphOutline
                output glyphOutline:ToText()
            end
        end
    */
    action ToText() returns text
        text t = ""

        t = t + "Contours: " + contourEndpoints:GetSize()
        t = t + ", Number of points: " + points:GetSize()

        return t
    end

    /*
    This action scales the coordinate position points of the BezierCurveGlyphPoints
    by the given value. This scale is applied to both x and y positions. For example,
    if the scale is 2.0, it will set all points to twice their current values,
    doubling the size of the character.

    Attribute: Parameter scale The value to use when scaling the coordinates.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                points:ScalePoints(2.0)
            end
        end
    */  
    action ScalePoints(number scale)
        integer i = 0
        Math math

        repeat while i < points:GetSize()
            integer x = cast(integer, math:Floor(points:Get(i):GetX() * scale))
            integer y = cast(integer, math:Floor(points:Get(i):GetY() * scale))
            points:Get(i):SetX(x)
            points:Get(i):SetY(y)
        
            i = i + 1
        end
    end

    /*
    This action scales the coordinate position points of the BezierCurveGlyphPoints
    by the given values. There is an x scale and a y scale that are applied to
    the x and y values accordingly. For example, if the values are 2.0 and 1.0,
    then the glyph will be twice as wide but remain at the same height.

    Attribute: Parameter xScale The value to use when scaling the x coordinates.

    Attribute: Parameter yScale The value to use when scaling the y coordinates.

    Attribute: Example

        use Libraries.Game.Game
        use Libraries.Game.Graphics.Fonts.all
        
        class Main is Game
            action Main
                StartGame()
            end

            action CreateGame
                BezierCurveGlyphPoints points
                points:ScaleXAndYDifferently(2.0, 1.0)
            end
        end
    */
    action ScaleXAndYDifferently(number xScale, number yScale)
        integer i = 0
        Math math

        repeat while i < points:GetSize()
            integer x = cast(integer, math:Floor(points:Get(i):GetX() * xScale))
            integer y = cast(integer, math:Floor(points:Get(i):GetY() * yScale))
            points:Get(i):SetX(x)
            points:Get(i):SetY(y)
        
            i = i + 1
        end
    end

    action DisplayCoordinates()
        integer i = 0
        text t = ""

        repeat while i < points:GetSize()
            t = t + "(" + points:Get(i):GetX() + ", " + points:Get(i):GetY() + "), "

            i = i + 1
        end

        output t
    end

    action ScaleBezierPointsToFontSize(integer fontSize, integer emSize)
        // make sure to handle compound glyphs at some point
        integer i = 0

        repeat while i < points:GetSize()
            CoordinateVector vector = points:Get(i)
            number x = vector:GetX()
            number y = vector:GetY()
            vector:SetX(x * fontSize/emSize)
            vector:SetY(y * fontSize/emSize)

            i = i + 1
        end
    end

    action DisplayOnCurvePoints()
        integer i = 0
        repeat while i < points:GetSize()
            CoordinateVector vector = points:Get(i)

            output "Point is on curve? " + vector:IsOnCurve()

            i = i + 1
        end
    end
end