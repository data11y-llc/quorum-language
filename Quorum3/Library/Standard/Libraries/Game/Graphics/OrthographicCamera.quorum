package Libraries.Game.Graphics

use Libraries.Compute.Vector2
use Libraries.Compute.Vector3
use Libraries.Game.GameStateManager

class OrthographicCamera is Camera
    
    number zoom = 1

    on create
        parent:Camera:near = 0
        SetFar(20000)
        SetPosition(GetWidth()/2, GetHeight()/2, 10000)
    end

    private Vector3 calcVector
//    private Vector3 negatedPosition
//    private Vector3 negatedDirection
//    private Vector3 negatedUp

    /*
    Initializes the camera by giving a width and height for the camera to show
    in virtual space.
    */
    action Initialize(number viewportWidth, number viewportHeight)
        parent:Camera:viewportWidth = viewportWidth
        parent:Camera:viewportHeight = viewportHeight
        Update()
    end

    /*
    This action recalculates the camera's position and data. This should be used
    after the camera has been manipulated in any way.
    */
    action Update

        parent:Camera:projection:SetToOrthographic(-parent:Camera:viewportWidth/(2 * zoom), parent:Camera:viewportWidth/(2 * zoom),
            -parent:Camera:viewportHeight/(2 * zoom), parent:Camera:viewportHeight/(2 * zoom), parent:Camera:near, parent:Camera:far)
            
        parent:Camera:view:SetToLookAt(parent:Camera:position, calcVector:Set(parent:Camera:position):Add(parent:Camera:direction), parent:Camera:up)
        parent:Camera:combined:Set(parent:Camera:projection)
        parent:Camera:combined:Multiply(parent:Camera:view)

        parent:Camera:inverseProjectionView:Set(parent:Camera:combined)
        parent:Camera:inverseProjectionView:Inverse()
        parent:Camera:frustum:Update(parent:Camera:inverseProjectionView)
    end

    /*
    This action will set the camera to an orthographic projection using a
    viewport fitting the game's full width and height.
    */
    action SetToOrthographic
        GameStateManager manager
        SetToOrthographic(manager:GetGameDisplay():GetWidth(), manager:GetGameDisplay():GetHeight())
    end

    /*
    This action will set the camera to an orthographic projection using a
    viewport of the given width and height.
    */
    action SetToOrthographic(number viewportWidth, number viewportHeight)
        // libGDX code originally has a boolean for yDown. We assume it was false.
        parent:Camera:up:Set(0, 1, 0)
        parent:Camera:direction:Set(0, 0, -1)
        
        parent:Camera:position:Set(viewportWidth/(2.0 * zoom), viewportHeight/(2.0 * zoom), 0)
        parent:Camera:viewportWidth = viewportWidth
        parent:Camera:viewportHeight = viewportHeight
        Update()
    end

    /*
    This action will scale the size of the camera lens while maintaining the 
    position of the bottom left corner of the viewing area.

    Attribute: Parameter scale The amount to scale the camera lens.
    */
    action Scale(number scale)
        number translateX = (parent:Camera:viewportWidth * scale - parent:Camera:viewportWidth) / 2
        number translateY = (parent:Camera:viewportHeight * scale - parent:Camera:viewportHeight) / 2
        parent:Camera:viewportWidth = parent:Camera:viewportWidth * scale
        parent:Camera:viewportHeight = parent:Camera:viewportHeight * scale
        Move(translateX, translateY)
    end

    /*
    This action will scale the size of the camera lens while maintaining the 
    position of the bottom left corner of the viewing area.

    Attribute: Parameter width The width the lens should be after scaling.
    Attribute: Parameter height The height the lens should be after scaling.
    */
    action ScaleTo(number width, number height)
        number translateX = (width - parent:Camera:viewportWidth) / 2
        number translateY = (height - parent:Camera:viewportHeight) / 2
        parent:Camera:viewportWidth = width
        parent:Camera:viewportHeight = height
        Move(translateX, translateY)
    end

    /*
    This action will rotate the camera by the given number of degrees around the
    camera's direction vector. If the camera has been SetToOrthographic(), then
    this vector should be perpendicular to the 2D plane of the screen space.
    */
    action Rotate(number degrees)
        Rotate(parent:Camera:direction, degrees)
    end

    /*
    This action will move the camera by the given amount on each axis.
    */
    action Move(number x, number y)
        Move(x, y, 0)
    end

    /*
    This action will move the camera by the amount of the given 2D vector.
    */
    action Move(Vector2 vector)
        Move(vector:GetX(), vector:GetY(), 0)
    end

    /*
    This action will set the camera's position in 2D space. If used in a 3D
    environment, it will set the camera's x and y position without affecting its
    z position.
    */
    action SetPosition(number x, number y)
        SetPosition(x, y, 0)
    end

    /*
    This action will set the camera's position in 2D space. If used in a 3D
    environment, it will set the camera's x and y position without affecting its
    z position.
    */
    action SetPosition(Vector2 vector)
        SetPosition(vector:GetX(), vector:GetY(), 0)
    end

    /*
    The SetZoom action will set the zoom level of the camera. A value of 1 will
    use the default zoom. A smaller value will zoom the camera out, while a
    larger value will zoom the camera in.
    */
    action SetZoom(number zoom)
        me:zoom = zoom
    end

    /*
    The GetZoom action returns the current level of zoom used by the camera. The
    default value is 1.
    */
    action GetZoom returns number
        return zoom
    end
end