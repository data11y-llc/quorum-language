package Libraries.Compute

use Libraries.Compute.MatrixTransform.AddScalar
use Libraries.Compute.MatrixTransform.DivideScalar
use Libraries.Compute.MatrixTransform.Flip
use Libraries.Compute.MatrixTransform.Identity
use Libraries.Compute.MatrixTransform.MatrixCalculation
use Libraries.Compute.MatrixTransform.MatrixTransform
use Libraries.Compute.MatrixTransform.Multiply
use Libraries.Compute.MatrixTransform.MultiplyScalar
use Libraries.Compute.MatrixTransform.Reshape
use Libraries.Compute.MatrixTransform.Rotation
use Libraries.Compute.MatrixTransform.SubtractScalar
use Libraries.Compute.MatrixTransform.Transpose
use Libraries.Containers.Table
use Libraries.Containers.Array
use Libraries.Compute.Math

/*
This class is a two dimensional matrix of number variables.

Attribute: Example

use Libraries.Compute.Matrix

class Main 
    action Main
        Matrix matrix
        matrix:Fill(3, 3, 1.1)
        output matrix:ToText()
    end
end
*/
class Matrix
    private Table<number> table

    private action CheckReference(integer row, integer column)
        if column < 0
            alert("The column index must be a positive number. It is currently " + column)
        end
        if row < 0
            alert("The row index must be a positive number. It is currently " + row)
        end
        if  column >= GetColumns() 
            alert("I cannot reference column " + column + " the maximum column index is " + (GetColumns()-1) + ".")
        end
        if  row >= GetRows() 
            alert("I cannot reference row " + row + " the maximum row index is " + (GetRows()-1) + ".")
        end
    end

    private action CheckSameDimensions(Matrix matrix)
        if matrix:GetRows() not= GetRows()
            alert("Matrix dimensions must match. There are " + matrix:GetRows() + " rows in the value matrix compared to " + GetRows())
        end
        if matrix:GetColumns() not= GetColumns()
            alert("Matrix dimensions must match. There are " + matrix:GetColumns() + " columns in the value matrix compared to " + GetColumns())
        end
    end

    /*
    This method is used to get the value in a specified location in the matrix.

    Attribute: Parameter row The row number of the item.
    Attribute: Parameter column The column number of the item.

    Attribute: Returns The value of the item in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 1.1)
            output matrix:Get(1, 1)
        end
    end
    */
    action Get(integer row, integer column) returns number
        CheckReference(row, column)
        return table:Get(row, column)
    end 

    /*
    This method is used to set the value in a specified location in the matrix.

    Attribute: Example

    Attribute: Parameter row The row number of the item.
    Attribute: Parameter column The column number of the item.
    Attribute: Parameter value The value to set.

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 1.1)
            matrix:Set(1, 1, 2.2)
            output matrix:Get(1, 1)
        end
    end
    */
    action Set(integer row, integer column, number value)
        CheckReference(row, column)
        table:Set(row, column, value)
    end

    /*
    This method is used to set the dimensions of a matrix.

    Attribute: Parameter rows The number of rows in the matrix.
    Attribute: Parameter columns The number of columns in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:SetSize(2, 3)
            output matrix:GetSize()
        end
    end
    */
    action SetSize(integer rows, integer columns)
        table:SetSize(rows, columns)
        table:SetMaxSize(rows, columns)
    end

    /*
    This method is used to set the dimensions of a matrix to match a different matrix..

    Attribute: Parameter matrix The matrix from which to copy the dimensions.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix1
            matrix:SetSize(2, 3)
            output matrix:GetSize()
        end
    end
    */
    action SetSize(Matrix matrix)
        table:SetSize(matrix:GetRows(), matrix:GetColumns())
        table:SetMaxSize(matrix:GetRows(), matrix:GetColumns())
    end

    /*
    This method is used to get the number of elements in a matrix.

    Attribute: Returns The total number of elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:SetSize(2, 3)
            output matrix:GetSize()
        end
    end
    */
    action GetSize returns integer
        return GetColumns() * GetRows()
    end

    /*
    This method is used to get the number of columns in a matrix.

    Attribute: Returns The number of columns in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:SetSize(2, 3)
            output matrix:GetColumns()
        end
    end
    */
    action GetColumns returns integer
        return table:GetMaxNumberOfColumns()
    end

    /*
    This method is used to get the number of columns in a matrix.

    Attribute: Returns The number of rows in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:SetSize(2, 3)
            output matrix:GetRows()
        end
    end
    */
    action GetRows returns integer
        return table:GetMaxNumberOfRows()
    end

    /*
    This method is used to get a column of a Matrix returned as a new matrix.

    Attribute: Parameter column The column number of the matrix to return.

    Attribute: Returns A matrix containing only the specified column.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 1.1)
            Matrix col1 = matrix:GetColumn(0)
            output col1:ToText()
        end
    end
    */
    action GetColumn(integer column) returns Matrix
        if column < 0 or column > GetColumns() - 1
            alert("Index value: " + column + " out of range")
        end
        Matrix result
        result:SetSize(GetRows(), 1)
        row = 0
        repeat GetRows() times
            result:Set(row, 0, table:Get(row, column))
            row = row + 1
        end
        return result
    end

    /*
    This method is used to get a column of a Matrix returned as an array of numbers.

    Attribute: Parameter column The column number of the matrix to return.

    Attribute: Returns An array containing only the specified row.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 1.1)
            Array<number> col1 = matrix:GetColumnArray(0)
            output col1:GetSize()
        end
    end
    */
    action GetColumnArray(integer column) returns Array<number>
        if column < 0 or column > GetColumns() - 1
            alert("Index value: " + column + " out of range")
        end
        Array<number> newArray
        row = 0
        repeat table:GetNumberOfRows() times
            newArray:Add(table:Get(row, column))
            row = row + 1
        end
        return newArray
    end

    /*
    This method is used to get a list of all the elements in a Matrix ordered by column returned as an array of numbers.

    Attribute: Returns An array containing all the elements in matrix in order by column.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 1.1)
            Array<number> col1 = matrix:GetColumnMajorArray()
            output col1:GetSize()
        end
    end
    */
    action GetColumnMajorArray returns Array<number>
        Array<number> newArray
        col = 0
        repeat GetColumns() times
            row = 0
            repeat GetRows() times
                newArray:Add(Get(row, col))
                row = row + 1
            end
            col = col + 1
        end
        return newArray
    end

    /*
    This method is used to get a row of a Matrix returned as a new matrix.

    Attribute: Parameter row The row number of the matrix to return.

    Attribute: Returns A matrix containing only the specified row.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 1.1)
            Matrix row1 = matrix:GetRow(0)
            output row1:ToText()
        end
    end
    */
    action GetRow(integer row) returns Matrix
        if row < 0 or row > GetRows() - 1
            alert("Index value: " + row + " out of range")
        end
        Matrix result
        result:SetSize(1, GetColumns())
        col = 0
        repeat GetColumns() times
            result:Set(0, col, table:Get(row, col))
            col = col + 1
        end
        return result
    end

    /*
    This method is used to get a row of a Matrix returned as an array of numbers.

    Attribute: Parameter row The row number of the matrix to return.

    Attribute: Returns An array containing only the specified row.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 1.1)
            Array<number> row1 = matrix:GetRowArray(0)
            output row1:GetSize()
        end
    end
    */
    action GetRowArray(integer row) returns Array<number>
        if row < 0 or row > GetRows() - 1
            alert("Index value: " + row + " out of range")
        end
        return table:GetRow(row)
    end

    /*
    This method is used to get a list of all the elements in a Matrix ordered by row returned as an array of numbers.
   
    Attribute: Returns An array containing all the elements in the matrix ordered by row .

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 1.1)
            Array<number> row1 = matrix:GetRowMajorArray()
            output row1:GetSize()
        end
    end
    */
    action GetRowMajorArray returns Array<number>
        Array<number> newArray
        row = 0
        repeat GetRows() times
            col = 0
            repeat GetColumns() times
                newArray:Add(Get(row, col))
                col = col + 1
            end
            row = row + 1
        end
        return newArray
    end

    /*
    This method is used to set the elements in a row of a Matrix with a list of numbers in an array. The length of the array must match the width of the Matrix.

    Attribute parameter row The row number of the array to set.
    Attribute parameter array The array of values to set.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            Array<number> array
            array:Add(1.1)
            array:Add(2.1)
            array:Add(3.1)
            matrix:SetRow(0, array)
            output matrix:ToText()
        end
    end
    */
    action SetRow(integer row, Array<number> array)
        if array:GetSize() not= GetColumns()
            alert("Rows have " + GetColumns() + " elements in this matrix. The array you supplied has " + array:GetSize() + ". They must match.")
        end
        if row < 0 or row > GetRows() - 1
            alert("Index value: " + row + " out of range")
        end
        col = 0
        repeat GetColumns() times
            Set(row, col, array:Get(col))
            col = col + 1
        end
    end

    /*
    This method is used to set the elements in a row of a Matrix with a single row matrix. The widths of the matrices must match.

    Attribute parameter row The row number of the array to set.
    Attribute parameter matrix The matrix of values to set.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            Matrix matrix2
            matrix2:Fill(1, 3, 1.0)
            matrix:SetRow(0, matrix2)
            output matrix:ToText()
        end
    end
    */
    action SetRow(integer row, Matrix matrix)
        if matrix:GetColumns() not= GetColumns()
            alert("Rows have " + GetColumns() + " elements in this matrix. The matrix you supplied has " + matrix:GetColumns() + ". They must match.")
        end
        if matrix:GetRows() > 1
            alert("This operation works for matrices with one row. The matrix you supplied has " + matrix:GetRows() + ".")
        end
        if row < 0 or row > GetRows() - 1
            alert("Index value: " + row + " out of range")
        end
        col = 0
        repeat GetColumns() times
            Set(row, col, matrix:Get(0, col))
            col = col + 1
        end
    end

    /*
    This method is used to set all the elements in a row of a Matrix to a single value.

    Attribute parameter row The row number of the array to set.
    Attribute parameter value The value to set in each element of a row.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            matrix:SetRow(0, 1.0)
            output matrix:ToText()
        end
    end
    */
    action SetRow(integer row, number value)
        if row < 0 or row > GetRows() - 1
            alert("Index value: " + row + " out of range")
        end
        col = 0
        repeat GetColumns() times
            Set(row, col, value)
            col = col + 1
        end
    end

    /*
    This method is used to set the elements in a column of a Matrix with a list of numbers in an array. The length of the array must match the height of the Matrix.

    Attribute parameter column The column number of the array to set.
    Attribute parameter array The array of values to set.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            Array<number> array
            array:Add(1.1)
            array:Add(2.1)
            matrix:SetColumn(0, array)
            output matrix:ToText()
        end
    end
    */
    action SetColumn(integer column, Array<number> array)
        if array:GetSize() not= GetRows()
            alert("Columns have " + GetRows() + " elements in this matrix. The array you supplied has " + array:GetSize() + ". They must match.")
        end
        if column < 0 or column > GetColumns() - 1
            alert("Index value: " + column + " out of range")
        end
        row = 0
        repeat GetRows() times
            Set(row, column, array:Get(row))
            row = row + 1
        end
    end

    /*
    This method is used to set the elements in a column of a Matrix with a single column matrix. The heights of the matrices must match.

    Attribute parameter column The column number of the array to set.
    Attribute parameter matrix The matrix of values to set.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            Matrix matrix2
            matrix2:Fill(2, 1, 1.0)
            matrix:SetColumn(0, matrix2)
            output matrix:ToText()
        end
    end
    */
    action SetColumn(integer column, Matrix matrix)
        if matrix:GetRows() not= GetRows()
            alert("Columns have " + GetRows() + " elements in this matrix. The array you supplied has " + matrix:GetRows() + ". They must match.")
        end
        if matrix:GetColumns() > 1
            alert("This operation works for matrices with one column. The matrix you supplied has " + matrix:GetColumns() + ".")
        end
        if column < 0 or column > GetColumns() - 1
            alert("Index value: " + column + " out of range")
        end
        row = 0
        repeat GetRows() times
            Set(row, column, matrix:Get(row, 0))
            row = row + 1
        end
    end

    /*
    This method is used to set all the elements in a column of a Matrix to a single value.
    
    Attribute parameter column The column number of the array to set.
    Attribute parameter value The value to set in each element of a column.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            matrix:SetColumn(0, 1.0)
            output matrix:ToText()
        end
    end
    */
    action SetColumn(integer column, number value)
        if column < 0 or column > GetColumns() - 1
            alert("Index value: " + column + " out of range")
        end
        row = 0
        repeat GetRows() times
            Set(row, column, value)
            row = row + 1
        end
    end

    /*
    This method is used to add a value to all the elements in a Matrix.

    Attribute Parameter value The value to be added to the matrix elements.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            matrix = matrix:Add(1.0)
            output matrix:ToText()
        end
    end
    */
    action Add(number value) returns Matrix
        AddScalar scalar
        scalar:SetValue(me, value)
        return scalar:Transform(me)
    end

    /*
    This method is used to subtract a value from all the elements in a Matrix.

    Attribute Parameter value The value to be subtracted from the matrix elements.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            matrix = matrix:Subtract(1.0)
            output matrix:ToText()
        end
    end
    */
    action Subtract(number value) returns Matrix
        SubtractScalar scalar
        scalar:SetValue(me, value)
        return scalar:Transform(me)
    end

    /*
    This method is used to multiply all the elements in a Matrix by a value.

    Attribute Parameter value The value to multiply the matrix elements by.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            matrix = matrix:Multiply(2.0)
            output matrix:ToText()
        end
    end
    */
    action Multiply(number value) returns Matrix
        MultiplyScalar scalar
        scalar:SetValue(me, value)
        return scalar:Transform(me)
    end

    /*
    This method is used to divide all the elements in a Matrix by a value.

    Attribute Parameter value The value to divide the matrix elements by.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            matrix = matrix:Divide(2.0)
            output matrix:ToText()
        end
    end
    */
    action Divide(number value) returns Matrix
        DivideScalar scalar
        scalar:SetValue(me, value)
        return scalar:Transform(me)
    end

    /*
    This method is used to add all the elements in a Matrix by the values in another Matrix. The dimensions of the matrices must be the same.

    Attribute Parameter matrix The matrix to add to the current matrix.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2
            matrix2:Fill(2, 3, 2.0)
            matrix = matrix:AddElements(matrix2)
            output matrix:ToText()
        end
    end
    */
    action AddElements(Matrix matrix) returns Matrix
        CheckSameDimensions(matrix)
        AddScalar scalar
        scalar:SetValue(matrix)
        return scalar:Transform(me)
    end

    /*
    This method is used to subtract all the elements in a Matrix from the values in another Matrix. The dimensions of the matrices must be the same.

    Attribute Parameter matrix The matrix to subtract from the current matrix.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2
            matrix2:Fill(2, 3, 2.0)
            matrix = matrix:SubtractElements(matrix2)
            output matrix:ToText()
        end
    end
    */
    action SubtractElements(Matrix matrix) returns Matrix
        CheckSameDimensions(matrix)
        SubtractScalar scalar
        scalar:SetValue(matrix)
        return scalar:Transform(me)
    end

    /*
    This method is used to multiply all the elements in a Matrix by the values in another Matrix. The dimensions of the matrices must be the same.

    Attribute Parameter matrix The matrix of values to multiply by the current matrix values.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2
            matrix2:Fill(2, 3, 2.0)
            matrix = matrix:MultiplyElements(matrix2)
            output matrix:ToText()
        end
    end
    */
    action MultiplyElements(Matrix matrix) returns Matrix
        CheckSameDimensions(matrix)
        MultiplyScalar scalar
        scalar:SetValue(matrix)
        return scalar:Transform(me)
    end

    /*
    This method is used to divide all the elements in a Matrix by the values in another Matrix. The dimensions of the matrices must be the same.

    Attribute Parameter matrix The matrix of values to divide by the current matrix values.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2
            matrix2:Fill(2, 3, 2.0)
            matrix = matrix:DivideElements(matrix2)
            output matrix:ToText()
        end
    end
    */
    action DivideElements(Matrix matrix) returns Matrix
        CheckSameDimensions(matrix)
        DivideScalar scalar
        scalar:SetValue(matrix)
        return scalar:Transform(me)
    end

    /*
    This method performs a multiplication operation on two matrices. The dimensions of the matrices must be compatible so that the columns in the first matrix are equal to the rows in the second matrix.

    Attribute: Example

    Attribute Parameter matrix The matrix to multiply by the current matrix.

    Attribute Returns A new matrix after the operation is performed.

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2
            matrix2:Fill(3, 2, 2.0)
            matrix = matrix:Multiply(matrix2)
            output matrix:ToText()
        end
    end
    */
    action Multiply(Matrix matrix) returns Matrix
        if GetColumns() not= matrix:GetRows()
            alert("Incompatible dimensions: " + GetColumns() + " columns in this matrix must match " + matrix:GetRows() + " rows in value matrix.")
        end
        Multiply multiply
        multiply:SetValue(matrix)
        return multiply:Transform(me)
    end

    /*
    This method returns a copy of a Matrix.

    Attribute Returns A new copied matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2 = matrix:Copy()
            output matrix2:ToText()
        end
    end
    */
    action Copy() returns Matrix
        Matrix newMatrix
        newMatrix:SetSize(me)
        row = 0
        repeat GetRows() times
            col = 0
            repeat GetColumns() times
                newMatrix:Set(row, col, Get(row, col))
                col = col + 1
            end
            row = row + 1
        end
        return newMatrix
    end

    /*
    This method fills the matrix with the specified value.

    Attribute Parameter fillValue The value to place in each element in the matrix.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0)
            matrix = matrix:Fill(1.1)
            output matrix:ToText()
        end
    end
    */
    action Fill(number fillValue) returns Matrix
        Matrix resultMatrix
        resultMatrix:SetSize(GetRows(), GetColumns())
        row = 0
        repeat GetRows() times
            col = 0
            repeat GetColumns() times
                resultMatrix:Set(row, col, fillValue) 
                col = col + 1
            end
            row = row + 1
        end
        return resultMatrix
    end

    /*
    This method fills a matrix with a specified number of rows and columns with the same value.

    Attribute Parameter rows The number of rows for the matrix.
    Attribute Parameter columns The number of columns for the matrix.
    Attribute Parameter value The value to place in each element in the matrix.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 10.0)
            Matrix matrix2 = matrix:Copy()
            output matrix2:ToText()
        end
    end
    */
    action Fill(integer rows, integer columns, number value)
        Table<number> tab
        tab:SetMaxSize(rows, columns)
        tab:SetSize(rows, columns)
        row = 0
        repeat while row < rows
            col = 0
            repeat while col < columns
                tab:Set(row, col, value)
                col = col + 1
            end
            row = row + 1
        end
        table = tab
    end

    /*
    This method fills a matrix from the values in an array of numbers for a specified number of rows.

    Attribute Parameter rows The number of rows to fill.
    Attribute Parameter array The set of values for each row.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            Array<number> array
            array:Add(1.0)
            array:Add(2.0)
            array:Add(3.0)
            matrix:FillByRow(3, array)
            output matrix:ToText()
        end
    end
    */
    action FillByRow(integer rows, Array<number> array)
        Table<number> tab
        repeat rows times
            tab:AddRow(array)
        end
        tab:SetMaxSize(rows, array:GetSize())
        table = tab
    end

    /*
    This method fills a matrix from the values of a single row matrix for a specified number of rows.

    Attribute Parameter rows The number of rows to fill.
    Attribute Parameter matrix The set of values for each row.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            Matrix matrix2
            matrix2:Fill(1, 3, 1.1)
            matrix:FillByRow(3, matrix2)
            output matrix:ToText()
        end
    end
    */
    action FillByRow(integer rows, Matrix matrix)
        Table<number> tab
        Array<number> row = matrix:GetRowArray(0)
        repeat rows times
            tab:AddRow(row)
        end
        tab:SetMaxSize(rows, row:GetSize())
        table = tab
    end

    /*
    This method fills a matrix from the values in an array of numbers for a specified number of columns.

    Attribute Parameter columns The number of columns to fill.
    Attribute Parameter array The set of values for each column.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            Array<number> array
            array:Add(1.0)
            array:Add(2.0)
            array:Add(3.0)
            matrix:FillByColumn(3, array)
            output matrix:ToText()
        end
    end
    */
    action FillByColumn(integer columns, Array<number> array)
        Table<number> tab
        tab:SetSize(array:GetSize(), columns)
        tab:SetMaxSize(array:GetSize(), columns)
        row = 0
        col = 0
        repeat columns times
            row = 0
            repeat while row < array:GetSize()
                tab:Set(row, col, array:Get(row))
                row = row + 1
            end
            col = col + 1
        end
        table = tab
    end

    /*
    This method fills a matrix from the values of a single column matrix for a specified number of columns.

    Attribute Parameter columns The number of columns to fill.
    Attribute Parameter matrix The set of values for each column.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            Matrix matrix2
            matrix2:Fill(1, 3, 1.1)
            matrix:FillByColumn(3, matrix2)
            output matrix:ToText()
        end
    end
    */
    action FillByColumn(integer columns, Matrix matrix)
        Table<number> tab
        tab:SetSize(matrix:GetRows(), columns)
        tab:SetMaxSize(matrix:GetRows(), columns)
        row = 0
        col = 0
        repeat columns times
            row = 0
            repeat while row < matrix:GetRows()
                tab:Set(row, col, matrix:Get(row, 0))
                row = row + 1
            end
            col = col + 1
        end
        table = tab
    end

    /*
    This method compares each element in a matrix to a lower threshold value and if the element is lower, it sets that element to a fill value.

    Attribute Parameter cutoffValue The lower threshold value.
    Attribute Parameter fillValue The value to fill if the element is below the threshold.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(1, 3, 1.1)
            matrix = matrix:SetLowerThreshold(2.0, 3.0)
            output matrix:ToText()
        end
    end
    */
    action SetLowerThreshold(number cutoffValue, number fillValue) returns Matrix
        Matrix resultMatrix
        resultMatrix:SetSize(GetRows(), GetColumns())
        row = 0
        repeat GetRows() times
            col = 0
            repeat GetColumns() times
                number element = Get(row, col)
                if element < cutoffValue
                    resultMatrix:Set(row, col, fillValue) 
                else
                    resultMatrix:Set(row, col, element) 
                end
                col = col + 1
            end
            row = row + 1
        end
        return resultMatrix
    end

    /*
    This method compares each element in a matrix to an upper threshold value and if the element is higher, it sets that element to a fill value.
    
    Attribute Parameter cutoffValue The upper threshold value.

    Attribute Parameter fillValue The value to fill if the element is above the threshold.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(1, 3, 1.1)
            matrix = matrix:SetUpperThreshold(1.0, 0.5)
            output matrix:ToText()
        end 
    end
    */
    action SetUpperThreshold(number cutoffValue, number fillValue) returns Matrix
        Matrix resultMatrix
        resultMatrix:SetSize(GetRows(), GetColumns())
        row = 0
        repeat GetRows() times
            col = 0
            repeat GetColumns() times
                number element = Get(row, col)
                if element > cutoffValue
                    resultMatrix:Set(row, col, fillValue)
                else
                    resultMatrix:Set(row, col, element) 
                end
                col = col + 1
            end
            row = row + 1
        end
        return resultMatrix
    end

    /*
    This method flips the array vertically, from top to bottom

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetRow(0, 1.1)
            matrix:SetRow(1, 2.1)
            matrix:SetRow(2, 3.1)
            matrix = matrix:FlipVertical()
            output matrix:ToText()
        end
    end
    */
    action FlipVertical() returns Matrix
        Flip flip
        flip:FlipVertical()
        return flip:Transform(me)
    end

    /*
    This method flips the array vertically, from top to bottom

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix = matrix:FlipHorizontal()
            output matrix:ToText()
        end
    end
    */
    action FlipHorizontal() returns Matrix
        Flip flip
        flip:FlipHorizontal()
        return flip:Transform(me)
    end

    /*
    This method extracts a sub matrix from within a matrix, starting at the offsetRow and offsetColumn (relative to 0,0 in the upper right corner). The sub matrix will have the number of rows and columns specified by those parameters

    Attribute Parameter offsetRow The row offset for the first element in the new matrix.
    Attribute Parameter offsetColumn The column offset for the first element in the new matrix.
    Attribute Parameter rows The number of rows to extract.
    Attribute Parameter columns The number of columns to extract.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(4, 4, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix:SetColumn(3, 4.1)
            matrix = matrix:GetSubMatrix(1, 1, 2, 2)
            output matrix:ToText()
        end
    end
    */
    action GetSubMatrix(integer offsetRow, integer offsetColumn, integer rows, integer columns) returns Matrix
        if columns > GetColumns() - offsetColumn
            alert("I cannot set the columns of a subframe outside the original matrix dimensions")
        elseif rows > GetRows() - offsetRow
            alert("I cannot set the rows of a subframe outside the original matrix dimensions")
        elseif offsetColumn < 0 or offsetRow < 0
            alert("offsetColumn and y must be inside the dimensions of the original matrix")
        else
            Reshape reshape
            reshape:SetValues(-offsetRow, -offsetColumn, rows, columns, 0.0)
            return reshape:Transform(me)
        end
    end

    /*
    This method returns the identity matrix for a square matrix. An identity matrix with ones along the main diagonal from top left to bottom right and zeroes everywhere else.

    Attribute Returns A new identity matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(4, 4, 0.0)
            matrix = matrix:Identity()
            output matrix:ToText()
        end
    end
    */
    action Identity returns Matrix
        if GetRows() not= GetColumns()
            alert("Identity only valid for square matrices.")
        end
        Identity identity
        return identity:Transform(me)
    end

    /*
    This method shifts a matrix a given number of offsetRows and offsetColumns (relative to 0,0 in the upper right corner). The new matrix will have the number of rows and columns specified by those parameters and any empty values in the new matrix will be filled with fillValue.

    Attribute Parameter offsetRow The row offset for the first element in the new matrix.
    Attribute Parameter offsetColumn The column offset for the first element in the new matrix.
    Attribute Parameter rows The number of rows to extract.
    Attribute Parameter columns The number of columns to extract.
    Attribute Parameter fillValue The value to fill in any undefined cells in the new matrix..

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(4, 4, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix:SetColumn(3, 4.1)
            matrix = matrix:Reshape(1, 1, 6, 6, 0.0)
            output matrix:ToText()
        end
    end
    */
    action Reshape(integer offsetRow, integer offsetColumn, integer rows, integer columns, number fillValue) returns Matrix
        Reshape reshape
        reshape:SetValues(offsetRow, offsetColumn, rows, columns, fillValue)
        return reshape:Transform(me)
    end

    /*
    This method rotates a Matrix to the left

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix = matrix:RotateLeft()
            output matrix:ToText()
        end
    end
    */
    action RotateLeft() returns Matrix
        Rotation rotation
        rotation:Left()
        return rotation:Transform(me)
    end

    /*
    This method rotates a Matrix to the right

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(2, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix = matrix:RotateRight()
            output matrix:ToText()
        end
    end
    */
    action RotateRight() returns Matrix
        Rotation rotation
        rotation:Right()
        return rotation:Transform(me)
    end

    /*
    This method shifts a matrix a given number of offsetRows and offsetColumns (relative to 0,0 in the upper left corner). The new matrix is the same size and any empty values in the new matrix will be filled with fillValue.

    Attribute Parameter offsetRow The row offset for the first element in the new matrix.
    Attribute Parameter offsetColumn The column offset for the first element in the new matrix.
    Attribute Parameter fillValue The value to fill in any undefined cells in the new matrix.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(4, 4, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix:SetColumn(3, 4.1)
            matrix = matrix:Shift(1, 1, 0.0)
            output matrix:ToText()
        end
    end
    */
    action Shift(integer offsetRow, integer offsetColumn, number fillValue) returns Matrix
        Reshape reshape
        reshape:SetValues(offsetRow, offsetColumn, GetRows(), GetColumns(), fillValue)
        return reshape:Transform(me)
    end

    /*
    This method returns the transpose of a matrix where all the rows of the matrix are turned into columns in a new matrix and vice versa.

    Attribute Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(4, 4, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            matrix:SetColumn(3, 4.1)
            matrix = matrix:Transpose()
            output matrix:ToText()
        end
    end
    */
    action Transpose returns Matrix
        Transpose transpose
        return transpose:Transform(me)
    end

    /*
    This method returns the value of the maximum element in a Matrix

    Attribute Returns The value of the largest element in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetMaximum()
        end
    end
    */
    action GetMaximum returns number
        result = 0.0
        row = 0
        result = result:GetMinimumValue()
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                number element = Get(row, col)
                if element > result
                    result = element
                end
                col = col + 1
            end
            row = row + 1
        end
        return result
    end

    /*
    This method returns the value of the minimum element in a Matrix

    Attribute Returns The value of the smallest element in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetMinimum()
        end
    end
    */
    action GetMinimum returns number
        result = 0.0
        row = 0
        result = result:GetMaximumValue()
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                element = Get(row, col)
                if element < result
                    result = element
                end
                col = col + 1
            end
            row = row + 1
        end
        return result
    end

    /*
    This method returns the sum of all the elements in a Matrix

    Attribute Returns The sum of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetTotal()
        end
    end
    */
    action GetTotal returns number
        result = 0.0
        row = 0
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                result = result + Get(row, col)
                col = col + 1
            end
            row = row + 1
        end
        return result
    end

    /*
    This method returns the mean (average) of all the elements in a Matrix
    
    Attribute Returns The mean of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetMean()
        end
    end
    */
    action GetMean returns number
        number total = GetTotal()
        elements = GetSize()
        return total / elements
    end

    /*
    This method returns an array of all the modes (most common value) of a Matrix

    Attribute Returns An array of the modes of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            Array<number> modes = matrix:GetModes()
            output modes:Get(0)
        end
    end
    */
    action GetModes returns Array<number>
        Array<number> values
        row = 0
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                values:Add(Get(row, col))
                col = col + 1
            end
            row = row + 1
        end
        values:Sort()
        Array<number> modes
        i = 1
        count = 1
        most = 1
        last = values:Get(0)
        modes:Add(last)
        repeat while i < values:GetSize()
            if values:Get(i) = last
                count = count + 1
            else
                count = 1
                last = values:Get(i)
            end
            if count = most
                modes:Add(values:Get(i))
            elseif count > most
                most = count
                modes:Empty()
                modes:Add(values:Get(i))
            end
            i = i + 1
        end
        return modes
    end

    /*
    This method returns an comma separated value of all the modes (most common value) of a Matrix

    Attribute Returns An comma separated list of the modes of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix
    use Libraries.Containers.Array

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetModesAsText()
        end
    end
    */
    action GetModesAsText returns text
        out = ""
        Array<number> modes = GetModes()
        i = 0
        repeat while i < modes:GetSize()
            out = out + modes:Get(i)
            if i < modes:GetSize()-1
                out = out + ", "
            end
            i = i + 1
        end
        return out
    end

    /*
    This method returns the median (middle value) of all the elements in a Matrix

    Attribute Returns The median of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetMedian()
        end
    end
    */
    action GetMedian returns number
        Array<number> values
        row = 0
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                values:Add(Get(row, col))
                col = col + 1
            end
            row = row + 1
        end
        values:Sort()
        if values:GetSize() mod 2 = 1
            return values:Get((values:GetSize() - 1) / 2)
        end
        integer midpoint = values:GetSize() / 2
        return (values:Get(midpoint) + values:Get(midpoint-1))/2
    end

    /*
    This method returns the standard deviation of all the elements in a Matrix

    Attribute Returns The standard deviation of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetStandardDeviation()
        end
    end
    */
    action GetStandardDeviation returns number
        Math math
        return math:SquareRoot(GetVariance())
    end

    /*
    This method returns the variance of all the elements in a Matrix

    Attribute Returns The variance of all the elements in the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetVariance()
        end
    end
    */
    action GetVariance returns number
        number mean = GetMean()
        number total = 0.0
        row = 0
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                number diff = Get(row, col) - mean
                total = total + (diff * diff)
                col = col + 1
            end
            row = row + 1
        end
        number elements = GetSize()
        return total / elements
    end
    
    /*
    This method returns the value at a given percentile rank of a Matrix, assuming the elements in the Matrix are all sorted.

    Attribute: Returns The value at a given percentile rank of a Matrix.
    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 0.0)
            matrix:SetColumn(0, 1.1)
            matrix:SetColumn(1, 2.1)
            matrix:SetColumn(2, 3.1)
            output matrix:GetPercentile(0.40)
        end
    end
    */
    action GetPercentile(number rank) returns number
        Array<number> values
        row = 0
        repeat while row < GetRows()
            col = 0
            repeat while col < GetColumns()
                values:Add(Get(row, col))
                col = col + 1
            end
            row = row + 1
        end
        values:Sort()
        if values:GetSize() mod 2 = 1
            return values:Get((values:GetSize() - 1) / 2)
        end
        integer index = cast(integer, GetSize() * rank)
        return values:Get(index)
    end

    /*
    This is a blueprint method for creating a Matrix Transform class.

    Attribute: Parameter transform A MatrixTransform class to perform a matrix transform.

    Attribute: Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.MatrixTransform.MatrixTransform
    use Libraries.Compute.Matrix

    class AddScalar is MatrixTransform
        action Transform(Matrix matrix) returns Matrix
            Matrix newMatrix
            newMatrix:SetSize(matrix)
            row = 0
            repeat matrix:GetRows() times
                col = 0
                repeat matrix:GetColumns() times
                    newMatrix:Set(row, col, matrix:Get(row, col) + 2)                    col = col + 1
                end
                row = row + 1
            end
            return newMatrix
        end
    end
    */
    action Transform(MatrixTransform transform) returns Matrix
        return transform:Transform(me)
    end

    /*
    This is a blueprint method for creating a Matrix Calculation class.

    Attribute: Parameter calculate A MatrixCalculation class to perform a matrix calculation.

    Attribute: Returns A new matrix after the operation is performed.

    Attribute: Example

    use Libraries.Compute.MatrixTransform.MatrixTransform
    use Libraries.Compute.Matrix

    class Add is MatrixCalculation
        action Calculate(Matrix matrix) returns Matrix
            Matrix newMatrix
            newMatrix:SetSize(matrix)
            row = 0
            repeat matrix:GetRows() times
                col = 0
                repeat matrix:GetColumns() times
                    newMatrix:Set(row, col, matrix:Get(row, col) + 3)                    col = col + 1
                end
                row = row + 1
            end
            return newMatrix
        end
    end
    */
    action Calculate(MatrixCalculation calculate) returns number
        return calculate:Calculate(me)
    end

    /*
    This method prints a matrix in text format for easy viewing.

    Attribute: Returns A text value representation of the matrix.

    Attribute: Example

    use Libraries.Compute.Matrix

    class Main 
        action Main
            Matrix matrix
            matrix:Fill(3, 3, 1.0)
            output matrix:ToText()
        end
    end
    */
    action ToText returns text
        text out = ""
        row = 0
        repeat while row < GetRows()
            col = 0
            out = out + "|"
            repeat while col < GetColumns()
                out = out + Get(row, col)
                if col = GetColumns() - 1
                    out = out + "|"
                else
                    out = out + ", "
                end
                col = col + 1
            end
            if row < GetRows() - 1
                out = out + out:GetCarriageReturn()
            end
            row = row + 1
        end
        return out
    end
end