use Libraries.Interface.Item2D
use Libraries.Compute.Math
use Libraries.Compute.Vector2
use Libraries.Containers.Array
use Libraries.Game.Collision.CollisionEdge2D
use Libraries.Game.Collision.LocalCollisionPoints2D
use Libraries.Game.Collision.PhysicsPosition2D
use Libraries.Game.Collision.Shapes.CollisionShape2D
use Libraries.Game.Collision.Shapes.Circle
use Libraries.Game.Collision.Shapes.Polygon
use Libraries.Game.Collision.CollisionPoint2D
use Libraries.Game.Collision.Narrowphase.DistanceInput2D
use Libraries.Game.Collision.Narrowphase.DistanceOutput2D
use Libraries.Game.Collision.Narrowphase.SimplexCache2D
use Libraries.Game.Collision.CollisionIdentifier2D
use Libraries.Game.Collision.Narrowphase.Distance2D
use Libraries.Game.Collision.EdgeResult2D
use Libraries.Game.Collision.ClipVertex2D
use Libraries.Game.Graphics.Drawable


package Libraries.Interface.Events

/*
This class is used to represent collision between two 2D items. One 
CollisionEvent2D corresponds to one collision between the two items.
This class also has a doubly linked list structure which allows you 
to access all of the collision events that has happened.
This doubly linked list encompasses the collision that happened in the whole
"world" of a certain game.
*/
class CollisionEvent2D
    //A floating point value that is very close to zero.
    public constant number EPSILON = 0.00000011920928955078125

    //The first item involved in the collision.
    Item2D itemA = undefined
    //The second item involved in the collision.
    Item2D itemB = undefined

    //If it is a specific "child" of itemA that is involved in the collision,
    //you have to specify which "child" of itemA it is.
    integer indexA = -1
    //If it is a specific "child" of itemB that is involved in the collision,
    //you have to specify which "child" of itemB it is.
    integer indexB = -1

    //True when the shapes are touching.
    boolean touchingFlag = false
    //True when the user wants to count this as an collision.
    //False when the user doesn't want to count this as an collision.
    boolean enabledFlag = false

    //The friction between the two items.
    number friction = 0
    //The restitution between the two items.
    number restitution = 1
    //
    number tangentSpeed = 0

    boolean hasPhysicsResponse = true

    Math math

    /*
    The link to the previous collision event.
    */
    private CollisionEvent2D next = undefined
    /*
    The link to the next collision event.
    */
    private CollisionEvent2D previous = undefined

    boolean islandFlag = false
    boolean toiFlag = false
    integer toiCount = 0
    number toi = 0

    /*
    The starting point of the doubly linked list of collisions on the first
    item that is involved in the collision.
    */
    CollisionEdge2D nodeA
    /*
    The starting point of the doubly linked list of collisions on the second
    item that is involved in the collision.
    */
    CollisionEdge2D nodeB

    //stores where collision occured with respect to the reference object.
    LocalCollisionPoints2D collisionPoints
    LocalCollisionPoints2D oldCollisionPoints

    action HasPhysicsResponse returns boolean
        return hasPhysicsResponse
    end

    action SetHasPhysicsResponse(boolean flag)
        me:hasPhysicsResponse = flag
    end

    action Initialize(Item2D itemA, integer indexA, Item2D itemB, integer indexB)
        enabledFlag = true
        //gets the shapes of the two items that are involved in the collision
        //this assumes that each item is made up of one shape
        CollisionShape2D shapeA = itemA:GetShape()  
        CollisionShape2D shapeB = itemB:GetShape()

        //NOTE: we only support two shapes in 2D: circle and polygon
        //and we only support three collision algorithms:
        //  (1) A = circle, B = circle
        //  (2) A = polygon, B = polygon
        //  (3) A = polygon, B = circle
           // Either the shapes are the same type or the polygon is the
           // first shape, so we can just assign the values as they come in
        if (shapeA is Circle and shapeB is Circle)
            me:itemA = itemA
            me:indexA = indexA

            me:itemB = itemB
            me:indexB = indexB

        elseif (shapeA is Polygon and shapeB is Polygon)
            me:itemA = itemA
            me:indexA = indexA

            me:itemB = itemB
            me:indexB = indexB

        elseif (shapeA is Polygon and shapeB is Circle)
            me:itemA = itemA
            me:indexA = indexA

            me:itemB = itemB
            me:indexB = indexB

        else
            // The first shape is a circle and the second shape is a polygon, but
            // the collision algorithm for CirclePolygon collision assumes the
            // other way around, so flip them here
            me:itemA = itemB
            me:indexA = indexB

            me:itemB = itemA
            me:indexB = indexA

        end

        collisionPoints:pointCount = 0  //local collision points

        previous = undefined
        next = undefined

        nodeA:collision = undefined
        nodeA:previous = undefined
        nodeA:next = undefined
        nodeA:other = undefined

        nodeB:collision = undefined
        nodeB:previous = undefined
        nodeB:next = undefined
        nodeB:other = undefined   //fix from nodeA to nodeB

        if itemA:IsPhysicsEnabled() and itemB:IsPhysicsEnabled()
            friction = CalculateTotalFriction(itemA:GetFriction(), itemB:GetFriction())
            restitution = CalculateTotalRestitution(itemA:GetRestitution(), itemB:GetRestitution())
        end
        
    end

    action GetPrevious returns CollisionEvent2D
        return previous
    end

    action SetPrevious(CollisionEvent2D event)
        previous = event
    end

    action GetNext returns CollisionEvent2D
        return next
    end

    action SetNext(CollisionEvent2D event)
        next = event
    end

    action IsTouching returns boolean
        return touchingFlag
    end

    action SetEnabled(boolean enabled)
        enabledFlag = enabled
    end

    action IsEnabled returns boolean
        return enabledFlag
    end

    action GetItemA returns Item2D
        return itemA
    end

    action GetChildIndexA returns integer
        return indexA
    end

    action GetItemB returns Item2D
        return itemB
    end
    
    action GetChildIndexB returns integer
        return indexB
    end

    action GetCollisionPoints returns LocalCollisionPoints2D
        return collisionPoints
    end

    action SetFriction(number friction)
        me:friction = friction
    end

    action GetFriction returns number
        return friction
    end

    action ResetFriction
        friction = CalculateTotalFriction(itemA:GetFriction(), itemB:GetFriction())
    end

    action SetRestitution(number restitution)
        me:restitution = restitution
    end

    action GetRestitution returns number
        return restitution
    end

    action ResetRestitution
        restitution = CalculateTotalRestitution(itemA:GetRestitution(), itemB:GetRestitution())
    end

    action SetTangentSpeed(number speed)
        me:tangentSpeed = speed
    end

    action GetTangentSpeed returns number
        return tangentSpeed
    end

    
    /*
    This action calculates if the collision has started or if the collision has 
    been resolved. Using a CollisionListener, the user can change what would the
    responses of the system (ex. audio playback) and the objects be when the
    collision has begun or when the collision has ended.
    */
    action DispatchCollision(Array<CollisionListener2D> listeners)
        oldCollisionPoints:Set(collisionPoints)   //save the previous collisionPoints

        enabledFlag = true

        boolean touching = false
        boolean wasTouching = touchingFlag  //save the previous touching flag

        boolean sensorA = not itemA:IsPhysicsEnabled()
        boolean sensorB = not itemB:IsPhysicsEnabled()
        boolean sensor = sensorA or sensorB

        PhysicsPosition2D transformA = itemA:GetTransform()
        PhysicsPosition2D transformB = itemB:GetTransform()

        if sensor
            CollisionShape2D shapeA = itemA:GetShape() 
            CollisionShape2D shapeB = itemB:GetShape()

            touching = TestOverlap(shapeA, indexA, shapeB, indexB, transformA, transformB)
            collisionPoints:SetPointCount(0)
        else    //if both items are NOT sensors
            NarrowphaseEvaluation(collisionPoints, transformA, transformB)  //calculate the new "collisionPoints"
            touching = collisionPoints:GetPointCount() > 0

            integer i = 0
            repeat while i < collisionPoints:GetPointCount()
                //let p2 be the most current evaluation of collisionPoints
                CollisionPoint2D p2 = collisionPoints:GetPoints():Get(i)    //changing p2 will also change the "ith" CollisionPoint2D inside collisionPoints
                p2:SetNormalImpulse(0)
                p2:SetTangentImpulse(0)
                CollisionIdentifier2D id2 = p2:GetIdentifier()

                integer j = 0
                //give the impulses calculated for the oldCollisionPoints to the new collisionPoints if they have the same id
                //so that old impulses would be the "first guess" for the solver to work with because the old impulses are probably a good starting point
                repeat while j < oldCollisionPoints:GetPointCount()
                    CollisionPoint2D p1 = oldCollisionPoints:GetPoints():Get(j)

                    if p1:GetIdentifier():Equals(id2)
                        p2:SetNormalImpulse(p1:GetNormalImpulse())
                        p2:SetTangentImpulse(p1:GetTangentImpulse())
                    end

                    j = j + 1
                end

                i = i + 1
            end

            //if the items are starting to have contact
            if touching not= wasTouching
                itemA:Simulate(true)    //wake both objects up
                itemB:Simulate(true)
            end
        end

        touchingFlag = touching

        integer i = 0
        repeat while i < listeners:GetSize()
            CollisionListener2D listener = listeners:Get(i)
            if not wasTouching and touching
                listener:BeginCollision(me)
            end

            if wasTouching and not touching
                listener:FinishCollision(me)
            end

            i = i + 1
        end
    end

    action GetNodeA returns CollisionEdge2D
        return nodeA
    end

    action GetNodeB returns CollisionEdge2D
        return nodeB
    end

    /*
    This action estimates the friction between the surface of the two 2D objects
    using friction mixing law such that if one object is frictionless then the
    surface between the two objects will have 0 friction as well.
    */
    action CalculateTotalFriction(number friction1, number friction2) returns number
        return math:SquareRoot(friction1 * friction2)
    end

    /*
    This action estimates the restitution between the surface of the two 2D objects
    using restitution mixing law such that if one object is inelastic, then
    the other object will bounce off the inelastic object easily.
    */
    action CalculateTotalRestitution(number restitution1, number restitution2) returns number
        if restitution1 > restitution2
            return restitution1
        else
            return restitution2
        end
    end
    
    /*
    This action tests if two shapes overlap. This action returns "true" if the
    two shapes do overlap and returns "false" if the two shapes do not overlap.
    */
    private action TestOverlap(CollisionShape2D shapeA, integer indexA, CollisionShape2D shapeB, integer indexB, PhysicsPosition2D transformA, PhysicsPosition2D transformB) returns boolean
        DistanceInput2D in
        in:GetProxyA():Set(shapeA, indexA)
        in:GetProxyB():Set(shapeB, indexB)
        in:GetTransformA():Set(transformA)
        in:GetTransformB():Set(transformB)
        in:SetUseRadii(true)

        SimplexCache2D cache
        cache:SetCount(0)

        DistanceOutput2D out

        Distance2D distance
        distance:Distance(out, cache, in)
        return out:GetDistance() < 10.0 * EPSILON
    end

    /*
    This action calls the correct LocalCollisionPoints2D evaluation action
    based on the shape of objects A and B.
    */
    private action NarrowphaseEvaluation(LocalCollisionPoints2D collisionPoints, PhysicsPosition2D transformA, PhysicsPosition2D transformB)
        CollisionShape2D shapeA = itemA:GetShape()
        CollisionShape2D shapeB = itemB:GetShape()

        // call appropriate collision action based on shapes of items
        if shapeA is Polygon and shapeB is Polygon
            CollidePolygons(collisionPoints, cast(Polygon, shapeA), transformA, cast(Polygon, shapeB), transformB)
        elseif shapeA is Circle and shapeB is Circle
            CollideCircles(collisionPoints, cast(Circle, shapeA), transformA, cast(Circle, shapeB), transformB)
        elseif shapeA is Polygon and shapeB is Circle
            CollidePolygonAndCircle(collisionPoints, cast(Polygon, shapeA), transformA, cast(Circle, shapeB), transformB)
        elseif shapeB is Polygon and shapeA is Circle
            CollidePolygonAndCircle(collisionPoints, cast(Polygon, shapeB), transformB, cast(Circle, shapeA), transformA)
        end
    end


    Vector2 localTangent
    Vector2 localNormal
    Vector2 planePoint
    Vector2 tangent
    Vector2 v11
    Vector2 v12
    Array<ClipVertex2D> clipPoints1
    Array<ClipVertex2D> clipPoints2

    /*
    This action finds the LocalCollisionPoints2D for a polygon-polygon collision.
    */
    private action CollidePolygons(LocalCollisionPoints2D collisionPoints, Polygon polygonA, PhysicsPosition2D transformA, Polygon polygonB, PhysicsPosition2D transformB)
        collisionPoints:pointCount = 0
        EdgeResult2D results1
        EdgeResult2D results2

        number totalRadius = polygonA:GetRadius() + polygonB:GetRadius()

        //when there is no collision
        FindMaxSeparation(results1, polygonA, transformA, polygonB, transformB)
        if results1:GetSeparation() > totalRadius
            return now
        end

        //when there is no collision
        FindMaxSeparation(results2, polygonB, transformB, polygonA, transformA)
        if results2:GetSeparation() > totalRadius
            return now
        end

        Polygon poly1   //this would be the reference polygon
        Polygon poly2   //this would be the incident polygon 
        PhysicsPosition2D xf1
        PhysicsPosition2D xf2
        integer edge1 = 0   //this stores the index of the reference edge
        boolean flip = false
        number k_tol = 0.1 * 0.005

        if results2:GetSeparation() > results1:GetSeparation() + k_tol
            poly1 = polygonB    //B becomes the reference polygon
            poly2 = polygonA    //A becomes the indicent polygon
            xf1 = transformB
            xf2 = transformA
            edge1 = results2:GetEdgeIndex()
            collisionPoints:SetType(collisionPoints:FACE_B)
            flip = true
        else
            poly1 = polygonA
            poly2 = polygonB
            xf1 = transformA
            xf2 = transformB
            edge1 = results1:GetEdgeIndex()
            collisionPoints:SetType(collisionPoints:FACE_A)
            flip = false
        end
        number xf1qs = xf1:GetSine()
        number xf1qc = xf1:GetCosine()

        Array<ClipVertex2D> incidentEdge
        repeat 2 times
            ClipVertex2D vertex
            incidentEdge:Add(vertex)
        end

        FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2)

        integer count1 = poly1:GetVertexCount()
        Array<Vector2> vertices1 = poly1:GetVertices()

        Vector2 localTangent
        Vector2 localNormal
        Vector2 planePoint
        Vector2 tangent
        Vector2 v11
        Vector2 v12

        integer iv1 = edge1
        integer iv2 = 0
        if edge1 + 1 < count1
            iv2 = edge1 + 1
        end

        v11:Set(vertices1:Get(iv1))
        v12:Set(vertices1:Get(iv2))
        localTangent:SetX(v12:GetX() - v11:GetX())
        localTangent:SetY(v12:GetY() - v11:GetY())
        localTangent:Normalize()

        localNormal:SetX(1 * localTangent:GetY())
        localNormal:SetY(-1 * localTangent:GetX())

        planePoint:SetX((v11:GetX() + v12:GetX()) * 0.5)
        planePoint:SetY((v11:GetY() + v12:GetY()) * 0.5)

        tangent:SetX(xf1qc * localTangent:GetX() - xf1qs * localTangent:GetY())
        tangent:SetY(xf1qs * localTangent:GetX() + xf1qc * localTangent:GetY())

        number normalx = 1.0 * tangent:GetY()
        number normaly = -1.0 *  tangent:GetX()

        xf1:MultiplyToOut(xf1, v11, v11)
        xf1:MultiplyToOut(xf1, v12, v12)

        number frontOffset = normalx * v11:GetX() + normaly * v11:GetY()

        number sideOffset1 = -1 * (tangent:GetX() * v11:GetX() + tangent:GetY() * v11:GetY()) + totalRadius
        number sideOffset2 = tangent:GetX() * v12:GetX() + tangent:GetY() * v12:GetY() + totalRadius

        integer np = 0
        
        Array<ClipVertex2D> clipPoints1
        Array<ClipVertex2D> clipPoints2
        repeat 2 times
            ClipVertex2D v1
            ClipVertex2D v2
            clipPoints1:Add(v1)
            clipPoints2:Add(v2)
        end

        tangent:Scale(-1)
        np = ClipSegmentToLine(clipPoints1, incidentEdge, tangent, sideOffset1, iv1)
        tangent:Scale(-1)

        if np < 2
            return now
        end

        np = ClipSegmentToLine(clipPoints2, clipPoints1, tangent, sideOffset2, iv2)

        if np < 2
            return now
        end

        collisionPoints:GetLocalNormal():Set(localNormal)
        collisionPoints:GetLocalPoint():Set(planePoint)

        integer pointCount = 0
        integer i = 0
        repeat while i < collisionPoints:MAX_COLLISION_POINTS
            number separation = normalx * clipPoints2:Get(i):GetVertex():GetX() + normaly * clipPoints2:Get(i):GetVertex():GetY() - frontOffset

            if separation <= totalRadius
                CollisionPoint2D cp = collisionPoints:GetPoints():Get(pointCount)
                Vector2 out = cp:GetLocalPoint()
                number px = clipPoints2:Get(i):GetVertex():GetX() - xf2:GetPosition():GetX()
                number py = clipPoints2:Get(i):GetVertex():GetY() - xf2:GetPosition():GetY()
                out:SetX((xf2:GetCosine() * px + xf2:GetSine() * py))
                out:SetY((-1 * xf2:GetSine() * px + xf2:GetCosine() * py))
                cp:GetIdentifier():Set(clipPoints2:Get(i):GetIdentifier())
                if flip
                    cp:GetIdentifier():Flip()
                end

                pointCount = pointCount + 1
            end

            i = i + 1
        end

        collisionPoints:pointCount = pointCount

    end

    /*
    This action finds the LocalCollisionPoints2D for a circle-circle collision.
    */
    private action CollideCircles(LocalCollisionPoints2D collisionPoints, Circle circleA, PhysicsPosition2D transformA, Circle circleB, PhysicsPosition2D transformB)
        collisionPoints:pointCount = 0

        Vector2 circle1p = circleA:GetSupportVertex()
        Vector2 circle2p = circleB:GetSupportVertex()

        number pAx = (transformA:GetCosine() * circle1p:GetX() - transformA:GetSine() * circle1p:GetY()) + transformA:GetPosition():GetX()
        number pAy = (transformA:GetSine() * circle1p:GetX() + transformA:GetCosine() * circle1p:GetY()) + transformA:GetPosition():GetY()
        number pBx = (transformB:GetCosine() * circle2p:GetX() - transformB:GetSine() * circle2p:GetY()) + transformB:GetPosition():GetX()
        number pBy = (transformB:GetSine() * circle2p:GetX() + transformB:GetCosine() * circle2p:GetY()) + transformB:GetPosition():GetY()
        number dx = pBx - pAx
        number dy = pBy - pAy
        number distSquared = dx * dx + dy * dy

        //when the circles are NOT colliding, return
        number radius = circleA:GetRadius() + circleB:GetRadius()
        if distSquared > radius * radius
            return now
        end

        //when circles are colliding
        collisionPoints:SetType(collisionPoints:CIRCLES)    //in the LocalCollisionPoints2D, ensure that this was a circle & circle collision
        collisionPoints:GetLocalPoint():Set(circle1p)
        collisionPoints:GetLocalNormal():SetZero()
        collisionPoints:SetPointCount(1)
        
        collisionPoints:GetPoints():Get(0):GetLocalPoint():Set(circle2p)
    end

    /*
    This action finds the LocalCollisionPoints2D for a polygon-circle collision.
    */
    private action CollidePolygonAndCircle(LocalCollisionPoints2D collisionPoints, Polygon polygon, PhysicsPosition2D transformA, Circle circle, PhysicsPosition2D transformB)
        collisionPoints:pointCount = 0
        
        Vector2 circle1p = circle:GetSupportVertex()
        number cx = (transformB:GetCosine() * circle1p:GetX() - transformB:GetSine() * circle1p:GetY()) + transformB:GetPosition():GetX()
        number cy = (transformB:GetSine() * circle1p:GetX() + transformB:GetCosine() * circle1p:GetY()) + transformB:GetPosition():GetY()
        number px = cx - transformA:GetPosition():GetX()
        number py = cy - transformA:GetPosition():GetY()
        number cLocalx = (transformA:GetCosine() * px + transformA:GetSine() * py)
        number cLocaly = (-1 * transformA:GetSine() * px + transformA:GetCosine() * py)

        integer normalIndex = 0
        number separation = cx:GetMinimumValue()
        number radius = polygon:GetRadius() + circle:GetRadius()
        number vertexCount = polygon:GetVertexCount()
        number s = 0
        Array<Vector2> vertices = polygon:GetVertices()
        Array<Vector2> normals = polygon:GetNormals()

        integer i = 0
        repeat while i < vertexCount
            Vector2 vertex = vertices:Get(i)
            number tempx = cLocalx - vertex:GetX()
            number tempy = cLocaly - vertex:GetY()
            s = normals:Get(i):GetX() * tempx + normals:Get(i):GetY() * tempy

            if s > radius
                return now
            end

            if s > separation
                separation = s
                normalIndex = i
            end
            i = i + 1
        end

        integer vertIndex1 = normalIndex
        integer vertIndex2 = 0
        if vertIndex1 + 1 < vertexCount
            vertIndex2 = vertIndex1 + 1
        end
        Vector2 v1 = vertices:Get(vertIndex1)
        Vector2 v2 = vertices:Get(vertIndex2)

        if separation < EPSILON
            collisionPoints:pointCount = 1
            collisionPoints:type = collisionPoints:FACE_A
            
            Vector2 normal = normals:Get(normalIndex)
            collisionPoints:GetLocalNormal():SetX(normal:GetX())
            collisionPoints:GetLocalNormal():SetY(normal:GetY())
            collisionPoints:GetLocalPoint():SetX((v1:GetX() + v2:GetX()) * 0.5)
            collisionPoints:GetLocalPoint():SetY((v1:GetY() + v2:GetY()) * 0.5)
            CollisionPoint2D mpoint = collisionPoints:GetPoints():Get(0)
            mpoint:GetLocalPoint():SetX(circle1p:GetX())
            mpoint:GetLocalPoint():SetY(circle1p:GetY())
            mpoint:GetIdentifier():Clear()

            return now
        end

        number tempX = cLocalx - v1:GetX()
        number tempY = cLocaly - v1:GetY()
        number temp2X = v2:GetX() - v1:GetX()
        number temp2Y = v2:GetY() - v1:GetY()
        number u1 = tempX * temp2X + tempY * temp2Y

        number temp3X = cLocalx - v2:GetX()
        number temp3Y = cLocaly - v2:GetY()
        number temp4X = v1:GetX() - v2:GetX()
        number temp4Y = v1:GetY() - v2:GetY()
        number u2 = temp3X * temp4X + temp3Y * temp4Y

        if u1 <= 0
            number dx = cLocalx - v1:GetX()
            number dy = cLocaly - v1:GetY()

            if dx * dx + dy * dy > radius * radius
                return now
            end

            collisionPoints:SetPointCount(1)
            collisionPoints:SetType(collisionPoints:FACE_A)
            collisionPoints:GetLocalNormal():SetX(cLocalx - v1:GetX())
            collisionPoints:GetLocalNormal():SetY(cLocaly - v1:GetY())
            collisionPoints:GetLocalNormal():Normalize()
            collisionPoints:GetLocalPoint():Set(v1)
            collisionPoints:GetPoints():Get(0):GetLocalPoint():Set(circle1p)
            collisionPoints:GetPoints():Get(0):GetIdentifier():Clear()
        elseif u2 <= 0
            number dx = cLocalx - v2:GetX()
            number dy = cLocaly - v2:GetY()
            
            if dx * dx + dy * dy > radius * radius
                return now
            end

            collisionPoints:SetPointCount(1)
            collisionPoints:SetType(collisionPoints:FACE_A)
            collisionPoints:GetLocalNormal():SetX(cLocalx - v2:GetX())
            collisionPoints:GetLocalNormal():SetY(cLocaly - v2:GetY())
            collisionPoints:GetLocalNormal():Normalize()
            collisionPoints:GetLocalPoint():Set(v2)
            collisionPoints:GetPoints():Get(0):GetLocalPoint():Set(circle1p)
            collisionPoints:GetPoints():Get(0):GetIdentifier():Clear()
        else
            number fcx = (v1:GetX() + v2:GetX()) * 0.5
            number fcy = (v1:GetY() + v2:GetY()) * 0.5

            number tx = cLocalx - fcx
            number ty = cLocaly - fcy
            Vector2 normal = normals:Get(vertIndex1)
            separation = tx * normal:GetX() + ty * normal:GetY()

            if separation > radius
                return now
            end

            collisionPoints:SetPointCount(1)
            collisionPoints:SetType(collisionPoints:FACE_A)
            collisionPoints:GetLocalNormal():Set(normals:Get(vertIndex1))
            collisionPoints:GetLocalPoint():SetX(fcx)
            collisionPoints:GetLocalPoint():SetY(fcy)
            collisionPoints:GetPoints():Get(0):GetLocalPoint():Set(circle1p)
            collisionPoints:GetPoints():Get(0):GetIdentifier():Clear()
        end        
    end

    /*
    This action finds the maximum vertex to vertex separation of two polygons.
    */
    private action FindMaxSeparation(EdgeResult2D results, Polygon poly1, PhysicsPosition2D xf1, Polygon poly2, PhysicsPosition2D xf2)
        integer count1 = poly1:GetVertexCount()
        integer count2 = poly2:GetVertexCount()
        Array<Vector2> n1s = poly1:GetNormals()
        Array<Vector2> v1s = poly1:GetVertices()
        Array<Vector2> v2s = poly2:GetVertices()

        PhysicsPosition2D xf
        PhysicsPosition2D A = xf2
        PhysicsPosition2D B = xf1
        Vector2 pool
        xf:sine = A:GetCosine() * B:GetSine() - A:GetSine() * B:GetCosine()
        xf:cosine = A:GetCosine() * B:GetCosine() + A:GetSine() * B:GetSine()
        pool:Set(B:GetPosition()):Subtract(A:GetPosition())
        xf:GetPosition():SetX(A:GetCosine() * pool:GetX() + A:GetSine() * pool:GetY())
        xf:GetPosition():SetY(-1 * A:GetSine() * pool:GetX() + A:GetCosine() * pool:GetY())
        
        integer bestIndex = 0
        number maxSeparation = EPSILON:GetMinimumValue()

        Vector2 v1
        Vector2 n

        integer i = 0
        repeat while i < count1
            n:SetX(xf:GetCosine() * n1s:Get(i):GetX() - xf:GetSine() * n1s:Get(i):GetY())
            n:SetY(xf:GetSine() * n1s:Get(i):GetX() + xf:GetCosine() * n1s:Get(i):GetY())
            v1:SetX(xf:GetCosine() * v1s:Get(i):GetX() - xf:GetSine() * v1s:Get(i):GetY() + xf:GetPosition():GetX())
            v1:SetY(xf:GetSine() * v1s:Get(i):GetX() + xf:GetCosine() * v1s:Get(i):GetY() + xf:GetPosition():GetY())

            number si = EPSILON:GetMaximumValue()
            integer j = 0
            repeat while j < count2
                Vector2 v2sj = v2s:Get(j)
                number sij = n:GetX() * (v2sj:GetX() - v1:GetX()) + n:GetY() * (v2sj:GetY() - v1:GetY())
                if sij < si
                    si = sij
                end

                 j = j + 1
            end

            if si > maxSeparation
                maxSeparation = si
                bestIndex = i
            end

            i = i + 1
        end

        results:SetEdgeIndex(bestIndex)
        results:SetSeparation(maxSeparation)
    end

    /*
    This action finds the edge of the incident polygon that is colliding with
    the reference polygon.
    */
    private action FindIncidentEdge(Array<ClipVertex2D> c, Polygon poly1, PhysicsPosition2D xf1, integer edge1, Polygon poly2, PhysicsPosition2D xf2)
        integer count1 = poly1:GetVertexCount()
        Array<Vector2> normals1 = poly1:GetNormals()

        integer count2 = poly2:GetVertexCount()
        Array<Vector2> vertices2 = poly2:GetVertices()
        Array<Vector2> normals2 = poly2:GetNormals()

        ClipVertex2D c0 = c:Get(0)
        ClipVertex2D c1 = c:Get(1)

        Vector2 v = normals1:Get(edge1)
        number tempx = xf1:GetCosine() * v:GetX() - xf1:GetSine() * v:GetY()
        number tempy = xf1:GetSine() * v:GetX() + xf1:GetCosine() * v:GetY()
        number normals1x = xf2:GetCosine() * tempx + xf2:GetSine() * tempy
        number normals1y = -1 * xf2:GetSine() * tempx + xf2:GetCosine() * tempy

        integer index = 0
        number minDot = EPSILON:GetMaximumValue()
        integer i = 0
        repeat while i < count2
            Vector2 b = normals2:Get(i)
            number dot = normals1x * b:GetX() + normals1y * b:GetY()
            if dot < minDot
                minDot = dot
                index = i
            end

            i = i + 1
        end

        integer i1 = index
        integer i2 = 0
        if i1 + 1 < count2
            i2 = i1 + 1
        end

        Vector2 v1 = vertices2:Get(i1)
        Vector2 out = c0:GetVertex()
        out:SetX((xf2:GetCosine() * v1:GetX() - xf2:GetSine() * v1:GetY()) + xf2:GetPosition():GetX())
        out:SetY((xf2:GetSine() * v1:GetX() + xf2:GetCosine() * v1:GetY()) + xf2:GetPosition():GetY())
        c0:GetIdentifier():SetIndexA(edge1)
        c0:GetIdentifier():SetIndexB(i1)
        c0:GetIdentifier():SetTypeA(c0:GetIdentifier():FACE)
        c0:GetIdentifier():SetTypeB(c0:GetIdentifier():VERTEX)

        Vector2 v2 = vertices2:Get(i2)
        Vector2 out1 = c1:GetVertex()
        out1:SetX((xf2:GetCosine() * v2:GetX() - xf2:GetSine() * v2:GetY()) + xf2:GetPosition():GetX())
        out1:SetY((xf2:GetSine() * v2:GetX() + xf2:GetCosine() * v2:GetY()) + xf2:GetPosition():GetY())
        c1:GetIdentifier():SetIndexA(edge1)
        c1:GetIdentifier():SetIndexB(i2)
        c1:GetIdentifier():SetTypeA(c1:GetIdentifier():FACE)
        c1:GetIdentifier():SetTypeB(c1:GetIdentifier():VERTEX)
    end

    /*
    This action finds the collision point on the incident edge.
    */
    action ClipSegmentToLine(Array<ClipVertex2D> vOut, Array<ClipVertex2D> vIn, Vector2 normal, number offset, integer vertexIndexA) returns integer
        integer numOut = 0
        ClipVertex2D vIn0 = vIn:Get(0)
        ClipVertex2D vIn1 = vIn:Get(1)
        Vector2 vIn0v = vIn0:GetVertex()
        Vector2 vIn1v = vIn1:GetVertex()
        
        number distance0 = normal:DotProduct(vIn0v) - offset
        number distance1 = normal:DotProduct(vIn1v) - offset

        if distance0 <= 0
            vOut:Get(numOut):Set(vIn0)
            numOut = numOut + 1
        end

        if distance1 <= 0
            vOut:Get(numOut):Set(vIn1)
            numOut = numOut + 1
        end

        if distance0 * distance1 < 0
            number interp = distance0 / (distance0 - distance1)

            ClipVertex2D vOutNO = vOut:Get(numOut)
            vOutNO:GetVertex():SetX(vIn0v:GetX() + interp * (vIn1v:GetX() - vIn0v:GetX()))
            vOutNO:GetVertex():SetY(vIn0v:GetY() + interp * (vIn1v:GetY() - vIn0v:GetY()))

            vOutNO:GetIdentifier():SetIndexA(vertexIndexA)
            vOutNO:GetIdentifier():SetIndexB(vIn0:GetIdentifier():GetIndexB())
            vOutNO:GetIdentifier():SetTypeA(vOutNO:GetIdentifier():VERTEX)
            vOutNO:GetIdentifier():SetTypeB(vOutNO:GetIdentifier():FACE)

            numOut = numOut + 1
        end

        return numOut
    end

    action SetInCollisionGroup(boolean flag)
        islandFlag = flag
    end

    action InCollisionGroup returns boolean
        return islandFlag
    end

    action SetTimeOfImpactSolved(boolean flag)
        toiFlag = flag
    end

    action TimeOfImpactSolved returns boolean
        return toiFlag
    end

    action SetTimeOfImpactCount(integer count)
        toiCount = count
    end

    action GetTimeOfImpactCount returns integer
        return toiCount
    end

    action SetTimeOfImpact(number toi)
        me:toi = toi
    end

    action GetTimeOfImpact returns number
        return toi
    end
end