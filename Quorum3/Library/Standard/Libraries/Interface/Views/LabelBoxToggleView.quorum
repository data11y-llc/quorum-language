package Libraries.Interface.Views

use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Font
use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Views.ControlView

class LabelBoxToggleView is Item2D, ToggleView
    
    Drawable border
    Drawable background
    Drawable clickEffect
    Drawable mouseOverEffect
    Label label

    boolean toggled = false

    ColorGroup backgroundColor = undefined
    ColorGroup borderColor = undefined

    ColorGroup selectedBackgroundColor = undefined
    ColorGroup selectedBorderColor = undefined

    integer borderThickness = 0

    action Initialize(ColorGroup backgroundColor, ColorGroup borderColor, ColorGroup selectedBackgroundColor, ColorGroup selectedBorderColor)
        background:LoadFilledRectangle(1, 1, backgroundColor)
        border:LoadFilledRectangle(1, 1, borderColor)
        Add(border)
        Add(background)

        me:backgroundColor = backgroundColor
        me:borderColor = borderColor
        me:selectedBackgroundColor = selectedBackgroundColor
        me:selectedBorderColor = selectedBorderColor

        InitializeEffects()
        SetText("")
    end

    action Initialize(ColorGroup backgroundColor, ColorGroup borderColor, ColorGroup selectedBackgroundColor, ColorGroup selectedBorderColor, text labelText)
        background:LoadFilledRectangle(1, 1, backgroundColor)
        border:LoadFilledRectangle(1, 1, borderColor)
        Add(border)
        Add(background)

        me:backgroundColor = backgroundColor
        me:borderColor = borderColor
        me:selectedBackgroundColor = selectedBackgroundColor
        me:selectedBorderColor = selectedBorderColor

        InitializeEffects()
        SetText(labelText)
    end

    private action InitializeEffects
        Color color

        Gradient clickGradient
        Color fadedBlack = color:CustomColor(0, 0, 0, 0.25)
        Color transparentBlack = color:CustomColor(0, 0, 0, 0.1)
        clickGradient:Set(transparentBlack, transparentBlack, fadedBlack, fadedBlack)

        clickEffect:LoadFilledRectangle(1, 1, clickGradient)

        Gradient mouseOverGradient
        Color fadedWhite = color:CustomColor(1, 1, 1, 0.25)
        Color transparentWhite = color:CustomColor(1, 1, 1, 0.1)
        mouseOverGradient:Set(transparentWhite, transparentWhite, fadedWhite, fadedWhite)

        mouseOverEffect:LoadFilledRectangle(1, 1, mouseOverGradient)

        Add(label)
    end

    action SetText(text newText)
        label:SetText(newText)
        
        number labelWidth = label:GetWidth()
        number labelHeight = label:GetHeight()

        // Adjust the label upwards if it takes multiple lines.
        number yOffset = labelHeight - label:GetLineHeight()

        label:SetPosition(cast(integer, (background:GetWidth() * background:GetScaleX() - labelWidth) / 2 + background:GetX()), cast(integer, (background:GetHeight() * background:GetScaleY() - labelHeight) / 2 + background:GetY() + yOffset))
    end

    action GetText returns text
        return label:GetText()
    end

    action SetFont(Font font)
        label:SetFont(font)
    end

    action GetFont returns Font
        return label:GetFont()
    end

    action SetBorderThickness(integer thickness)
        borderThickness = thickness
    end

    action GetBorderThickness returns integer
        return borderThickness
    end

    action Draw(Painter2D painter)
        parent:Item2D:Draw(painter)
    end

    action UpdateSize(number width, number height)
        if background:GetTexture() = undefined
            return now
        end

        Texture texture = undefined

        if borderThickness > 0
            texture = border:GetTexture()
            number scaleX = width / texture:GetWidth()
            number scaleY = height / texture:GetHeight()
            border:SetScale(scaleX, scaleY)
        end

        texture = background:GetTexture()
        number backgroundWidth = width - borderThickness * 2
        number backgroundHeight = height - borderThickness * 2
        background:SetPosition(borderThickness, borderThickness)
        background:SetScale(backgroundWidth / texture:GetWidth(), backgroundHeight / texture:GetHeight())

        texture = clickEffect:GetTexture()
        clickEffect:SetPosition(borderThickness, borderThickness)
        clickEffect:SetScale(backgroundWidth / texture:GetWidth(), backgroundHeight / texture:GetHeight())

        texture = mouseOverEffect:GetTexture()
        mouseOverEffect:SetPosition(borderThickness, borderThickness)
        mouseOverEffect:SetScale(backgroundWidth / texture:GetWidth(), backgroundHeight / texture:GetHeight())

        label:SetMaximumWidth(background:GetWidth() * background:GetScaleX())
        // Force the label to readjust to its new size.
        SetText(label:GetText())
    end

    action UpdatePosition(number x, number y, number z)
        SetPosition(x, y, z)
    end

    action UpdateRotation(number angle)
        SetRotation(angle)
    end

    action UpdateFlipping(boolean flipX, boolean flipY)
        SetFlipX(flipX)
        SetFlipY(flipY)
    end

    action BeginMouseOver
        Add(mouseOverEffect)
    end

    action EndMouseOver
        Remove(mouseOverEffect)
    end

    action ClickedMouse
        Array<Item2D> items = GetChildren()
        if not items:Has(clickEffect)
            Add(clickEffect)
        end
    end

    action ReleasedMouse
        Remove(clickEffect)
    end

    action GainedSelection
        // TO DO
    end

    action LostSelection
        // TO DO
    end

    action SetToggleState(boolean open)
        if open = toggled
            return now
        end

        if open
            background:SetColor(selectedBackgroundColor)
            border:SetColor(selectedBorderColor)
        else
            background:SetColor(backgroundColor)
            border:SetColor(borderColor)
        end

        toggled = open
    end

    action GetToggleState returns boolean
        return toggled
    end

    action Copy returns ControlView
        LabelBoxToggleView content
        content:Initialize(backgroundColor, borderColor, selectedBackgroundColor, selectedBorderColor)

        content:SetBorderThickness(GetBorderThickness())
        content:SetText(GetText())
        return content
    end
end