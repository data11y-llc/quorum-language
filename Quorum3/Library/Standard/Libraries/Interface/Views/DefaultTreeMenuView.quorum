package Libraries.Interface.Views

use Libraries.Interface.Views.ControlView
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Painter2D
use Libraries.Game.Graphics.Texture
use Libraries.Game.Graphics.TextureFilter
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.PixelMap
use Libraries.Game.Graphics.Format
use Libraries.Game.Graphics.FileTextureData

class DefaultTreeMenuView is Drawable, ToggleView

    boolean open = false

    action Initialize(integer width, integer height)
        SetName("DefaultTreeMenuView")

//        integer longestSide = width
//        if width < height
//            longestSide = height
//        end
//
//        integer xOffset = (longestSide - width) / 2
//        integer yOffset = (longestSide - height) / 2
//
//        // Variables representing a quarter of the width/height of the final
//        // size of the texture we're about to create.
//        integer quarterWidth = width
//        integer quarterHeight = height
//
//        Color color
//
//        PixelMap pixelMap
//        Format format
//        format:SetValue(format:RGBA8888)
//        pixelMap:CreatePixelMap(longestSide, longestSide, format)
//        integer y1 = yOffset
//        integer y2 = yOffset + height
//        integer y3 = yOffset + height / 2
//        pixelMap:FillTriangle(xOffset, y1, xOffset, y2, xOffset + width, y3, color:Black())
//
//        Texture texture
//        TextureFilter minFilter
//        TextureFilter magFilter
//
//        minFilter:ConstructTextureFilter(minFilter:LINEAR)
//        magFilter:ConstructTextureFilter(magFilter:LINEAR)
//
//        texture:SetFilter(minFilter, magFilter)
////        texture:LoadFilledTriangle(quarterWidth, quarterHeight, (3 * quarterWidth)/2, 2 * quarterHeight, quarterWidth, 3 * quarterHeight)
////        texture:LoadFilledTriangle(0, 0, (3 * quarterWidth)/2 - quarterWidth, quarterHeight, 0, 2 * quarterHeight)
////        texture:LoadFilledTriangle(0, 0, 0, height, width, height / 2)
//
//        texture:LoadFromPixelMap(pixelMap)

        Color color
        LoadFilledTriangle(0, 0, 0, 200, 173, 100)

//        Load(texture)

        SetColor(color:Black())
    end

    action Draw(Painter2D painter)
        parent:Drawable:Draw(painter)
    end

    action UpdateSize(number width, number height)
        SetSize(width, height)
    end

    action UpdatePosition(number x, number y, number z)
        SetPosition(x, y, z)
    end
    
    action UpdateRotation(number angle)
        if open
            SetRotation(angle + 90)
        else
            SetRotation(angle)
        end
    end

    action UpdateFlipping(boolean flipX, boolean flipY)
        SetFlipX(flipX)
        SetFlipY(flipY)
    end

    action Copy returns ControlView
        DefaultTreeMenuView newView
        newView:Load(GetTexture())
        return newView
    end

    action SetToggleState(boolean openState)
        if open = openState
            return now
        end

        if openState
            SetRotation(GetRotation() + 90)
        else
            SetRotation(GetRotation() - 90)
        end

        open = not open
    end

    action GetToggleState returns boolean
        return open
    end
end