package Libraries.Interface.Selections

use Libraries.Containers.Support.Pair
use Libraries.Containers.MultipleLineText
use Libraries.Interface.Controls.TextBox

/*
    A selection represents what would be interacted with if the parent is used. The 
    general idea of selection is common across user interface elements. For example, 
    trees have a selection,  which represents the item in the tree that the user is 
    interacting with if the tree itself has a focus. Similarly, text boxes have a 
    very different kind of selection, which represents which region of the text is 
    being interacted with. Selection represents a generic way to get the name of the 
    selection. 

    In the case of TextBoxSelection, this selection is very different from the 
    Tree or Menu Selections. Instead, this selection allows us to obtain 
    information about the location of the Caret or, If multiple characters are 
    selected, the begin and end of the selection region. 
*/
class TextBoxSelection is Selection
    Pair<integer> indices
    Pair<integer> lines
    Pair<integer> lineIndices
    boolean caretAtEnd = true
    boolean textChanged = false

    /* A default constructor for the object. */
    on create
        lines:Set(0, 0)
        indices:Set(0, 0)
        lineIndices:Set(0, 0)
    end

    /*
        This action returns true if there is no selection. In the case of the
        textbox, there is considered to be no selection if the indices are the same.

        Attribute: Returns True if there is no selection.
    */
    action IsEmpty returns boolean
        return indices:AreValuesEqual()
    end

    /* 
        This action is used internally to set the path on the Selection. It 
        should generally not needed by a programmer not working in Quorumâ€™s 
        standard library.
        Attribute: Parameter startIndex The start index
        Attribute: Parameter endIndex The end index
        Attribute: Parameter caretAtEnd Whether the caret is at the end of the text value.
    */
    action Set(integer startIndex, integer endIndex, boolean caretAtEnd, boolean textChanged)
        TextBox textBox = GetTextBox()
        if textBox not= undefined
            MultipleLineText multi = textBox:GetMultipleLineText()
            integer startLine = multi:LineIndexFromCharacterIndex(startIndex)
            integer startLinePosition = startIndex - multi:CharacterIndexFromLineIndex(startLine)

            integer endLine = multi:LineIndexFromCharacterIndex(endIndex)
            integer endLinePosition = endIndex - multi:CharacterIndexFromLineIndex(endLine)

            indices:Set(startIndex, endIndex)
            lines:Set(startLine, endLine)
            lineIndices:Set(startLinePosition, endLinePosition)

            me:caretAtEnd = caretAtEnd
            me:textChanged = textChanged

            SetDisplayName(multi:GetText(startIndex, endIndex))
        end
    end

    /* This action is a helper to obtain the text box without casting. 
        Attribute: Returns The text box
    */
    action GetTextBox returns TextBox
        if GetItem() is TextBox
            TextBox textBox = cast(TextBox, GetItem())
            return textBox
        end
        return undefined
    end

    /* 
        This action obtains the starting index of the selection, which may 
        cross multiple lines. 
        Attribute: Returns The index
    */
    action GetStartIndex returns integer
        return indices:GetFirstValue()
    end
    
    /* 
        This action obtains the ending index of the selection, which may 
        cross multiple lines. 
        Attribute: Returns The index
    */
    action GetEndIndex returns integer
        return indices:GetSecondValue()
    end

    /*
        This action uses the start and end indices to obtain the text selection.
    */
    action GetText returns text
        TextBox textBox = GetTextBox()
        if textBox not= undefined
            return textBox:GetText(GetStartIndex(), GetEndIndex())
        end
        return ""
    end

    /* 
        The GetFirstLine action returns the first line that the selection 
        starts at. For example, if the selection started at index 5 on line 2 
        and ended on index 10 on line 3, this action would return 2.
        Attribute: Returns The first line
    */
    action GetFirstLine returns integer
        return lines:GetFirstValue()
    end

    /* 
        The GetLastLine action returns the first line that the selection 
        starts at. For example, if the selection started at index 5 on line 2 
        and ended on index 10 on line 3, this action would return 3.
        Attribute: Returns The last line.
    */
    action GetLastLine returns integer
        return lines:GetSecondValue()
    end

    /* 
        The GetFirstLineIndex action returns the first index that the selection 
        starts at on the line (not globally). For example, if the selection started at index 5 on line 2 
        and ended on index 10 on line 3, this action would return 5.
        Attribute: Returns The first index
    */
    action GetFirstLineIndex returns integer
        return lineIndices:GetFirstValue()
    end

    /* 
        The GetFirstLineIndex action returns the first index that the selection 
        starts at on the line (not globally). For example, if the selection started at index 5 on line 2 
        and ended on index 10 on line 3, this action would return 10.
        Attribute: Returns The last index.
    */
    action GetLastLineIndex returns integer
        return lineIndices:GetSecondValue()
    end

    /* 
        This action returns true if the caret is at the end of the text value. 
        Attribute: Returns Whether the caret is at the end.
    */
    action IsCaretAtEnd returns boolean
        return caretAtEnd
    end

    /* 
        This action returns true if the current selection was the result of
        insertion or deletion into the TextBox, or false if the selection moved
        without changing the text.

        Attribute: Returns Whether this selection was the result of TextBox insertion or deletion.
    */
    action IsTextChanging returns boolean
        return textChanged
    end

    /* 
        This action empties the selection.
    */
    action Empty
        lines:Set(0, 0)
        indices:Set(0, 0)
        lineIndices:Set(0, 0)
    end
end
