package Libraries.Interface.Controls

use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.DrawableView
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.MenuItemView
use Libraries.Interface.Views.DefaultMenuItemView
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.MenuChangeListener
use Libraries.Containers.Array
use Libraries.Containers.Support.Pair
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Color
use Libraries.Game.GameStateManager

class MenuBar is Control
    Layout defaultLayout = undefined
    LayoutProperties defaultLayoutProperties
    Array<MenuItem> menus

    boolean isSelecting = false

    MenuSelection selection

    Array<MenuChangeListener> listeners

    on create
        FlowLayout layout
        defaultLayout = layout
        SetLayout(defaultLayout)

        defaultLayoutProperties = GetDefaultLayoutProperties()
        defaultLayoutProperties:SetPercentageWidth(1)
        defaultLayoutProperties:SetPercentageY(1)
        defaultLayoutProperties:SetVerticalLayoutMode(defaultLayoutProperties:FIT_CONTENTS)
        defaultLayoutProperties:SetBorderThickness(1)
        defaultLayoutProperties:SetBorderStyle(defaultLayoutProperties:BOTTOM)
        
        Color color
        Gradient gradient
        Color gray = color:CustomColor(0.85, 0.85, 0.9, 1)
        Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
        gradient:Set(gray, gray, lightGray, lightGray)
        defaultLayoutProperties:SetBackgroundColor(gradient)
        defaultLayoutProperties:SetBorderColor(color:Black())

        SetInputGroup("MenuBar")

        // Necessary for keyboard input to work correctly.
        SetFocusable(true)

        selection:Initialize(me)
        SetAccessibilityCode(parent:Item:MENU_BAR)
        SetName("Menu Bar")
    end

    action Add(Array<MenuItem> menuHeaders)
        integer counter = 0
        repeat while counter < menuHeaders:GetSize()
            MenuItem menu = menuHeaders:Get(counter)
            Add(menu)
            counter = counter + 1
        end
    end

    action Add(MenuItem item)
        menus:Add(item)
        parent:Item2D:Add(item)
        item:SetMenuBar(me)
    end

    action GetSelection returns MenuSelection
        return selection
    end

    action GetMultipleSelection returns Array<MenuSelection>
        return undefined
    end

    action HasMultipleSelection returns boolean
        return false
    end

    action Close
        integer counter = 0
        repeat while counter < menus:GetSize()
            menus:Get(counter):Close()
            counter = counter + 1
        end
        SetSelectingState(false)
    end

    action Select(Array<MenuItem> path)
        if path:IsEmpty()//if the user sent an empty path, deselect everything 
            Deselect()
            return now
        end
        Array<MenuItem> pathCopy = path:CopyToArray()
        MenuItem item = undefined

        if not path:IsEmpty()
            item = path:RemoveFromFront()
        end

        Array<MenuItem> selectionPath = selection:GetPath()
        MenuItem oldItem = undefined

        if not selectionPath:IsEmpty()
            oldItem = selectionPath:RemoveFromFront()
        end

        if item not= undefined
            if item = oldItem
                item:UpdateSelection(selectionPath, path)
            else
                if oldItem not= undefined
                    oldItem:RecursiveDeselect(selectionPath)
                end
                item:RecursiveSelect(path)
            end
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(item)

        // Set our selection object with the new path, triggering a selection
        // event.
        selection:Set(pathCopy)
    end

    action Deselect
        MenuSelection selection = GetSelection()
        Deselect(selection:GetPath())
    end

    private action Deselect(Array<MenuItem> path)
        MenuItem item = undefined
        if not path:IsEmpty()
            item = path:RemoveFromFront()
        end

        if item not= undefined
            item:RecursiveDeselect(path)
        end

        // Add the removed portion back to the path to undo our side effects.
        path:AddToFront(item)

        Array<MenuItem> newPath
        selection:Set(newPath)
    end

    private action GetMenuItem(Array<MenuItem> path) returns MenuItem
        if not path:IsEmpty()
            return path:GetFromEnd()
        end
        return undefined
    end

    action IsSelecting returns boolean
        return isSelecting
    end

    action SetSelectingState(boolean selecting)
        if selecting = false
            selection:Empty()
        end
        isSelecting = selecting
    end

    action MoveSelectionLeft
        Array<MenuItem> path = selection:GetPath()
        if path:GetSize() <= 2
            MenuItem name = path:Get(0)
            boolean shouldOpen = name:IsOpen()
            integer counter = 0
            repeat while counter < menus:GetSize()
                MenuItem menu = menus:Get(counter)
                if menu:Equals(name)
                    integer index = counter - 1
                    if index < 0
                        index = menus:GetSize() - 1
                    end
                    path:Set(0, menus:Get(index))
                    if shouldOpen
                        menus:Get(index):Open()
                    else
                        menus:Get(index):Close()
                    end
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        else
            path:RemoveFromEnd()
            Select(path)
        end
    end

    action MoveSelectionRight
        // Do a copy so modifying it here doesn't have side effects on the
        // original selection (we need to preserve it for Select to use).
        Array<MenuItem> path = selection:GetPath():CopyToArray()
        if path:GetSize() = 1
            MenuItem name = path:Get(0)
            boolean shouldOpen = name:IsOpen()
            integer counter = 0
            repeat while counter < menus:GetSize()
                MenuItem menu = menus:Get(counter)
                if menu:Equals(name)
                    integer index = (counter + 1) mod menus:GetSize()
                    path:Set(0, menus:Get(index))
                    if shouldOpen
                        menus:Get(index):Open()
                    else
                        menus:Get(index):Close()
                    end
                    Select(path)
                    return now
                end
                counter = counter + 1
            end
        elseif path:GetSize() > 1
            MenuItem item = GetMenuItem(path)
            if item:IsMenu()
                if not item:IsOpen()
                    item:Open()
                end
                item:GetMenuItems():Next():Select()
            else
                MenuItem name = path:Get(0)
                integer counter = 0
                boolean shouldOpen = name:IsOpen()
                repeat while counter < menus:GetSize()
                    MenuItem menu = menus:Get(counter)
                    if menu:Equals(name)
                        integer index = (counter + 1) mod menus:GetSize()
                        path:Empty()
                        path:Add(menus:Get(index))
                        if shouldOpen
                            menus:Get(index):Open()
                        else
                            menus:Get(index):Close()
                        end
                        Select(path)
                        return now
                    end
                    counter = counter + 1
                end
            end
        elseif not menus:IsEmpty()
            Array<MenuItem> array
            array:Add(menus:Get(0))
            Select(array)
        end
    end

    action MoveSelectionDown
        MenuItem item = GetMenuItem(selection:GetPath())
        item:MenuSelectionDown()
    end

    action MoveSelectionUp
        MenuItem item = GetMenuItem(selection:GetPath())
        item:MenuSelectionUp()
    end

    action ActivateSelection
        if IsSelecting()
            MenuItem item = GetMenuItem(selection:GetPath())
            if item:IsMenu()
                item:Open()
            else
                item:Activate()
                Close()
            end
        end
    end

    action AddMenuChangeListener(MenuChangeListener listener)
        listeners:Add(listener)
    end

    action RemoveMenuChangeListener(MenuChangeListener listener)
        listeners:Remove(listener)
    end

    action NotifyMenuChangeListeners(MenuChangeEvent event)
        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):OpenedMenu(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):ClosedMenu(event)
                counter = counter + 1
            end
        end

        GameStateManager manager
        manager:GetInput():NotifyMenuChangeListeners(event)
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        if properties:GetView2D() not= undefined
            SetView2D(properties:GetView2D())
        elseif GetView2D() = undefined
            LabelBoxView defaultBar
            defaultBar:SetBorderStyle(defaultLayoutProperties:GetBorderStyle())
            defaultBar:SetBorderThickness(cast(integer, defaultLayoutProperties:GetBorderThickness()))
            defaultBar:Initialize(defaultLayoutProperties:GetBackgroundColor(), defaultLayoutProperties:GetBorderColor())
            SetView2D(defaultBar)
        end
    end
end
