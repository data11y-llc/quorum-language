package Libraries.Interface.Controls

use Libraries.Interface.Item2D
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Layouts.VerticalMenuLayout
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.MenuItemLayout
use Libraries.Interface.Views.ControlView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.MenuItemView
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Containers.Support.Pair
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Font
use Libraries.Game.InputSet
use Libraries.Game.GameStateManager
use Libraries.Game.InputTable
use Libraries.Interface.Behaviors.Controls.PassthroughBehavior

class MenuItem is Control
    
    /*
    A panel which contains all of the submenu options for this MenuItem, if this
    MenuItem is a menu. The anchor is used to position the panel depending on
    what direction the panel is expected to open in.
    */
    MenuPanel panel
    Control panelAnchor
    Layout panelLayout = undefined
    LayoutProperties panelProperties = undefined
    LayoutProperties iconProperties = undefined
    LayoutProperties labelProperties = undefined
    LayoutProperties shortcutProperties = undefined
    LayoutProperties arrowProperties = undefined
    LayoutProperties menuProperties = undefined

    /*
    An array containing all elements added to the panel. This is redundant to
    the children list of the panel, but keeping it in this form makes it easier
    to retrieve without constant casting.
    */
    Array<MenuItem> menuItems

    MenuItem parentMenu = undefined
    MenuBar menuBar = undefined

    public constant integer DEFAULT = 0
    public constant integer LEFT = 1
    public constant integer RIGHT = 2
    public constant integer DOWN = 3
    public constant integer UP = 4

    integer direction = DEFAULT

    // The default appearance of MenuItems which are elements of this menu.
    ControlView submenuView = undefined

    // The default appearance of menu panels for this MenuItem and any submenus.
    View2D panelView = undefined

    text shortcut = ""
    boolean open = false

    Behavior activationBehavior = undefined

    Icon icon
    Label label
    Label shortcutLabel
    Icon arrow

    /*
    Layouts for this MenuItem. Which one is used depends on if this MenuItem is
    a child of another MenuItem.
    */
    FlowLayout rootLayout
    MenuItemLayout menuItemLayout

    on create
        SetInputGroup("MenuItem")
        SetAccessibilityCode(parent:Item:MENU_ITEM)

        LayoutProperties defaultProperties = GetDefaultLayoutProperties()
        defaultProperties:SetBackgroundColor(undefined)

        panelProperties = panel:GetDefaultLayoutProperties()
        panelAnchor:Add(panel)
        ManualLayout layout
        panelAnchor:SetLayout(layout)
        panelAnchor:SetName("Panel Anchor")

        iconProperties = icon:GetDefaultLayoutProperties()
        labelProperties = label:GetDefaultLayoutProperties()
        shortcutProperties = shortcutLabel:GetDefaultLayoutProperties()
        arrowProperties = arrow:GetDefaultLayoutProperties()
        menuProperties = GetDefaultLayoutProperties()

        Color color
        menuProperties:SetSelectionColor(color:CustomColor(0.25, 0.25, 1, 1))

        Font font
        text defaultFontName = GetDefaultFontName()
        if defaultFontName not= undefined
            font:LoadFont(defaultFontName)
            integer defaultFontSize = GetDefaultFontSize()
            font:SetSize(defaultFontSize)
            menuProperties:SetFont(font)
            menuProperties:SetFontSize(defaultFontSize)
        end
        menuProperties:SetVerticalLayoutMode(menuProperties:FIT_FONT)

        menuProperties:SetBorderThickness(1)

        iconProperties:SetHorizontalLayoutMode(iconProperties:MAINTAIN_ASPECT_RATIO)
        iconProperties:SetVerticalLayoutMode(iconProperties:STANDARD)
        iconProperties:SetPercentageWidth(1.0)
        iconProperties:SetPercentageHeight(1)
        iconProperties:SetLeftPadding(6)
        iconProperties:SetTopPadding(4)
        iconProperties:SetBottomPadding(4)

        labelProperties:SetVerticalLayoutMode(labelProperties:FIT_CONTENTS)
        labelProperties:SetLeftPadding(6)
        labelProperties:SetRightPadding(6)
        labelProperties:SetBottomPadding(4)

        shortcutProperties:SetVerticalLayoutMode(shortcutProperties:FIT_CONTENTS)
        shortcutProperties:SetLeftPadding(4)
        shortcutProperties:SetRightPadding(6)
        shortcutProperties:SetBottomPadding(4)

        arrowProperties:SetHorizontalLayoutMode(arrowProperties:MAINTAIN_ASPECT_RATIO)
        arrowProperties:SetVerticalLayoutMode(arrowProperties:STANDARD)
        arrowProperties:SetPercentageWidth(1.0)
        arrowProperties:SetPercentageHeight(0.5)
        arrowProperties:SetRightPadding(6)
        arrowProperties:SetTopPadding(4)
        arrowProperties:SetBottomPadding(4)

        label:SetName("Label")
        icon:SetName("Icon")
        shortcutLabel:SetName("Shortcut")
        arrow:SetName("Arrow")
        arrow:Hide()

        Add(icon)
        Add(label)
        Add(shortcutLabel)
        Add(arrow)
    end

    action GetDefaultFontName returns text
        Font font
        if font:FontIsAvailable("Arial")
            return "Arial"
        else
            return parent:Control:GetDefaultFontName()
        end
    end

    action GetDefaultFontSize returns integer
        return 14
    end

    action SetShortcut(InputSet set)
        text name = set:GetDisplayName()
        GameStateManager manager
        InputTable table = manager:GetGame():GetDefaultInputTable()
        PassthroughBehavior behave
        behave:SetControl(me)
        table:Add(set, behave)
        SetShortcut(name)
    end

    action Add(MenuItem item)

        MenuBar bar = GetMenuBar()
        MenuItemView menuView = undefined

        if menuItems:IsEmpty() and GetParentMenu() not= undefined
            arrow:Show()
        end

        item:SetMenuBar(menuBar)
        item:SetParentMenu(me)
        panel:Add(item)
        menuItems:Add(item)

        if item:GetMenuDirection() = DEFAULT
            item:SetMenuDirection(DEFAULT)
        end
    end

    action Add(Array<MenuItem> items)
        integer counter = 0
        repeat while counter < items:GetSize()
            Add(items:Get(counter))
            counter = counter + 1
        end
    end

    action RemoveMenuItem(MenuItem item)
        menuItems:Remove(item)
        panel:Remove(item)
    end

    action SetMenuDirection(integer direction)
        if panelLayout = undefined
            VerticalMenuLayout layout
            panelLayout = layout
        end

        me:direction = direction

        if direction = DEFAULT
            if GetParentMenu() = undefined
                direction = DOWN
            else
                direction = RIGHT
            end
        end

        if direction = LEFT
            panelProperties:SetPercentageOriginX(1)
            panelProperties:SetPercentageOriginY(1)
            panelProperties:SetPercentageX(0)
            panelProperties:SetPercentageY(1)
        elseif direction = RIGHT
            panelProperties:SetPercentageOriginX(0)
            panelProperties:SetPercentageOriginY(1)
            panelProperties:SetPercentageX(1)
            panelProperties:SetPercentageY(1)
        elseif direction = DOWN
            panelProperties:SetPercentageOriginX(0)
            panelProperties:SetPercentageOriginY(1)
            panelProperties:SetPercentageY(0)
            panelProperties:SetPercentageX(0)
        elseif direction = UP
            panelProperties:SetPercentageOriginX(0)
            panelProperties:SetPercentageOriginY(0)
            panelProperties:SetPercentageX(0)
            panelProperties:SetPercentageY(1)
        end
    end

    action GetMenuDirection returns integer
        return direction
    end

    action Open
        if not open and (not menuItems:IsEmpty())
            if panel:GetInterfaceScale() not= GetInterfaceScale()
                panel:SetInterfaceScale(GetInterfaceScale())
            end

            open = true
            Add(panelAnchor)
            panel:Resize()
            PositionPanel()
            
            MenuBar bar = GetMenuBar()
            if bar not= undefined
                MenuChangeEvent event
                event:Set(bar, me, event:OPENED)
                bar:NotifyMenuChangeListeners(event)
            end
        end
    end

    private action PositionPanel
        if direction = LEFT
            panelAnchor:SetPosition(-panel:GetWidth(), GetHeight())
        elseif direction = RIGHT
            panelAnchor:SetPosition(GetWidth(), GetHeight())
        elseif direction = DOWN
            panelAnchor:SetPosition(0, 0)
        elseif direction = UP
            panelAnchor:SetPosition(0, GetHeight() + panel:GetHeight())
        end
    end

    action Close
        if open
            integer counter = 0

            repeat while counter < menuItems:GetSize()
                MenuItem item = menuItems:Get(counter)
                item:Close()
                counter = counter +  1
            end

            open = false
            Remove(panelAnchor)

            MenuBar bar = GetMenuBar()
            if bar not= undefined
                MenuChangeEvent event
                event:Set(bar, me, event:CLOSED)
                bar:NotifyMenuChangeListeners(event)
            end
        end
        LostSelection()
        selectionIndex = 0
    end

    action IsOpen returns boolean
        return open
    end

    action SetShortcut(text shortcut)
        me:shortcut = shortcut
    end
    
    action GetShortcut returns text
        return shortcut
    end

    action SetAppearance(MenuItemView content)
        content:SetText(GetName())
        content:SetShortcut(GetShortcut())
        if not (menuItems:IsEmpty()) and GetMenuBar() not= undefined
            content:EnableMenuArrow(true)
            GetMenuBar():Resize()
        else
            content:EnableMenuArrow(false)
        end

//        SetView2D(content)
        SetSize(content:GetViewWidth(), content:GetViewHeight())
    end

    action SetMenuAppearance(MenuItemView menuView)

        if menuView = undefined
            return now
        end

        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D i = menuItems:Get(counter)
            
            if i is MenuItem
                MenuItem item = cast(MenuItem, i)
                MenuItemView copy = cast(MenuItemView, menuView:Copy())
                item:SetAppearance(copy)
                item:SetMenuAppearance(menuView)
            end
            counter = counter + 1
        end
    end

    action GetMenuBar returns MenuBar
        return menuBar
    end

    action SetMenuBar(MenuBar bar)
        menuBar = bar

        integer counter = 0
        repeat while counter < menuItems:GetSize()
            MenuItem child = menuItems:Get(counter)
            child:SetMenuBar(bar)
            counter = counter + 1
        end
    end

    action GetParentMenu returns MenuItem
        return parentMenu
    end

    action SetParentMenu(MenuItem menu)
        parentMenu = menu
    end

    action SetBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action GetActivationBehavior returns Behavior
        return activationBehavior
    end

    action ClickedMouse
        parent:Control:ClickedMouse()

        MenuBar bar = GetMenuBar()
        if bar not= undefined
            if bar:IsSelecting()
                Activate()
                MenuBar menuBar = GetMenuBar()
                if menuBar not= undefined
                    menuBar:Close()
                end
            else
                Select()
            end
        else
            Activate()
        end
    end

    action BeginMouseOver
        MenuBar bar = GetMenuBar()
        if bar not= undefined and bar:IsSelecting()
            if not open
                Open()
            end
            Select()
        end
    end

    action GainedSelection
        parent:Control:GainedSelection()
        if GetView2D() is LabelBoxView
            LabelBoxView view = cast(LabelBoxView, GetView2D())
            LayoutProperties properties = GetDefaultLayoutProperties()
            ColorGroup useColor = properties:GetSelectionColor()
            if useColor not= undefined
                Color c = useColor:GetBottomLeft()
                view:SetBackgroundColor(useColor)
            end
        end

        MenuBar menuBar = GetMenuBar()
        if menuBar not= undefined
            menuBar:SetSelectingState(true)
        end
    end

    action LostSelection
        parent:Control:LostSelection()
        parent:Control:GainedSelection()
        if GetView2D() is LabelBoxView
            LabelBoxView view = cast(LabelBoxView, GetView2D())
            LayoutProperties properties = GetDefaultLayoutProperties()
            if properties:GetBackgroundColor() not= undefined
                view:SetBackgroundColor(properties:GetBackgroundColor())
            end
        end
        if open
            Close()
        end
    end

    action Select
        // Don't actually select here! Go to MenuBar and ask it to select us.
        // We do this to allow the MenuBar to fully update its information,
        // deselect the previous selection, and prevent infinite loops.
        if menuBar not= undefined
            menuBar:Select(GetMenuPath())
        end
    end

    action Deselect
        // Don't actually select here! Go to MenuBar and ask it to deselect us.
        // We do this to allow the MenuBar to fully update its information,
        // deselect this, and prevent infinite loops.
        if menuBar not= undefined
            menuBar:Deselect()
        end
    end

    action GetMenuItems returns Iterator<MenuItem>
        return menuItems:GetIterator()
    end

    action UpdateSelection(Array<MenuItem> oldPath, Array<MenuItem> newPath)

        MenuItem oldItem = undefined
        MenuItem newItem = undefined

        if not oldPath:IsEmpty()
            oldItem = oldPath:RemoveFromFront()
        end

        if not newPath:IsEmpty()
            newItem = newPath:RemoveFromFront()
        end

        if oldItem = newItem
            if oldItem = undefined
                return now
            else
                if oldItem not= undefined
                    oldItem:UpdateSelection(oldPath, newPath)
                end
            end
        else
            if oldItem not= undefined
                oldItem:RecursiveDeselect(oldPath)
            end
            if newItem not= undefined
                newItem:RecursiveSelect(newPath)
            end
        end
    end

    action RecursiveSelect(Array<MenuItem> path)
        GainedSelection()
        if not path:IsEmpty()
            MenuItem item = path:RemoveFromFront()
            if item not= undefined
                item:RecursiveSelect(path)
            end
        end
    end

    action RecursiveDeselect(Array<MenuItem> path)
        if not path:IsEmpty()
            MenuItem item = path:RemoveFromFront()
            if item not= undefined
                item:RecursiveDeselect(path)
            end
        end
        LostSelection()
    end

    action GetIconWidth returns number
        if icon:IsShowing()
            Font font = GetDefaultLayoutProperties():GetFont()
            if font not= undefined
                number aspectRatio = 1.0
                LayoutProperties iconProperties = icon:GetDefaultLayoutProperties()
                if iconProperties:GetHorizontalLayoutMode() = iconProperties:MAINTAIN_ASPECT_RATIO
                    aspectRatio = iconProperties:GetPercentageWidth()
                end

                return (font:GetLineHeight() * aspectRatio) + iconProperties:GetLeftPadding() + iconProperties:GetRightPadding()
            end
        end
        return 0
    end

    action GetNameWidth returns number
        if label:IsShowing()
            LayoutProperties properties = label:GetDefaultLayoutProperties()
            return label:GetWidth() + properties:GetLeftPadding() + properties:GetRightPadding()
        else
            return 0
        end
    end

    action GetShortcutWidth returns number
        if shortcutLabel:IsShowing() and shortcutLabel:GetText() not= ""
            LayoutProperties properties = label:GetDefaultLayoutProperties()
            return shortcutLabel:GetWidth() + properties:GetLeftPadding() + properties:GetRightPadding()
        else
            return 0
        end
    end

    action GetSubmenuIconWidth returns number
        if arrow:IsShowing()
            Font font = GetDefaultLayoutProperties():GetFont()
            if font not= undefined
                number aspectRatio = 1.0
                LayoutProperties arrowProperties = arrow:GetDefaultLayoutProperties()
                if arrowProperties:GetHorizontalLayoutMode() = arrowProperties:MAINTAIN_ASPECT_RATIO
                    aspectRatio = arrowProperties:GetPercentageWidth()
                end

                return (font:GetLineHeight() * aspectRatio) + arrowProperties:GetLeftPadding() + arrowProperties:GetRightPadding()
            end
        end
        return 0
    end

    action IsMenu returns boolean
        return not menuItems:IsEmpty()
    end

    action MenuSelectionDown
        if GetParentMenu() not= undefined
            GetParentMenu():MenuSelectionDown(me)
        elseif menuItems:GetSize() > 0
            if not open
                Open()
            end
            menuItems:Get(0):Select()
        end
    end

    private action MenuSelectionDown(MenuItem previous)
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D item = menuItems:Get(counter)
            if item:Equals(previous)

                // Select next item in the list, if there is one.
                if counter + 1 < menuItems:GetSize()
                    menuItems:Get(counter + 1):Select()
                end

                return now
            end
            counter = counter + 1
        end
    end

    action MenuSelectionUp
        if GetParentMenu() not= undefined
            GetParentMenu():MenuSelectionUp(me)
        elseif menuItems:GetSize() > 0
            if not open
                Open()
            end
            menuItems:Get(menuItems:GetSize() - 1):Select()
        end
    end

    private action MenuSelectionUp(MenuItem previous)
        integer counter = 0
        repeat while counter < menuItems:GetSize()
            Item2D item = menuItems:Get(counter)
            if item:Equals(previous)

                // Select the previous element in the menu, if there is one.
                if counter - 1 >= 0
                    menuItems:Get(counter - 1):Select()
                end

                return now
            end
            counter = counter + 1
        end
    end

    action GetMenuPath returns Array<MenuItem>
        Array<MenuItem> path
        path:Add(me)
        if parentMenu not= undefined
            Array<MenuItem> a = parentMenu:GetMenuPath(path)
            return a
        end
        return path
    end

    private action GetMenuPath(Array<MenuItem> array) returns Array<MenuItem>
        array:AddToFront(me)
        if parentMenu not= undefined
            return parentMenu:GetMenuPath(array)
        end

        return array
    end

    action Activate(BehaviorEvent event)
        if IsMenu()
            if open
                Close()
            else
                Open()
            end
        end

        parent:Control:Activate(event)
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        ColorGroup backgroundColor = properties:GetBackgroundColor()
        ColorGroup selectionColor = properties:GetSelectionColor()

        if GetParentMenu() = undefined
            rootLayout:SetIgnoreHidden(true)
            SetLayout(rootLayout)

            shortcutLabel:Hide()
            arrow:Hide()

            if backgroundColor = undefined
                Color color
                Gradient gradient
                Color gray = color:CustomColor(0.85, 0.85, 0.9, 1)
                Color lightGray = color:CustomColor(0.9, 0.9, 0.9, 1)
                gradient:Set(gray, gray, lightGray, lightGray)
                backgroundColor = gradient
            end

            properties:SetHorizontalLayoutMode(menuProperties:FIT_CONTENTS)
        else
            SetLayout(menuItemLayout)

            properties:SetHorizontalLayoutMode(menuProperties:STANDARD)
            properties:SetPercentageWidth(1.0)

            SetMenuDirection(RIGHT)

            if backgroundColor = undefined
                Color color
                color:SetColor(0.85, 0.85, 0.9, 1)
                backgroundColor = color
            end
        end

        properties:SetBackgroundColor(backgroundColor)

        panel:SetName(GetName() + " Menu Panel")
        panelProperties:SetBorderThickness(properties:GetBorderThickness())

        Color color

        LabelBoxView content
        content:SetBorderThickness(cast(integer, properties:GetBorderThickness()))
        content:SetBorderStyle(content:LEFT + content:RIGHT + content:BOTTOM)
        content:Initialize(color:CustomColor(1, 1, 1, 0), color:Black())
        panelView = content

        SetMenuDirection(direction)
        panel:SetView2D(panelView)

        if menuProperties:GetIcon() not= undefined
            icon:Load(menuProperties:GetIcon())
            icon:SetColor(menuProperties:GetIconColor())
            icon:Show()
        else
            icon:LoadFilledRectangle(1, 1, color:Magenta())
            icon:Hide()
        end

        arrow:SetColor(menuProperties:GetFontColor())
        arrow:LoadFilledTriangle(0, 0, 0, 200, 173, 100, menuProperties:GetFontColor())

        text labelText = properties:GetLabelText()
        if labelText = ""
            labelText = GetName()
        end


        label:SetFont(properties:GetFont())
        label:SetSize(cast(integer, properties:GetFontSize() * properties:GetInterfaceScale()))
        label:SetText(labelText)

//        Font shortcutFont
//        shortcutFont:LoadFont("Arial")
//        shortcutLabel:SetFont(shortcutFont)
        shortcutLabel:SetSize(cast(integer, properties:GetFontSize() * properties:GetInterfaceScale()))
        shortcutLabel:SetText(shortcut)

        if shortcut = ""
            shortcutLabel:Hide()
        else
            shortcutLabel:Show()
        end

        LabelBoxView view
        view:Initialize(backgroundColor, color:Black())
        SetView2D(view)

        parent:Control:LoadGraphics(properties)
    end
end