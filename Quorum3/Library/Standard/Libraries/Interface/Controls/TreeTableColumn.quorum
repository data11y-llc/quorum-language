package Libraries.Interface.Controls
use Libraries.Containers.Array
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties

class TreeTableColumn is Control
    Array<TreeTableCell> cells
    boolean hasHeader = false
    TreeTable treeTable = undefined

    on create
        FlowLayout layout
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetVerticalLayoutMode(properties:FIT_CONTENTS)

        properties:SetPixelWidth(100)
    end

    action Add(TreeTableCell cell)
        cells:Add(cell)

        parent:Control:Add(cell)
    end

    action Add(integer position, TreeTableCell cell)
        cells:Add(position, cell)

        parent:Control:Add(position, cell)
    end

    action GetCell(integer i) returns TreeTableCell
        return cells:Get(i)
    end

    action RemoveCell(TreeTableCell cell)
        cells:Remove(cell)
        parent:Control:Remove(cell)
    end

    action RemoveCellAt(integer position)
        TreeTableCell c = cells:RemoveAt(position)
        parent:Control:Remove(position)
    end

    action GetSize returns integer
        return cells:GetSize()
    end

    action IsCellsEmpty returns boolean
        return cells:IsEmpty()
    end

    action SetTreeTable(TreeTable table)
        treeTable = table
    end

    action GetTreeTable returns TreeTable
        return treeTable
    end

    /*
    This action will return the index of the given TreeTableCell within the Column, or
    returns -1 if the TreeTableCell wasn't in this Column.
    */
    action GetCellIndex(TreeTableCell cell) returns integer
        return cells:GetFirstLocation(cell)
    end

    action Empty 
        cells:Empty()
        parent:Item2D:Empty()
    end

    /*
    This action is used to determine if this column is the first column of a
    TreeTable. If it is, the cells in this column may have buttons to expand
    rows. Otherwise, this action will return false.
    */
    action IsFirstColumn returns boolean
        return treeTable not= undefined and treeTable:IsFirstColumn(me)
    end

    action AddCell(integer index, TreeTableRow row)
        TreeTableCell cell = CreateCell()
        cell:SetRow(row)
        Add(index, cell)
        SetCell(index, row)
    end

    action Refresh
        integer counter = 0
        repeat while counter < cells:GetSize()
            TreeTableCell cell = cells:Get(counter)
            SetCell(counter, cell:GetRow())
            counter = counter + 1
        end
    end

    blueprint action CreateCell returns TreeTableCell

    blueprint action SetCell(integer index, TreeTableRow row)

end