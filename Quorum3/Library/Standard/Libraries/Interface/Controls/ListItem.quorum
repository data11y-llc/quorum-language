package Libraries.Interface.Controls

use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Views.SelectionHighlightView
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.ControlActivationEvent

/*
The ListItem class is used internally to represent an entry in a list. Users
typically won't need to interact with this class unless they want to create a
unique way of representing an entry in the list. For simple use cases, use the
actions in List to add and remove entries.
*/
class ListItem is Control

    Label label
    Icon icon

    // The Behavior to use when the item is activated (e.g. by double click).
    // If this is undefined, the item will attempt to use a Behavior defined by
    // the List instead.
    Behavior activationBehavior = undefined

    on create
        FlowLayout layout
        layout:SetIgnoreHidden(true)
        SetLayout(layout)

        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetPercentageWidth(1.0)
        properties:SetVerticalLayoutMode(properties:FIT_FONT)

        Font font
        text defaultFontName = GetDefaultFontName()
        if defaultFontName not= undefined
            font:LoadFont(defaultFontName)
            integer defaultFontSize = GetDefaultFontSize()
            font:SetSize(defaultFontSize)
            properties:SetFont(font)
            properties:SetFontSize(defaultFontSize)
        end

        Add(icon)
        Add(label)

        label:SetLeftPadding(4)
        icon:SetLeftPadding(4)
        icon:SetHorizontalLayoutMode(icon:parent:Control:MAINTAIN_ASPECT_RATIO)
        icon:SetVerticalLayoutMode(icon:parent:Control:STANDARD)
        icon:SetPercentageWidth(1.0)
        icon:SetPercentageHeight(1.0)

        Color color
        SetFontColor(color:Black())
        SetSelectionFontColor(color:White())
        SetSelectionColor(color:CustomColor(9/255.0, 80/255.0, 208/255.0, 1))

        SetInputGroup("ListItem")
        SetName("List Item")
    end

    action SetText(text value)
        label:SetText(value)
    end

    action GetText returns text
        return label:GetText()
    end

    action ClickedMouse
        parent:Control:ClickedMouse()
        Select()
    end

    action Select
        // Don't actually select here! Go to the List and ask it to 
        // select us. We do this to allow the List to update the
        // selection and deselect the old selection.
        List list = GetList()
        if list not= undefined
            list:Select(me)
        end
    end

    action Deselect
        // Don't actually select here! Go to the List and ask it to 
        // select us. We do this to allow the List to update the
        // selection and deselect the old selection.
        List list = GetList()
        if list not= undefined
            list:Deselect()
        end
    end

    action GainedSelection
        parent:Control:GainedSelection()

        if GetSelectionFontColor() not= undefined
            label:SetColor(GetSelectionFontColor())
        end
    end

    action LostSelection
        parent:Control:LostSelection()

        if GetFontColor() not= undefined
            label:SetColor(GetFontColor())
        end
    end

    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        if GetView2D() = undefined
            SelectionHighlightView view
            if properties:GetSelectionColor() not= undefined
                view:Initialize(properties:GetSelectionColor())
            else
                Color color
                view:Initialize(color:CustomColor(9/255.0, 80/255.0, 208/255.0, 1))
            end
            SetView2D(view)
        end

        if properties:GetIcon() not= undefined and icon:GetTexture() not= properties:GetIcon():GetTextureField()
            icon:Load(properties:GetIcon():GetTextureField())
        end

        if properties:GetIconColor() not= undefined
            icon:SetColor(properties:GetIconColor())
        end

        if icon:GetTexture() = undefined
            icon:Hide()
            if icon:GetHorizontalLayoutMode() = icon:parent:Control:MAINTAIN_ASPECT_RATIO
                icon:SetPercentageWidth(icon:GetRegionWidth() / cast(number, icon:GetRegionHeight()))
            end
        else
            icon:Show()
        end

        if properties:GetFont() not= label:GetFont()
            label:SetFont(properties:GetFont())
        end

        if label:GetFont() not= undefined
            if properties:GetFontSize() not= label:GetSize()
                label:SetSize(properties:GetFontSize())
            end
        end
    end

    /*
    This action returns the List that this ListItem has been added to, if such a
    List is present. If this ListItem's parent isn't a List, or if it has no
    parent Item, this action returns undefined instead.

    Attribute: Returns The parent List containing this ListItem.
    */
    action GetList returns List
        if GetParent() is List
            return cast(List, GetParent())
        else
            return undefined
        end
    end

    action GetActivationBehavior returns Behavior
        return activationBehavior
    end

    action SetActivationBehavior(Behavior behavior)
        activationBehavior = behavior
    end

    action Activate(BehaviorEvent event)
        if GetActivationBehavior() not= undefined
            parent:Control:Activate(event)
        else
            List list = GetList()
            if list = undefined or list:GetItemActivationBehavior() = undefined
                return now
            end

            Behavior behavior = list:GetItemActivationBehavior()

            if not event:GetItem():Equals(me)
                event = event:Copy()
                event:SetItem(me)
            end
            behavior:Run(event)

            ControlActivationEvent controlEvent
            controlEvent:Set(me, event)
            NotifyControlActivationListeners(controlEvent)
        end
    end
end