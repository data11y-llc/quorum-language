package Libraries.Interface.Controls

use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Control
use Libraries.Interface.Views.LabelBoxView
use Libraries.Interface.Views.View2D
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.TabFlowLayout
use Libraries.Interface.Events.TabChangeEvent
use Libraries.Interface.Events.TabChangeListener
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font

class TabBar is Control, ButtonGroup
    
    Array<Tab> tabs
    TabFlowLayout layout
    TabPane pane = undefined

    Array<TabChangeListener> listeners

    on create
        LayoutProperties layoutProperties = GetDefaultLayoutProperties()
        layoutProperties:SetHorizontalLayoutMode(layoutProperties:STANDARD)
        layoutProperties:SetVerticalLayoutMode(layoutProperties:FIT_CONTENTS)
        layoutProperties:SetPercentageWidth(1.0)

        SetLayout(layout)

        SetClipping(true)
        SetName("Tab Bar")
    end

    action Add(Array<Tab> array)
        integer counter = 0
        repeat while counter < array:GetSize()
            Tab tab = array:Get(counter)
            tabs:Add(tab)
            parent:Item2D:Add(tab)
            parent:ButtonGroup:AddButton(tab)
            counter = counter + 1
        end

        Resize()
    end

    action Add(Tab tab)
        tabs:Add(tab)
        parent:Item2D:Add(tab)
        parent:ButtonGroup:AddButton(tab)
        Resize()

        TabChangeEvent event
        event:Set(tab, pane, event:OPENED)
        NotifyTabChangeListeners(event)
    end

    action Remove(Tab tab)
        if tab = undefined
            return now
        end

        boolean reselect = (pane:GetCurrentItem() = tab:GetRelatedItem())

        tabs:Remove(tab)
        parent:Item2D:Remove(tab)
        parent:ButtonGroup:RemoveButton(tab)

        if reselect
            if tabs:GetSize() > 0
                tabs:Get(0):SetToggleState(true)
            else
                pane:UpdateSelection(undefined)
            end
        end

        Resize()

        TabChangeEvent event
        event:Set(tab, pane, event:CLOSED)
        NotifyTabChangeListeners(event)
    end

    action Get(integer index) returns Tab
        return tabs:Get(index)
    end

    action SetTabPane(TabPane tabPane)
        pane = tabPane
        LayoutProperties paneProperties = GetDefaultLayoutProperties()
        SetFont(paneProperties:GetFont())
        SetFontSize(paneProperties:GetFontSize())
    end

    action GetTabPane returns TabPane
        return pane
    end

    action FitTab(Tab tab)
        integer index = GetChildren():GetFirstLocation(tab)
        if index = -1
            return now
        end

        if tab:GetX() <= 0
            LeftFitTab(index - 1.15)
        elseif tab:GetX() + tab:GetWidth() >= GetWidth()
            RightFitTab(index + 1.15)
        end
    end

    action LeftFitTab(number index)
        Array<Item2D> children = GetChildren()
        if index < 0
            index = 0
        elseif index >= children:GetSize()
            index = children:GetSize() - 1
        end

        integer counter = 0
        number offset = 0
        integer intIndex = cast(integer, index)
        repeat while counter < intIndex
            Item2D item = children:Get(counter)
            offset = offset + item:GetWidth()
            counter = counter + 1
        end

        // Include a percentage of the width of the next item, if we have any remainder.
        if counter < children:GetSize()
            offset = offset + (index - intIndex) * children:Get(counter):GetWidth()
        // If there's no next item, offset it by the last item, if there is one.
        elseif counter - 1 < children:GetSize()
            offset = offset + (index - intIndex) * children:Get(counter - 1):GetWidth()
        end

        layout:SetOffset(offset)
        Resize()
    end

    action RightFitTab(number index)
        Array<Item2D> children = GetChildren()
        if index < 0
            index = 0
        elseif index >= children:GetSize()
            index = children:GetSize() - 1
        end

        integer counter = 0
        number offset = 0
        integer intIndex = cast(integer, index)
        repeat while counter <= intIndex
            Item2D item = children:Get(counter)
            offset = offset + item:GetWidth()
            counter = counter + 1
        end

        // Include a percentage of the width of the next item, if we have any remainder.
        if counter < children:GetSize()
            offset = offset + (index - intIndex) * children:Get(counter):GetWidth()
        // If there's no next item, offset it by the last item, if there is one.
        elseif counter - 1 < children:GetSize()
            offset = offset + (index - intIndex) * children:Get(counter - 1):GetWidth()
        end

        layout:SetOffset(offset - GetWidth())
        Resize()
    end

    action GetSize returns integer
        return tabs:GetSize()
    end

    action AddTabChangeListener(TabChangeListener listener)
        listeners:Add(listener)
    end

    action RemoveTabChangeListener(TabChangeListener listener)
        listeners:Remove(listener)
    end

    private action NotifyTabChangeListeners(TabChangeEvent event)
        GameStateManager manager
        manager:GetInput():NotifyTabChangeListeners(event)

        integer counter = 0
        if event:GetEventType() = event:OPENED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):OpenedTab(event)
                counter = counter + 1
            end
        elseif event:GetEventType() = event:CLOSED
            repeat while counter < listeners:GetSize()
                listeners:Get(counter):ClosedTab(event)
                counter = counter + 1
            end
        end
    end

    /*
    This action is used to load the graphical components of the Control. This is
    handled automatically by the Game engine as needed, and most users shouldn't
    need to use this action directly.
    */
    action LoadGraphics(LayoutProperties properties)
        parent:Control:LoadGraphics(properties)

        if properties = undefined
            return now
        end

        LayoutProperties oldProperties = GetCurrentLayoutProperties()
        if oldProperties not= properties
            oldProperties:SetRenderingFlag(true)
            parent:Control:currentProperties = properties
        end

        properties:SetRenderingFlag(false)

        View2D view = properties:GetView2D()
        if view = undefined
            if GetView2D() = undefined
                LabelBoxView content
                Color color
                ColorGroup background = properties:GetBackgroundColor()
                ColorGroup border = properties:GetBorderColor()
                number thickness = properties:GetBorderThickness()
                if background = undefined
                    background = color:DarkGray()
                end
                if border = undefined
                    border = color:Black()
                end
                content:SetBorderThickness(cast(integer, thickness))
                content:Initialize(background, border)
                view = content
            end
        end

        if view not= undefined
            SetView2D(view)
        end
    end

    /*
    This action sets the Font to be used by this Control. How this Font is used
    varies between Controls, and in some cases the Control will ignore it 
    entirely (for example, ScrollPanes), but typically this sets the font that's
    used for the default label on many Controls, such as Buttons. If the Font
    is undefined, many Controls will omit their default label.

    Attribute: Parameter font The Font to use for this Control.
    */
    action SetFont(Font font)
        parent:Control:SetFont(font)
        integer counter = 0
        repeat while counter < tabs:GetSize()
            tabs:Get(counter):SetFont(font)
            counter = counter + 1
        end
    end

    /*
    This action sets the base Font size to be used by this Control, if the
    Control uses a Font.
    */
    action SetFontSize(integer size)
        parent:Control:SetFontSize(size)
        integer counter = 0
        repeat while counter < tabs:GetSize()
            tabs:Get(counter):SetFontSize(size)
            counter = counter + 1
        end
    end
end