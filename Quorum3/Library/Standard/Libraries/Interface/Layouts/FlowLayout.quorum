package Libraries.Interface.Layouts

use Libraries.Containers.Array
use Libraries.Interface.Item2D
use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.MenuBar
use Libraries.Game.Graphics.Font
use Libraries.Game.Graphics.Label

class FlowLayout is Layout

    boolean ignoreHidden = false
    boolean singleLine = false

    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)

        // This is the x position of the next item, unless it flows onto the
        // next line (and resets to 0).
        number x = 0

        /* 
        Boolean used to ensure we don't perform redundant resizing on items
        that were already fit to their contents while fitting the container
        width to its contents.
        */
        boolean fitContainerContents = false
        LayoutProperties containerProperties = undefined
        number containerBorder = 0

        if container not= undefined
            containerProperties = container:GetLayoutProperties(containerWidth, containerHeight)

            if containerProperties not= undefined
                if containerProperties:NeedsRendering()
                    container:LoadGraphics(containerProperties)
                end

                // If the container's height fits the contents, we assume
                // the height is 0 and correct it after laying out.
                if containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_CONTENTS
                    containerHeight = 0
                end

                containerBorder = containerProperties:GetBorderThickness()

                if containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_FONT
                    Font font = containerProperties:GetFont()
                    if font not= undefined
                        number topPadding = 0
                        number bottomPadding = 0

                        integer i = 0
                        repeat while i < items:GetSize()
                            Item2D item = items:Get(i)
                            if item is Control
                                Control control = cast(Control, item)
                                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)
                                if properties:GetTopPadding() > topPadding
                                    topPadding = properties:GetTopPadding()
                                end
                                if properties:GetBottomPadding() > bottomPadding
                                    bottomPadding = properties:GetBottomPadding()
                                end
                            end
                            i = i + 1
                        end

                        containerHeight = font:GetLineHeight() + containerBorder + topPadding + bottomPadding

                        if container:GetHeight() not= containerHeight
                            container:SetHeight(containerHeight)
                        end
                    end
                end

                if containerProperties:GetHorizontalLayoutMode() = containerProperties:FIT_CONTENTS
                    integer i = 0

                    number totalWidthOffset = 0
                    number totalWidthPercentage = 0

                    repeat while i < items:GetSize()
                        Item2D item = items:Get(i)

                        if ignoreHidden = false or item:IsShowing()
                            if item is Control
                                Control control = cast(Control, item)
                                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)
                                if properties not= undefined
                                    if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS 
                                        // Resize the control and allow it to set its own dimensions.
                                        control:Resize()
                                        fitContainerContents = true
                                    end

                                    if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS
                                        totalWidthOffset = totalWidthOffset + control:GetWidth() + properties:GetLeftPadding() + properties:GetRightPadding()
                                    elseif properties:GetHorizontalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                                        // We have to estimate the height now to determine the width.
                                        number height = 0
                                        if properties:GetVerticalLayoutMode() = properties:STANDARD
                                            height = properties:GetPercentageHeight() * (containerHeight - containerBorder * 2 - properties:GetTopPadding() - properties:GetBottomPadding()) + properties:GetPixelHeight() * properties:GetInterfaceScale()
                                        elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                                            if properties:GetFont() not= undefined
                                                height = properties:GetFont():GetLineHeight()
                                            end
                                        elseif properties:GetVerticalLayoutMode() = properties:FILL
                                            height = containerHeight - properties:GetTopPadding() - properties:GetBottomPadding()
                                        elseif properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                                            height = control:GetHeight()
                                        end

                                        totalWidthOffset = totalWidthOffset + (properties:GetPercentageWidth() * height)
                                            + properties:GetLeftPadding() + properties:GetRightPadding()
                                    else
                                        totalWidthOffset = totalWidthOffset + (properties:GetPixelWidth() + properties:GetLeftPadding() + properties:GetRightPadding()) * properties:GetInterfaceScale()
                                        totalWidthPercentage = totalWidthPercentage + properties:GetPercentageWidth()
                                    end
                                else
                                    // If width can't be determined from its properties, use its width instead.
                                    totalWidthOffset = totalWidthOffset + item:GetWidth()
                                end
                            else
                                // If width can't be determined from its properties, use its width instead.
                                totalWidthOffset = totalWidthOffset + item:GetWidth()
                            end
                        end

                        i = i + 1
                    end

                    totalWidthPercentage = 1.0 - totalWidthPercentage
                    containerWidth = totalWidthOffset / totalWidthPercentage
                    container:SetWidth(containerWidth)
                end
            end
        end

        // Objects are placed such that their top edge is at the currentY.
        number currentY = containerHeight - containerBorder
        number nextY = currentY

        i = 0
        repeat while i < items:GetSize()
            Item2D item = items:Get(i)

            if item is Control
                Control control = cast(Control, item)
                control:ResetLayoutFlag()
                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)

                if properties:NeedsRendering()
                    control:LoadGraphics(properties)
                end

                if properties not= undefined and (ignoreHidden = false or control:IsShowing())
                    number width = 0
                    number height = 0
                    number leftPadding = properties:GetLeftPadding()
                    number rightPadding = properties:GetRightPadding()
                    number topPadding = properties:GetTopPadding()
                    number bottomPadding = properties:GetBottomPadding()

                    /*
                    Boolean used to ensure we don't perform redundant resizing
                    on a control.
                    */
                    boolean alreadyFitContents = fitContainerContents and properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS

                    if properties:GetHorizontalLayoutMode() = properties:FIT_CONTENTS and alreadyFitContents = false
                        alreadyFitContents = true
                        if properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS 
                            or properties:GetVerticalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                            // Resize the control and allow it to set its own dimensions.
                            control:Resize()
                        elseif properties:GetVerticalLayoutMode() = properties:FILL
                            // Setting the height will trigger a resize.
                            control:SetHeight(currentY - properties:GetTopPadding() - properties:GetBottomPadding())
                        elseif properties:GetVerticalLayoutMode() = properties:STANDARD
                            // Setting the height will trigger a resize.
                            control:SetHeight((containerHeight - containerBorder * 2 - properties:GetTopPadding() - properties:GetBottomPadding()) * properties:GetPercentageHeight() + properties:GetPixelHeight() * properties:GetInterfaceScale())
                        elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                            if properties:GetFont() not= undefined
                                control:SetHeight(properties:GetFont():GetLineHeight())
                            end
                        end
                        width = control:GetWidth()
                    elseif properties:GetHorizontalLayoutMode() = properties:FILL
                        width = containerWidth - x
                    elseif properties:GetHorizontalLayoutMode() = properties:STANDARD
                        width = (containerWidth - containerBorder * 2 - properties:GetLeftPadding() - properties:GetRightPadding()) * properties:GetPercentageWidth() + properties:GetPixelWidth() * properties:GetInterfaceScale()
                    end

                    x = x + leftPadding

                    if x + width > containerWidth and singleLine = false
                        currentY = nextY
                        x = leftPadding
                    end

                    // When we set the size in this step, we also trigger a
                    // resize that will cascade to the entire control's hierarchy.
                    if alreadyFitContents = false
                        boolean shouldSetSize = true

                        if properties:GetVerticalLayoutMode() = properties:FILL
                            height = currentY
                        elseif properties:GetVerticalLayoutMode() = properties:FIT_CONTENTS
                            // Set the control's width and allow it to set its own height via its contents.
                            // Setting the width triggers its layout to resize.
                            shouldSetSize = false
                            control:SetWidth(width)
                        elseif properties:GetVerticalLayoutMode() = properties:FIT_FONT
                            Font font = properties:GetFont()
                            if font not= undefined
                                height = font:GetLineHeight()
                            end
                        elseif properties:GetVerticalLayoutMode() = properties:STANDARD
                            height = (containerHeight - containerBorder * 2 - properties:GetTopPadding() - properties:GetBottomPadding()) * properties:GetPercentageHeight() + properties:GetPixelHeight() * properties:GetInterfaceScale()
                        elseif properties:GetVerticalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                            height = properties:GetPercentageHeight() * width
                        end

                        if properties:GetHorizontalLayoutMode() = properties:MAINTAIN_ASPECT_RATIO
                            width = properties:GetPercentageWidth() * height
                        end

                        if shouldSetSize
                            control:SetSize(width, height)
                        end
                    end

                    number verticalSpace = currentY - control:GetHeight() - topPadding - bottomPadding

                    if verticalSpace < nextY and singleLine = false
                        nextY = verticalSpace
                    end

                    control:SetPosition(x, currentY - control:GetHeight() - topPadding)
                    x = x + control:GetWidth() + rightPadding
                end
            end

            i = i + 1
        end

        if containerProperties not= undefined and containerProperties:GetVerticalLayoutMode() = containerProperties:FIT_CONTENTS
            container:SetHeight(-nextY)

            /*
            We had to place all elements before to determine the height of the
            container, but now that the height is known we need to ensure the
            items are placed at the right y positions.
            */
            integer counter = 0
            x = 0
            containerHeight = container:GetHeight()
            currentY = containerHeight
            nextY = containerHeight
            repeat while counter < items:GetSize()
                Item2D item = items:Get(counter)
                item:MoveY(containerHeight)
                counter = counter + 1
            end
        end
    end

    action SetIgnoreHidden(boolean ignore)
        ignoreHidden = ignore
    end

    action IsIgnoringHidden returns boolean
        return ignoreHidden
    end

    action SetSingleLine(boolean single)
        singleLine = single
    end

    action IsSingleLine returns boolean
        return singleLine
    end
end