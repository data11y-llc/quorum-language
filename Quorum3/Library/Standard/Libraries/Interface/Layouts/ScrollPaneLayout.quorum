package Libraries.Interface.Layouts

use Libraries.Interface.Item2D
use Libraries.Containers.Array
use Libraries.Language.Support.CompareResult
use Libraries.Interface.Controls.Control

/*
The ScrollPaneLayout class is used to layout the internal components of the
ScrollPane, such as the scroll bars. This class is used internally by the
ScrollPane class, and most developers will never need to use this class
directly.

The following LayoutProperties layout mode constants have special meaning here:
    *   The FILL constant is used to indicate that a component should either set
        its size as a percentage of the container's size, OR use the pixel value
        requested (whichever one is larger).
*/
class ScrollPaneLayout is Layout

    action Layout(Control container, Array<Item2D> items, number containerWidth, number containerHeight)

        integer counter = 0

        repeat while counter < items:GetSize()
            Item2D item = items:Get(counter)
            if item is Control
                Control control = cast(Control, item)
                LayoutProperties properties = control:GetLayoutProperties(containerWidth, containerHeight)

                if properties not= undefined
                    if properties:NeedsRendering()
                        control:LoadGraphics(properties)
                    end

                    number width = control:GetWidth()
                    number height = control:GetHeight()

                    if properties:IsSettingWidth()
                        if properties:GetHorizontalLayoutMode() = properties:FILL
                            width = containerWidth * properties:GetPercentageWidth()
                            if width < properties:GetPixelWidth()
                                width = properties:GetPixelWidth()
                            end
                        else
                            width = containerWidth * properties:GetPercentageWidth() + properties:GetPixelWidth() 
                        end
                    end

                    if properties:IsSettingHeight()
                        if properties:GetVerticalLayoutMode() = properties:FILL
                            height = containerHeight * properties:GetPercentageHeight()
                            if height < properties:GetPixelHeight()
                                height = properties:GetPixelHeight()
                            end
                        else
                            height = containerHeight * properties:GetPercentageHeight() + properties:GetPixelHeight()
                        end
                    end

                    if width < properties:GetMinimumWidth()
                        width = properties:GetMinimumWidth()
                    elseif width > properties:GetMaximumWidth()
                        width = properties:GetMaximumWidth()
                    end

                    if height < properties:GetMinimumHeight()
                        height = properties:GetMinimumHeight()
                    elseif height > properties:GetMaximumHeight()
                        height = properties:GetMaximumHeight()
                    end

                    if properties:IsPositioningInX()
                        if properties:IsPositioningInY()
                            control:SetPosition(containerWidth * properties:GetPercentageX() + properties:GetPixelX() - width * properties:GetPercentageOriginX(),
                                containerHeight * properties:GetPercentageY() + properties:GetPixelY() - height * properties:GetPercentageOriginY())
                        else
                            control:SetX(containerWidth * properties:GetPercentageX() + properties:GetPixelX() - width * properties:GetPercentageOriginX())
                        end
                    elseif properties:IsPositioningInY()
                        control:SetY(containerHeight * properties:GetPercentageY() + properties:GetPixelY() - height * properties:GetPercentageOriginY())
                    end

                    if properties:IsSettingWidth()
                        if properties:IsSettingHeight()
                            control:SetSize(width, height)
                        else
                            control:SetWidth(width)
                        end
                    elseif properties:IsSettingHeight()
                        control:SetHeight(height)
                    end
                end
            end

            counter = counter + 1
        end
    end

end