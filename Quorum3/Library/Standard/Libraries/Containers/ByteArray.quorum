package Libraries.Containers
use Libraries.Containers.Support.ByteReader

/*
    The ByteArray class is a specialized kind of array specifically designed
    for low level byte manipulation from files. The purpose is to provide a 
    way to manipulate bytes efficiently in Quorum, which is necessary for 
    some specialized applications. 

    The values in each position in the array are raw bytes, which means 
    any integer returned is 8 bits in length. As such, they are individually 
    between the numbers -128 and 127.

    Attribute: Example
    //this example will load a file into memory as a ByteArray
    //and print the values from the bytes out one by one.

    use Libraries.System.File
    use Libraries.Containers.ByteArray
    use Libraries.System.BinaryFileReader
    use Libraries.Interface.Events.FileLoadListener
    use Libraries.Interface.Events.FileLoadEvent
    use Libraries.Containers.Support.ByteReader

    class Main is FileLoadListener
        action Main
            File file
            file = file:GetParentDirectory():GetParentDirectory()
            file:SetPath("Library/Tests/ByteArray/HourOfCode.png")
            BinaryFileReader reader
            reader:OpenForRead(file, me)
        end

    action OnLoad(FileLoadEvent event)
        ByteArray value = event:GetBinaryFileReader():ReadBytes()
        integer i = 0
        repeat while i < value:GetSize()
            integer byte = value:Get(i)
            output byte
            i = i + 1
        end
    end
*/

class ByteArray
    
    /*
    This action returns the byte, in integer form, in the array at the given location.

    Attribute: Parameter location The index of where you want to read the array from.

    Attribute: Returns Returns the byte, as an integer, at the specified location.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(1)
    value:Set(0, 65)
    integer byte = value:Get(0)
    output byte
    */
    system action Get(integer location) returns integer

    /*
    This action sets the byte at the given location in the array to the value given.

    Attribute: Parameter location The index of where you want to read the array from.

    Attribute: Parameter value The value to set the byte at the location to.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(1)
    value:Set(0, 65)
    output value:Get(0)
    */
    system action Set(integer location, integer value)

    /*
    This action creates a new ByteArray that is a sub-array of an existing ByteArray,
    starting at begin and ending at finish.

    Attribute: Parameter begin The index location to begin creating the new ByteArray.

    Attribute: Parameter finish The index location to finish creating the new ByteArray.

    Attribute: Returns Returns a ByteArray containing all elements from the original ByteArray
    between begin and finish, inclusive.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(4)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)

    ByteArray subArray
    subArray = value:GetSubArray(0, 2)
    output subArray:GetSize()
    output subArray:Get(0)
    output subArray:Get(1)
    */
    system action GetSubArray(integer begin, integer finish) returns ByteArray

    /*
        This action gets the size of the array.

        Attribute: Return The size of the array. 

        Attribute: Example
        use Libraries.Containers.ByteArray
        ByteArray value
        value:SetSize(4)
        value:Set(0, 65)
        value:Set(1, 66)
        value:Set(2, 67)
        value:Set(3, 68)
        integer size = value:GetSize()
        output size
    */
    system action GetSize returns integer

    /*
    This action gets a ByteReader for this ByteArray.

    Attribute: Returns Returns a ByteReader.

    Attribute: Example
    use Libraries.System.File
    use Libraries.Containers.ByteArray
    use Libraries.Containers.Support.ByteReader

    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    ByteReader reader = value:GetByteReader()
    */
    action GetByteReader returns ByteReader
        ByteReader reader
        reader:SetByteArray(me)
        return reader
    end

    /*
    This action sets the size of the byte array to the value given.

    Attribute: Parameter size The size to set the byte array.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(4)
    output value:GetSize()
    */
    system action SetSize(integer size)

    /*
    This action decompresses a file that has already been stored in a ByteArray
    and returns a new ByteArray containing the decompressed information. The default
    decompression method is ZLib.

    Attribute: Returns Returns a ByteArray containing all of the decompressed data.

    Attribute: Example
    use Libraries.System.File
    use Libraries.Containers.ByteArray

    File file
    file:SetPath("files/Quorum.png")
    ByteArray value = file:ReadBytes()
    value = value:Decompress()
    */
    system action Decompress returns ByteArray

    /*
    This action checks if the data file is in Big Endian format or not.

    Attribute: Returns Returns true if the file is in Big Endian and false if not.
    
    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetBigEndian(true)
    output value:IsBigEndian()
    */
    system action IsBigEndian returns boolean

    /*
    This action sets the file to be in Big Endian format or not.

    Attribute: Parameter yes Sets the format to Big Endian if true, Little Endian if false.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetBigEndian(false)
    output value:IsBigEndian()
    */
    system action SetBigEndian(boolean yes)

    /*
    This action converts a byte into an unsigned integer.

    Attribute: Parameter byte The byte value to convert to an unsigned integer.

    Attribute: Returns Returns the byte value as an unsigned integer.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(1)
    value:Set(0, 65)
    integer byte1 = value:Get(0)
    output value:UnsignedIntegerFromByte(byte1)
    */
    system action UnsignedIntegerFromByte(integer byte) returns integer

    /*
    This action converts a byte into a character.

    Attribute: Parameter byte The byte value to convert to a character.

    Attribute: Returns Returns the character as text.
    
    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(1)
    value:Set(0, 65)
    integer byte = value:Get(0)
    output value:CharacterFromByte(byte)
    */
    system action CharacterFromByte(integer byte) returns text

    /*
    This action converts two bytes into a character.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Returns Returns the character as text.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(2)
    value:Set(0, 1)
    value:Set(1, 1)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    output value:CharacterFromTwoBytes(byte1, byte2)
    */
    system action CharacterFromTwoBytes(integer byte1, integer byte2) returns text

    /*
    This action converts a byte into an integer.

    Attribute: Parameter byte The byte value to convert to an integer.

    Attribute: Returns Returns the byte value as an integer.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(1)
    value:Set(0, 65)
    integer byte = value:Get(0)
    output value:IntegerFromByte(byte)
    */
    system action IntegerFromByte(integer byte) returns integer

    /*
    This action converts four bytes into a number.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Parameter byte3 The third byte value to use for conversion.

    Attribute: Parameter byte4 The fourth byte value to use for conversion.

    Attribute: Returns Returns the byte values as a number.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(4)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    integer byte3 = value:Get(2)
    integer byte4 = value:Get(3)
    output value:NumberFromFourBytes(byte1, byte2, byte3, byte4)
    */
    system action NumberFromFourBytes(integer byte1, integer byte2, integer byte3, integer byte4) returns number

    /*
    This action converts eight bytes into a number.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Parameter byte3 The third byte value to use for conversion.

    Attribute: Parameter byte4 The fourth byte value to use for conversion.

    Attribute: Parameter byte5 The fifth byte value to use for conversion.

    Attribute: Parameter byte6 The sixth byte value to use for conversion.

    Attribute: Parameter byte7 The seventh byte value to use for conversion.

    Attribute: Parameter byte8 The eighth byte value to use for conversion.

    Attribute: Returns Returns the byte values as a number.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(8)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)
    value:Set(4, 1)
    value:Set(5, 2)
    value:Set(6, 3)
    value:Set(7, 4)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    integer byte3 = value:Get(2)
    integer byte4 = value:Get(3)
    integer byte5 = value:Get(4)
    integer byte6 = value:Get(5)
    integer byte7 = value:Get(6)
    integer byte8 = value:Get(7)
    output value:NumberFromEightBytes(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)
    */
    system action NumberFromEightBytes(integer byte1, integer byte2, integer byte3, integer byte4,
                                       integer byte5, integer byte6, integer byte7, integer byte8) returns number
                                       
    /*
    This action converts two bytes into an integer. 

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Returns Returns the byte values as an integer.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(2)
    value:Set(0, 65)
    value:Set(1, 66)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    output value:IntegerFromTwoBytes(byte1, byte2)
    */
    system action IntegerFromTwoBytes(integer byte1, integer byte2) returns integer

    /*
    This action converts two bytes into an unsigned integer.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Returns Returns the byte values as an unsigned integer.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(2)
    value:Set(0, 65)
    value:Set(1, 66)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    output value:UnsignedIntegerFromTwoBytes(byte1, byte2)
    */
    system action UnsignedIntegerFromTwoBytes(integer byte1, integer byte2) returns integer

    /*
    This action converts four bytes into an integer.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Parameter byte3 The third byte value to use for conversion.

    Attribute: Parameter byte4 The fourth byte value to use for conversion.

    Attribute: Returns Returns the byte values as an integer.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(4)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    integer byte3 = value:Get(2)
    integer byte4 = value:Get(3)
    output value:IntegerFromFourBytes(byte1, byte2, byte3, byte4)
    */
    system action IntegerFromFourBytes(integer byte1, integer byte2, integer byte3, integer byte4) returns integer

    /*
    This action converts four unsigned bytes into a signed integer.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Parameter byte3 The third byte value to use for conversion.

    Attribute: Parameter byte4 The fourth byte value to use for conversion.

    Attribute: Returns Returns the byte values as a signed integer.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(4)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    integer byte3 = value:Get(2)
    integer byte4 = value:Get(3)
    output value:SignedIntegerFromFourUnsignedBytes(byte1, byte2, byte3, byte4)
    */
    system action SignedIntegerFromFourUnsignedBytes(integer byte1, integer byte2, integer byte3, integer byte4) returns integer

    /*
    This action converts eight bytes into text as a sequence of numbers.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Parameter byte3 The third byte value to use for conversion.

    Attribute: Parameter byte4 The fourth byte value to use for conversion.

    Attribute: Parameter byte5 The fifth byte value to use for conversion.

    Attribute: Parameter byte6 The sixth byte value to use for conversion.

    Attribute: Parameter byte7 The seventh byte value to use for conversion.

    Attribute: Parameter byte8 The eighth byte value to use for conversion.

    Attribute: Returns Returns the byte values as text.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(8)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)
    value:Set(4, 1)
    value:Set(5, 2)
    value:Set(6, 3)
    value:Set(7, 4)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    integer byte3 = value:Get(2)
    integer byte4 = value:Get(3)
    integer byte5 = value:Get(4)
    integer byte6 = value:Get(5)
    integer byte7 = value:Get(6)
    integer byte8 = value:Get(7)
    output value:TextFromEightBytes(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8)
    */
    system action TextFromEightBytes(integer byte1, integer byte2, integer byte3, integer byte4, integer byte5, integer byte6, integer byte7, integer byte8) returns text

    /*
    This action converts four bytes into text as a sequence of numbers.

    Attribute: Parameter byte1 The first byte value to use for conversion.

    Attribute: Parameter byte2 The second byte value to use for conversion.

    Attribute: Parameter byte3 The third byte value to use for conversion.

    Attribute: Parameter byte4 The fourth byte value to use for conversion.

    Attribute: Returns Returns the byte values as text.

    Attribute: Example
    use Libraries.Containers.ByteArray

    ByteArray value
    value:SetSize(4)
    value:Set(0, 65)
    value:Set(1, 66)
    value:Set(2, 67)
    value:Set(3, 68)
    integer byte1 = value:Get(0)
    integer byte2 = value:Get(1)
    integer byte3 = value:Get(2)
    integer byte4 = value:Get(3)
    output value:TextFromFourBytes(byte1, byte2, byte3, byte4)
    */
    system action TextFromFourBytes(integer byte1, integer byte2, integer byte3, integer byte4) returns text


end