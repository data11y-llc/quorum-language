package Libraries.Curriculum.AudioGame

use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Sound.Audio
use Libraries.Sound.AudioSamples

class Song

    Array<AudioSamples> arrayOfAudio
    Array<number> arrayOfFrequencies
    integer sampleCounter = 0
    Audio audio

    action GenerateSound(number frequency)
        if sampleCounter < 10
            arrayOfFrequencies:Add(frequency)

            Math math
            number twoPI = math:pi * 2
            AudioSamples sample
            sample:SetChannels(1)
            sample:SetSizeInSeconds(1)
            integer sampleSize = sample:GetSamplesPerSecond()
            integer counter = 0

            repeat while counter < sample:GetSize()
                number sine = math:Sine(frequency * twoPI * counter/sampleSize)

                sample:Set(counter, sine, 0)

                counter = counter + 1
            end

            if audio:IsLoaded()
                audio:Dispose()
            end

            audio:Load(sample)
            number timer = 0
            repeat while timer < 1000000
                timer = timer + 1
            end

            audio:Play()

            arrayOfAudio:Add(sample)
            sampleCounter = sampleCounter + 1
        end
    end

    action Clear
        sampleCounter = 0
        counter = 0
        size = arrayOfAudio:GetSize()

        repeat while counter < size
            arrayOfAudio:RemoveFromFront()
            arrayOfFrequencies:RemoveFromFront()

            counter = counter + 1
        end

        output arrayOfAudio:GetSize()
    end

    action GetAudioArray returns Array<AudioSamples>
        return arrayOfAudio
    end

    action GetFrequencyArray returns Array<number>
        return arrayOfFrequencies
    end

    action IsFull returns boolean
        return sampleCounter = 10
    end
end