package Libraries.Curriculum.TurtleProgram

use Libraries.Sound.Audio
use Libraries.Game.Graphics.Drawable
use Libraries.Curriculum.TurtleProgram.ChangePropertiesCommand
use Libraries.Curriculum.TurtleProgram.Command
use Libraries.Curriculum.TurtleProgram.PenCommand
use Libraries.Curriculum.TurtleProgram.RotationCommand
use Libraries.Curriculum.TurtleProgram.SayCommand
use Libraries.Curriculum.TurtleProgram.Turtle
use Libraries.Curriculum.TurtleProgram.TurtleGame

class MoveCommand is Command

    Turtle turtle = undefined
    number target = 0
    integer direction = 0

    Audio moveAudio = undefined
    boolean finished = false

    Drawable line = undefined

    integer startX = 0
    integer startY = 0

    action Start(Turtle turtle)
        me:turtle = turtle

        direction = turtle:GetDirection()
        number distance = turtle:GetPixelsPerSquare()
        boolean penDown = turtle:IsPenDown()

        startX = turtle:GetGridX()
        startY = turtle:GetGridY()

        if direction = turtle:UP
            if turtle:GetGridY() = turtle:GetGridLength()
                finished = true
                Audio audio = turtle:GetErrorAudio()
                audio:Play()
            end

            target = turtle:GetY() + distance
            moveAudio = turtle:GetUpAudio()
        elseif direction = turtle:DOWN
            if turtle:GetGridY() = 0
                finished = true
                Audio audio = turtle:GetErrorAudio()
                audio:Play()
            end

            target = turtle:GetY() - distance
            moveAudio = turtle:GetDownAudio()
        elseif direction = turtle:RIGHT
            if turtle:GetGridX() = turtle:GetGridLength()
                finished = true
                Audio audio = turtle:GetErrorAudio()
                audio:Play()
            end

            target = turtle:GetX() + distance
            moveAudio = turtle:GetRightAudio()
        elseif direction = turtle:LEFT
            if turtle:GetGridX() = 0
                finished = true
                Audio audio = turtle:GetErrorAudio()
                audio:Play()
            end

            target = turtle:GetX() - distance
            moveAudio = turtle:GetLeftAudio()
        end

        if penDown and finished = false
            line = turtle:NewLine()
            turtle:ResumeDrawSound()
        end

        moveAudio:Play()
    end

    action Update(number seconds)
        if finished
            return now
        end

        if direction = turtle:UP
            turtle:MoveY(turtle:GetSpeed() * seconds)

            if turtle:GetY() > target
                turtle:SetY(target)
                finished = true
                turtle:UpdateGridPosition(turtle:GetGridX(), turtle:GetGridY() + 1)

                if line not= undefined
                    turtle:PauseDrawSound()
                    line:SetHeight(turtle:GetPixelsPerSquare() + turtle:GetLineThickness())
                end
            else
                if line not= undefined
                    line:SetHeight(line:GetHeight() + turtle:GetSpeed() * seconds)
                end
            end

        elseif direction = turtle:DOWN
            turtle:MoveY(-turtle:GetSpeed() * seconds)

            if turtle:GetY() < target
                turtle:SetY(target)
                finished = true
                turtle:UpdateGridPosition(turtle:GetGridX(), turtle:GetGridY() - 1)

                if line not= undefined
                    turtle:PauseDrawSound()
                    line:SetHeight(turtle:GetPixelsPerSquare() + turtle:GetLineThickness())
                    line:SetY(turtle:GetOriginY() + turtle:GetGridY() * turtle:GetPixelsPerSquare() - turtle:GetLineThickness() / 2.0)
                end
            else
                if line not= undefined
                    line:SetHeight(line:GetHeight() + turtle:GetSpeed() * seconds)
                    line:MoveY(-turtle:GetSpeed() * seconds)
                end
            end

        elseif direction = turtle:RIGHT
            turtle:MoveX(turtle:GetSpeed() * seconds)

            if turtle:GetX() > target
                turtle:SetX(target)
                finished = true
                turtle:UpdateGridPosition(turtle:GetGridX() + 1, turtle:GetGridY())

                if line not= undefined
                    turtle:PauseDrawSound()
                    line:SetWidth(turtle:GetPixelsPerSquare() + turtle:GetLineThickness())
                end
            else
                if line not= undefined
                    line:SetWidth(line:GetWidth() + turtle:GetSpeed() * seconds)
                end
            end

        elseif direction = turtle:LEFT
            turtle:MoveX(-turtle:GetSpeed() * seconds)

            if turtle:GetX() < target
                turtle:SetX(target)
                finished = true
                turtle:UpdateGridPosition(turtle:GetGridX() - 1, turtle:GetGridY())

                if line not= undefined
                    turtle:PauseDrawSound()
                    line:SetWidth(turtle:GetPixelsPerSquare() + turtle:GetLineThickness())
                    line:SetX(turtle:GetOriginX() + turtle:GetGridX() * turtle:GetPixelsPerSquare() - turtle:GetLineThickness() / 2.0)
                end
            else
                if line not= undefined
                    line:SetWidth(line:GetWidth() + turtle:GetSpeed() * seconds)
                    line:MoveX(-turtle:GetSpeed() * seconds)
                end
            end

        end
    end

    action IsFinished returns boolean
        return finished and moveAudio:IsPlaying() = false
    end

    action GetStartX returns integer
        return startX
    end

    action GetStartY returns integer
        return startY
    end
end