package Libraries.Interface.Accessibility

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.TreeTableChangeEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.WindowFocusEvent
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.ToggleButton
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Events.ProgressBarValueChangedEvent
use Libraries.Interface.Accessibility
use Libraries.Game.GameStateManager
use Libraries.Interface.Item2D
use Libraries.Containers.Array
use Libraries.Interface.Item3D
use Libraries.Containers.Iterator
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Selections.TextFieldSelection
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Selections.TreeSelection
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Selections.SpreadsheetSelection
use Libraries.Interface.Controls.Cell
use Libraries.Interface.Selections.ListSelection
use Libraries.Interface.Controls.ListItem
use Libraries.Interface.Selections.TreeTableSelection
use Libraries.Interface.Controls.TreeTableCell
use Libraries.Interface.Selections.ButtonGroupSelection
use Libraries.Interface.Controls.RadioButton
use Libraries.Interface.Selections.TabPaneSelection

class WebAccessibility is Accessibility
    GameStateManager manager
    Item lastFocused = undefined

    system action NameChanged(Item item)

    system action DescriptionChanged(Item item)

    system action BoundsChanged(Item item)

    system action TextFieldUpdatePassword(TextField field)

    private system action TextSelectionChanged(TextBoxSelection selection)

    private system action TextSelectionChanged(TextFieldSelection selection)

    action Update
        Item focus = manager:GetFocus()
        if focus not= lastFocused
            FocusEvent event
            event:Initialize(lastFocused, focus)
            FocusChanged(event)
            
            lastFocused = focus
        end
    end

    system action ProgressBarValueChanged(ProgressBarValueChangedEvent progress)

    system action Select(Item item)

    action SelectionChanged(SelectionEvent event)
        // taken from AccessibilityManager.quorum
        Selection selection = event:GetSelection()
        if selection is TextBoxSelection
            TextBoxSelection textSelection = cast(TextBoxSelection, selection)
            TextSelectionChanged(textSelection)
        elseif selection is TextFieldSelection
            TextFieldSelection textSelection = cast(TextFieldSelection, selection)
            TextSelectionChanged(textSelection)

        elseif selection is TabPaneSelection
            // Do TabPane things
        elseif selection is MenuSelection
            
            MenuSelection menuSelection = cast(MenuSelection, selection)

            if not menuSelection:IsEmpty()
                Array<MenuItem> path = menuSelection:GetPath()

                Item selectedMenuItem = path:Get(path:GetSize()-1)
                

                Select(selectedMenuItem)
            else
                // TODO: Deselect any native selection
                //Deselect(currentSelection)
            end

        elseif selection is TreeSelection

            TreeSelection treeSelection = cast(TreeSelection, selection)

            if not treeSelection:IsEmpty()
                Array<TreeItem> path = treeSelection:GetPath()

                Item selectedTreeItem = path:Get(path:GetSize()-1)

                Select(selectedTreeItem)
            end

        elseif selection is SpreadsheetSelection
            SpreadsheetSelection tableSelection = cast(SpreadsheetSelection, selection)
            if not tableSelection:IsEmpty()
                Cell cell = tableSelection:Get()

                Select(cell)
            end
        elseif selection is ListSelection
            ListSelection listSelection = cast(ListSelection, selection)
            if not listSelection:IsEmpty()
                ListItem listItem = listSelection:GetListItem()

                Select(listItem)
            end
        elseif selection is TreeTableSelection
            TreeTableSelection treeTableSelection = cast(TreeTableSelection, selection)
            if not treeTableSelection:IsEmpty()
                TreeTableCell cell = treeTableSelection:Get()

                Select(cell)
            end
        elseif selection is ButtonGroupSelection
            ButtonGroupSelection groupSelection = cast(ButtonGroupSelection, selection)
            if not groupSelection:IsEmpty()
                RadioButton button = groupSelection:GetButton()

                Select(button)
            end
        else
            // Do generic things
        end
    end

    system action ButtonActivated(Button button)

    system action ToggleButtonToggled(ToggleButton button)

    system action FocusChanged(FocusEvent event)

    system action NativeAdd(Item item) 

    system action NativeRemove(Item item)

    action Add(Item item)
        //this is the same code from AccessibilityManager.quorum
        NativeAdd(item)
        // Add the children
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()

            Item3D child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Add(child)
            end
        end
    end

    action Remove(Item item)
        //this is the same code from AccessibilityManager.quorum
        // If the item being removed has children then remove them first.
        //Is this necessary or does the native layer figure this out?
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Remove(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()
            
            Item child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Remove(child)
            end
        end

        NativeRemove(item)
    end

    system action MenuChanged(MenuChangeEvent event)

    system action TreeChanged(TreeChangeEvent event)

    system action TreeTableChanged(TreeTableChangeEvent event)

    system action ControlActivated(ControlActivationEvent event)

    system action TextChanged(TextChangeEvent event)

    system action WindowFocusChanged(WindowFocusEvent event)

    system action Notify(Item item, text value)

    system action Notify(Item item, text value, integer notificationType)

    system action Shutdown

    action IsScreenReaderListening returns boolean return false end
end
