package Libraries.Interface

use Libraries.Interface.Item
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Events.MenuChangeEvent
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Events.TreeTableChangeEvent
use Libraries.Interface.Events.ControlActivationEvent
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Interface.Events.WindowFocusEvent
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Selections.TextFieldSelection
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Selections.MenuSelection
use Libraries.Interface.Selections.TreeSelection
use Libraries.Interface.Selections.SpreadsheetSelection
use Libraries.Interface.Selections.ListSelection
use Libraries.Interface.Selections.TreeTableSelection
use Libraries.Interface.Selections.ButtonGroupSelection
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Control
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.RadioButton
use Libraries.Interface.Controls.ToggleButton
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Controls.Cell
use Libraries.Interface.Controls.ListItem
use Libraries.Interface.Controls.TreeTableCell
use Libraries.Interface.Controls.ProgressBar
use Libraries.Interface.Controls.RadioButton
use Libraries.Interface.Events.ProgressBarValueChangedEvent
use Libraries.Game.GameStateManager
use Libraries.Interface.Accessibility

class AccessibilityManager is Accessibility

    private boolean debugOutput = false
    GameStateManager manager

    // The last item that Accessibility sent a focus event to UIA for.
    // Used to determine if a new focus was selected during the last frame of animation.
    Item lastFocused = undefined

    // SetFocus: Tells the accessibility manager that focus has changed to the 
    //           given Item. As far as the native code is concerned, focus changes
    //           only raise an event with UI Automation. No focus state is maintained
    //           at the native level.
    private system action SetFocus(Item item) returns boolean

    private system action Select(Item item) returns boolean

    private system action Deselect(Item item) returns boolean

    // NativeAdd: Adds an Item to the accessibility hierarchy so the screen 
    //            readers can access information about it.
    private system action NativeAdd(Item item) returns boolean
    
    // NativeRemove: Removes an Item from the native accessibility tree so that it is no longer available to screen readers.
    private system action NativeRemove(Item item) returns boolean

    // ===== actions for Buttons
    
    // == Pushbuttons
    private system action OnButtonActivation(Button button) returns boolean

    // == Togglebuttons
    private system action OnToggleButtonToggle(ToggleButton button) returns boolean

    // ===== actions for Textbox

    // TextSelectionChanged: This action will be called whenever the text selection has changed.
    //                       For example, a word or character has been added to the selection.
    private system action TextSelectionChanged(TextBoxSelection selection)

    private system action TextSelectionChanged(TextFieldSelection selection)

    private system action NativeTextChanged(TextBox textBox, TextChangeEvent event)

    private system action NativeTextChanged(TextField textField, TextChangeEvent event)

    private system action ProgressBarValueChanged(ProgressBar progress)

    // =====

    private system action NativeMenuChanged(MenuChangeEvent event) returns boolean

    private system action NativeTreeChanged(TreeChangeEvent event) returns boolean

    private system action NativeTreeTableChanged(TreeTableChangeEvent event) returns boolean

    private system action NativeReselect(TreeItem item)

    system action NameChanged(Item item)

    system action DescriptionChanged(Item item)

    system action BoundsChanged(Item item)

    system action TextFieldUpdatePassword(TextField field)

    // A constant used with the Notify action, indicating that the program had to abort some process.
    public constant integer ACTION_ABORTED_NOTIFICATION = 1
    // A constant used with the Notify action, indicating that an action was completed.
    public constant integer ACTION_COMPLETED_NOTIFICATION = 2
    // A constant used with the Notify action, indicating that a new item was added.
    public constant integer ITEM_ADDED_NOTIFICATION = 3
    // A constant used with the Notify action, indicating that an item was removed.
    public constant integer ITEM_REMOVED_NOTIFICATION = 4
    // A constant used with the Notify action, indicating the notification relates to something that isn't described by the other notification constants.
    public constant integer OTHER_NOTIFICATION = 5

    action Update
        Item focus = manager:GetFocus()
        if focus not= lastFocused
            FocusEvent event
            event:Initialize(lastFocused, focus)
            FocusChanged(event)
            
            lastFocused = focus
        end
    end

    action ProgressBarValueChanged(ProgressBarValueChangedEvent progress)
        ProgressBar bar = progress:GetProgressBar()
        ProgressBarValueChanged(bar)
    end

    action SelectionChanged(SelectionEvent event)
        Selection selection = event:GetSelection()
        if selection is TextBoxSelection
            TextBoxSelection textSelection = cast(TextBoxSelection, selection)
            TextSelectionChanged(textSelection)

        elseif selection is TextFieldSelection
            TextFieldSelection textSelection = cast(TextFieldSelection, selection)
            TextSelectionChanged(textSelection)

        elseif selection is TabPaneSelection
            // Do TabPane things
        elseif selection is MenuSelection
            
            MenuSelection menuSelection = cast(MenuSelection, selection)

            if not menuSelection:IsEmpty()
                Array<MenuItem> path = menuSelection:GetPath()

                Item selectedMenuItem = path:Get(path:GetSize()-1)
                
                if (debugOutput)
                    output "Selection changed: " + selectedMenuItem:GetName()
                end

                Select(selectedMenuItem)
            else
                // TODO: Deselect any native selection
                //Deselect(currentSelection)
            end

        elseif selection is TreeSelection

            TreeSelection treeSelection = cast(TreeSelection, selection)

            if not treeSelection:IsEmpty()
                Array<TreeItem> path = treeSelection:GetPath()

                Item selectedTreeItem = path:Get(path:GetSize()-1)
                
                if (debugOutput)
                    output "Selection changed: " + selectedTreeItem:GetName()
                end

                Select(selectedTreeItem)
            end

        elseif selection is SpreadsheetSelection
            SpreadsheetSelection tableSelection = cast(SpreadsheetSelection, selection)
            if not tableSelection:IsEmpty()
                Cell cell = tableSelection:Get()

                Select(cell)
            end
        elseif selection is ListSelection
            ListSelection listSelection = cast(ListSelection, selection)
            if not listSelection:IsEmpty()
                ListItem listItem = listSelection:GetListItem()

                Select(listItem)
            end
        elseif selection is TreeTableSelection
            TreeTableSelection treeTableSelection = cast(TreeTableSelection, selection)
            if not treeTableSelection:IsEmpty()
                TreeTableCell cell = treeTableSelection:Get()

                Select(cell)
            end
        elseif selection is ButtonGroupSelection
            ButtonGroupSelection groupSelection = cast(ButtonGroupSelection, selection)
            if not groupSelection:IsEmpty()
                RadioButton button = groupSelection:GetButton()

                Select(button)
            end
        else
            // Do generic things
        end
    end

    action ButtonActivated(Button button)
        if button is Tab
            // Inform the native layer that the Tab is being selected, unless it's
            // otherwise handled by the system.
        elseif button is RadioButton
            // Inform the native layer that the RadioButton is being selected,
            // unless it's otherwise handled by the system.
        elseif button is ToggleButton
            // Inform the native layer that the ToggleButton is being toggled,
            // unless it's otherwise handled by the system.
        else
            OnButtonActivation(button)
        end
    end

    action ToggleButtonToggled(ToggleButton button)
        OnToggleButtonToggle(button)
    end

    action FocusChanged(FocusEvent event)
        
        // Handle the focus change.
        Item newFocus = event:GetNewFocus()

        if (debugOutput)
            output "Focus changed to: " + newFocus:GetAccessibilityType() + " - " + newFocus:GetName()
        end

        SetFocus(newFocus)
    end

    action Add(Item item)
        NativeAdd(item)
        // Add the children
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Add(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()

            Item3D child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Add(child)
            end
        end
    end

    action Remove(Item item)
        // If the item being removed has children then remove them first.
        //Is this necessary or does the native layer figure this out?
        if item is Item2D
            Item2D temp = cast(Item2D, item)
            Array<Item2D> children = temp:GetChildren()
            
            integer counter = 0

            repeat while counter < children:GetSize()
                Remove(children:Get(counter))
                counter = counter + 1
            end

        elseif item is Item3D
            Item3D temp = cast(Item3D, item)
            Iterator<Item3D> children = temp:GetItems()
            
            Item child = undefined

            repeat while children:HasNext()
                child = children:Next()
                Remove(child)
            end
        end

        NativeRemove(item)
    end

    action MenuChanged(MenuChangeEvent event)
        if (debugOutput)
            output "Menu changed: " + event:GetMenuItem():GetName()
        end

        NativeMenuChanged(event)
    end

    action TreeChanged(TreeChangeEvent event)
        if (debugOutput)
            output "Tree changed: " + event:GetTreeItem():GetName()
        end

        NativeTreeChanged(event)
    end

    action TreeTableChanged(TreeTableChangeEvent event)
        NativeTreeTableChanged(event)
    end

    action ControlActivated(ControlActivationEvent event)
        if (debugOutput)
            output "Control activated: " + event:GetControl():GetName()
        end
    end

    action TextChanged(TextChangeEvent event)
        Control control = event:GetControl()
        if control is TextBox
            NativeTextChanged(cast(TextBox, control), event)
        elseif control is TextField
            NativeTextChanged(cast(TextField, control), event)
        end
    end

    action WindowFocusChanged(WindowFocusEvent event)
        if event:IsFocused()
            Item item = manager:GetFocus()
            if item not= undefined
                if item:GetAccessibilityCode() not= item:ITEM
//                    SetFocus(item)
                end
            end
        end
    end

    action Notify(Item item, text value)
        Notify(item, value, OTHER_NOTIFICATION)
    end

    system action Notify(Item item, text value, integer notificationType)

    /*
    The Shutdown action shuts down the underlying accessibility architecture.
    */
    system action Shutdown

    system action IsScreenReaderListening returns boolean
end
